{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "lakeshore-adf"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/TOWER_FULL_LOAD_FACT_DC')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Tower Table Names",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SnowflakeV2Source",
								"exportSettings": {
									"type": "SnowflakeExportCopyCommand"
								}
							},
							"dataset": {
								"referenceName": "LRS_Snowflake_Raw_V2",
								"type": "DatasetReference",
								"parameters": {
									"Snowflake_Sink_Table": "VW_TOWER_WATERMARK",
									"Snowflake_Schema": "MASTER_DATA"
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "Copy Tables",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Tower Table Names",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Tower Table Names').output.value",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Copy Data",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SqlServerSource",
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"sink": {
											"type": "SnowflakeV2Sink",
											"preCopyScript": {
												"value": "@{concat('truncate table ',item().Snowflake_Schema,'.', item().Table_Name)}",
												"type": "Expression"
											},
											"importSettings": {
												"type": "SnowflakeImportCopyCommand",
												"additionalCopyOptions": {
													"ON_ERROR": "CONTINUE"
												}
											}
										},
										"enableStaging": true,
										"stagingSettings": {
											"linkedServiceName": {
												"referenceName": "msaz01_dm01_Azure_Blob",
												"type": "LinkedServiceReference"
											},
											"path": "staging"
										},
										"enableSkipIncompatibleRow": true,
										"logSettings": {
											"enableCopyActivityLog": true,
											"copyActivityLogSettings": {
												"logLevel": "Warning",
												"enableReliableLogging": false
											},
											"logLocationSettings": {
												"linkedServiceName": {
													"referenceName": "AzureBlobLinkedService",
													"type": "LinkedServiceReference"
												}
											}
										}
									},
									"inputs": [
										{
											"referenceName": "MSAZ01_TOWER",
											"type": "DatasetReference",
											"parameters": {
												"db": "Tower7",
												"schema": "dbo",
												"table": {
													"value": "@item().Table_Name",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "LRS_Snowflake_Raw_IR_V2",
											"type": "DatasetReference",
											"parameters": {
												"Snowflake_Sink_Table": "@item().Table_name",
												"Snowflake_Schema": "@item().Snowflake_Schema"
											}
										}
									]
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "Test/Tower_DC"
				},
				"annotations": [],
				"lastPublishTime": "2024-08-30T17:58:00Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/TOWER_INCREMENTAL_LOAD_2')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Tower Table Names",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SnowflakeV2Source",
								"query": "SELECT *\nfrom lrs_raw.master_data.tower_Table_names\nwhere Load_type = 'Incremental'\nand\ntable_name IN ('SERVICEINFO', 'DAILYROUTEENTRY', 'DAILYROUTEENTRYVEHICLE','WORKORDERCHARGE', 'DAILYROUTEENTRY', 'DAILYROUTEDOWNTIME','DAILYROUTEENTRYLABOR')",
								"exportSettings": {
									"type": "SnowflakeExportCopyCommand"
								}
							},
							"dataset": {
								"referenceName": "LRS_Snowflake_Raw_V2",
								"type": "DatasetReference",
								"parameters": {
									"Snowflake_Sink_Table": "VW_TOWER_WATERMARK_PVT",
									"Snowflake_Schema": "MASTER_DATA"
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "DateTime Incremental Loop",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Tower Table Names",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Tower Table Names').output.value",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "SERVICEINFO Delta Load",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "Create staging for ServiceInfo",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SqlServerSource",
											"sqlReaderQuery": {
												"value": "@{concat(\n    'select * from SERVICEINFO where STARTDATE > DATEADD(day,-', \n    pipeline().parameters.Incremental_Range,\n    ', GETDATE())'\n    )\n}\n",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"sink": {
											"type": "SnowflakeV2Sink",
											"importSettings": {
												"type": "SnowflakeImportCopyCommand",
												"additionalCopyOptions": {
													"ON_ERROR": "CONTINUE"
												}
											}
										},
										"enableStaging": true,
										"stagingSettings": {
											"linkedServiceName": {
												"referenceName": "msaz01_dm01_Azure_Blob",
												"type": "LinkedServiceReference"
											},
											"path": "staging",
											"enableCompression": true
										},
										"enableSkipIncompatibleRow": true,
										"logSettings": {
											"enableCopyActivityLog": true,
											"copyActivityLogSettings": {
												"logLevel": "Warning",
												"enableReliableLogging": false
											},
											"logLocationSettings": {
												"linkedServiceName": {
													"referenceName": "msaz01_dm01_Azure_Blob",
													"type": "LinkedServiceReference"
												}
											}
										},
										"translator": {
											"type": "TabularTranslator",
											"mappings": [
												{
													"source": {
														"name": "ARDETAILUID",
														"type": "String"
													},
													"sink": {
														"name": "ARDETAILUID",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "SOURCEUID",
														"type": "String"
													},
													"sink": {
														"name": "SOURCEUID",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "STATUS",
														"type": "Int64"
													},
													"sink": {
														"name": "STATUS",
														"type": "Int64"
													}
												},
												{
													"source": {
														"name": "CUSTID",
														"type": "String"
													},
													"sink": {
														"name": "CUSTID",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "SITEID",
														"type": "String"
													},
													"sink": {
														"name": "SITEID",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "MATERIAL",
														"type": "String"
													},
													"sink": {
														"name": "MATERIAL",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "DETAILTYPE",
														"type": "Int64"
													},
													"sink": {
														"name": "DETAILTYPE",
														"type": "Int64"
													}
												},
												{
													"source": {
														"name": "TAX",
														"type": "String"
													},
													"sink": {
														"name": "TAX",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "DEBITACCT",
														"type": "String"
													},
													"sink": {
														"name": "DEBITACCT",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "CREDITACCT",
														"type": "String"
													},
													"sink": {
														"name": "CREDITACCT",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "PERIOD",
														"type": "String"
													},
													"sink": {
														"name": "PERIOD",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "INVOICEUID",
														"type": "String"
													},
													"sink": {
														"name": "INVOICEUID",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "TRANSACTIONDATE",
														"type": "DateTime"
													},
													"sink": {
														"name": "TRANSACTIONDATE",
														"type": "DateTime"
													}
												},
												{
													"source": {
														"name": "DUEDATE",
														"type": "DateTime"
													},
													"sink": {
														"name": "DUEDATE",
														"type": "DateTime"
													}
												},
												{
													"source": {
														"name": "GLEXPORTBATCHUID",
														"type": "String"
													},
													"sink": {
														"name": "GLEXPORTBATCHUID",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "QUANTITY",
														"type": "Int64"
													},
													"sink": {
														"name": "QUANTITY",
														"type": "Int64"
													}
												},
												{
													"source": {
														"name": "UNITRATE",
														"type": "Int64"
													},
													"sink": {
														"name": "UNITRATE",
														"type": "Int64"
													}
												},
												{
													"source": {
														"name": "ORIGINALAMOUNT",
														"type": "Int64"
													},
													"sink": {
														"name": "ORIGINALAMOUNT",
														"type": "Int64"
													}
												},
												{
													"source": {
														"name": "BALANCE",
														"type": "Int64"
													},
													"sink": {
														"name": "BALANCE",
														"type": "Int64"
													}
												},
												{
													"source": {
														"name": "BILLEDAPPLIEDAMOUNT",
														"type": "Int64"
													},
													"sink": {
														"name": "BILLEDAPPLIEDAMOUNT",
														"type": "Int64"
													}
												},
												{
													"source": {
														"name": "DISPLAYONINVOICE",
														"type": "Int64"
													},
													"sink": {
														"name": "DISPLAYONINVOICE",
														"type": "Int64"
													}
												},
												{
													"source": {
														"name": "DETAILSOURCE",
														"type": "Int64"
													},
													"sink": {
														"name": "DETAILSOURCE",
														"type": "Int64"
													}
												},
												{
													"source": {
														"name": "COMPANYID",
														"type": "String"
													},
													"sink": {
														"name": "COMPANYID",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "CREATEDDATETIME",
														"type": "DateTime"
													},
													"sink": {
														"name": "CREATEDDATETIME",
														"type": "DateTime"
													}
												},
												{
													"source": {
														"name": "CREDITACCTSEGTYPE",
														"type": "Int64"
													},
													"sink": {
														"name": "CREDITACCTSEGTYPE",
														"type": "Int64"
													}
												},
												{
													"source": {
														"name": "DEBITACCTSEGTYPE",
														"type": "Int64"
													},
													"sink": {
														"name": "DEBITACCTSEGTYPE",
														"type": "Int64"
													}
												}
											]
										}
									},
									"inputs": [
										{
											"referenceName": "MSAZ01_TOWER",
											"type": "DatasetReference",
											"parameters": {
												"db": "Tower7",
												"schema": "dbo",
												"table": "SERVICEINFO"
											}
										}
									],
									"outputs": [
										{
											"referenceName": "LRS_Snowflake_Raw_IR_V2",
											"type": "DatasetReference",
											"parameters": {
												"Snowflake_Sink_Table": "ARDETAIL_STAGING",
												"Snowflake_Schema": "TOWER_RAW"
											}
										}
									]
								},
								{
									"name": "SERVICEINFO Snowflake Merge Operation",
									"description": "merge statement to the raw tables. this helps avoids any duplication and upsert the rows needed.",
									"type": "Script",
									"dependsOn": [
										{
											"activity": "SERVICEINFO Delta Load",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "LRS_Snowflake_V2",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"type": "Query",
												"text": {
													"value": "@{concat('merge into LRS_RAW.TOWER_RAW.ARDETAIL t \nusing \n    TOWER_RAW.ARDETAIL_STAGING s \non t.ardetailuid = s.ardetailuid  \nwhen matched then update set \n\tardetailuid = s.ardetailuid ,\n      t.sourceuid = s.sourceuid ,\n      t.status = s.status ,\n      t.custid = s.custid ,\n      t.siteid = s.siteid ,\n      t.material = s.material ,\n      t.detailtype = s.detailtype ,\n      t.tax = s.tax ,\n      t.debitacct = s.debitacct ,\n      t.creditacct = s.creditacct ,\n      t.period = s.period ,\n      t.invoiceuid = s.invoiceuid ,\n      t.transactiondate = s.transactiondate ,\n      t.duedate = s.duedate ,\n      t.glexportbatchuid = s.glexportbatchuid ,\n      t.quantity = s.quantity ,\n      t.unitrate = s.unitrate,\n      t.originalamount = s.originalamount ,\n      t.balance = s.balance ,\n      t.billedappliedamount = s.billedappliedamount ,\n      t.displayoninvoice = s.displayoninvoice ,\n      t.detailsource = s.detailsource ,\n      t.companyid = s. companyid ,\n      t.createddatetime = s.createddatetime ,\n      t.creditacctsegtype = s.creditacctsegtype ,\n      t.debitacctsegtype = s.debitacctsegtype \nwhen not matched then insert \n\t(\n\tardetailuid ,\n      t.sourceuid ,\n      t.status ,\n      t.custid ,\n      t.siteid ,\n      t.material ,\n      t.detailtype ,\n      t.tax ,\n      t.debitacct ,\n      t.creditacct ,\n      t.period ,\n      t.invoiceuid ,\n      t.transactiondate ,\n      t.duedate ,\n      t.glexportbatchuid ,\n      t.quantity ,\n      t.unitrate ,\n      t.originalamount ,\n      t.balance ,\n      t.billedappliedamount ,\n      t.displayoninvoice ,\n      t.detailsource ,\n      t.companyid ,\n      t.createddatetime ,\n      t.creditacctsegtype ,\n      t.debitacctsegtype \n\t)\nvalues \n\t(\n\t ardetailuid ,\n      s.sourceuid ,\n      s.status ,\n      s.custid ,\n      s.siteid ,\n      s.material ,\n      s.detailtype ,\n      s.tax ,\n      s.debitacct ,\n      s.creditacct ,\n      s.period ,\n      s.invoiceuid ,\n      s.transactiondate ,\n      s.duedate ,\n      s.glexportbatchuid ,\n      s.quantity ,\n      s.unitrate ,\n      s.originalamount ,\n      s.balance ,\n      s.billedappliedamount ,\n      s.displayoninvoice ,\n      s.detailsource ,\n      s.companyid ,\n      s.createddatetime ,\n      s.creditacctsegtype ,\n      s.debitacctsegtype)'\n\t)}\n",
													"type": "Expression"
												}
											}
										],
										"scriptBlockExecutionTimeout": "02:00:00"
									}
								},
								{
									"name": "Create staging for ServiceInfo",
									"type": "Script",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "LRS_Snowflake_V2",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"type": "Query",
												"text": {
													"value": "@{concat(\n    'Create or replace table LRS_RAW.TOWER_RAW.SERVICEINFO_STAGING',\n    ' as select * from  \n    LRS_RAW.TOWER_RAW.SERVICEINFO where 1=0'\n    )\n    }",
													"type": "Expression"
												}
											}
										],
										"scriptBlockExecutionTimeout": "02:00:00"
									}
								},
								{
									"name": "Drop staging table for SERVICEINFO",
									"type": "Script",
									"dependsOn": [
										{
											"activity": "SERVICEINFO Snowflake Merge Operation",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "LRS_Snowflake_V2",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"type": "Query",
												"text": {
													"value": "@{concat(\n    'Drop table LRS_RAW.TOWER_RAW.SERVICEINFO_STAGING'\n    )\n}",
													"type": "Expression"
												}
											}
										],
										"scriptBlockExecutionTimeout": "02:00:00"
									}
								},
								{
									"name": "DAILYROUTEENTRYVEHICLE Delta Load",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "Create staging for DAILYROUTEENTRYVEHICLE",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SqlServerSource",
											"sqlReaderQuery": {
												"value": "@{concat(\n    'select * from DAILYROUTEENTRYVEHICLE where exportdatetime > DATEADD(day,-', \n    pipeline().parameters.Incremental_Range,\n    ', GETDATE())'\n    )\n}\n",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"sink": {
											"type": "SnowflakeV2Sink",
											"importSettings": {
												"type": "SnowflakeImportCopyCommand",
												"additionalCopyOptions": {
													"ON_ERROR": "CONTINUE"
												}
											}
										},
										"enableStaging": true,
										"stagingSettings": {
											"linkedServiceName": {
												"referenceName": "msaz01_dm01_Azure_Blob",
												"type": "LinkedServiceReference"
											},
											"path": "staging",
											"enableCompression": true
										},
										"enableSkipIncompatibleRow": true,
										"logSettings": {
											"enableCopyActivityLog": true,
											"copyActivityLogSettings": {
												"logLevel": "Warning",
												"enableReliableLogging": false
											},
											"logLocationSettings": {
												"linkedServiceName": {
													"referenceName": "msaz01_dm01_Azure_Blob",
													"type": "LinkedServiceReference"
												}
											}
										},
										"translator": {
											"type": "TabularTranslator",
											"mappings": [
												{
													"source": {
														"name": "GLExportBatchUID",
														"type": "Guid"
													},
													"sink": {
														"name": "GLEXPORTBATCHUID",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "GLExportBatchID",
														"type": "String"
													},
													"sink": {
														"name": "GLEXPORTBATCHID",
														"type": "Int64"
													}
												},
												{
													"source": {
														"name": "ExportDateTime",
														"type": "DateTime"
													},
													"sink": {
														"name": "EXPORTDATETIME",
														"type": "DateTime"
													}
												},
												{
													"source": {
														"name": "Status",
														"type": "Int16"
													},
													"sink": {
														"name": "STATUS",
														"type": "Int64"
													}
												},
												{
													"source": {
														"name": "CreditTotal",
														"type": "Decimal"
													},
													"sink": {
														"name": "CREDITTOTAL",
														"type": "Int64"
													}
												},
												{
													"source": {
														"name": "DebitTotal",
														"type": "Decimal"
													},
													"sink": {
														"name": "DEBITTOTAL",
														"type": "Int64"
													}
												},
												{
													"source": {
														"name": "Description",
														"type": "String"
													},
													"sink": {
														"name": "DESCRIPTION",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "FileCount",
														"type": "Int32"
													},
													"sink": {
														"name": "FILECOUNT",
														"type": "Int64"
													}
												},
												{
													"source": {
														"name": "BatchType",
														"type": "Int16"
													},
													"sink": {
														"name": "BATCHTYPE",
														"type": "Int64"
													}
												},
												{
													"source": {
														"name": "CompanyID",
														"type": "String"
													},
													"sink": {
														"name": "COMPANYID",
														"type": "Int64"
													}
												},
												{
													"source": {
														"name": "Period",
														"type": "String"
													},
													"sink": {
														"name": "PERIOD",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "CompanyList",
														"type": "String"
													},
													"sink": {
														"name": "COMPANYLIST",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "PeriodList",
														"type": "String"
													},
													"sink": {
														"name": "PERIODLIST",
														"type": "String"
													}
												}
											]
										}
									},
									"inputs": [
										{
											"referenceName": "MSAZ01_TOWER",
											"type": "DatasetReference",
											"parameters": {
												"db": "Tower7",
												"schema": "dbo",
												"table": "DAILYROUTEENTRYVEHICLE"
											}
										}
									],
									"outputs": [
										{
											"referenceName": "LRS_Snowflake_Raw_IR_V2",
											"type": "DatasetReference",
											"parameters": {
												"Snowflake_Sink_Table": "GLEXPORTBATCH_STAGING",
												"Snowflake_Schema": "TOWER_RAW"
											}
										}
									]
								},
								{
									"name": "GLExportBatch Snowflake Merge Operation",
									"description": "merge statement to the raw tables. this helps avoids any duplication and upsert the rows needed.",
									"type": "Script",
									"dependsOn": [
										{
											"activity": "DAILYROUTEENTRYVEHICLE Delta Load",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "LRS_Snowflake_V2",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"type": "Query",
												"text": {
													"value": "@{concat('merge into LRS_RAW.TOWER_RAW.GLEXPORTBATCH t \nusing \n    TOWER_RAW.GLEXPORTBATCH_STAGING s \non t.GLEXPORTBATCHUID = s.GLEXPORTBATCHUID  \nwhen matched then update set \n\tt.glexportbatchuid = s.glexportbatchuid ,\n\tt.glexportbatchid = s.glexportbatchid,\n\tt.exportdatetime= s.exportdatetime ,\n\tt.status = s.status ,\n\tt.credittotal = s.credittotal ,\n\tt.debittotal = s.debittotal ,\n\tt.description = s.description ,\n\tt.filecount = s.filecount,\n\tt.batchtype = s.batchtype,\n\tt.companyid = s.companyid,\n\tt.period = s.period ,\n\tt.companylist = s.companylist ,\n\tt.periodlist = s.periodlist \nwhen not matched then insert \n\t(\n\tt.glexportbatchuid,\n\tt.glexportbatchid ,\n\tt.exportdatetime,\n\tt.status ,\n\tt.credittotal ,\n\tt.debittotal ,\n\tt.description ,\n\tt.filecount ,\n\tt.batchtype ,\n\tt.companyid ,\n\tt.period ,\n\tt.companylist ,\n\tt.periodlist \n\t)\nvalues \n\t(\n\ts.glexportbatchuid ,\n\ts.glexportbatchid ,\n\ts.exportdatetime,\n\ts.status ,\n\ts.credittotal ,\n\ts.debittotal ,\n\ts.description ,\n\ts.filecount ,\n\ts.batchtype ,\n\ts.companyid ,\n\ts.period ,\n\ts.companylist,\n\ts.periodlist)'\n\t)}\n",
													"type": "Expression"
												}
											}
										],
										"scriptBlockExecutionTimeout": "02:00:00"
									}
								},
								{
									"name": "Create staging for DAILYROUTEENTRYVEHICLE",
									"type": "Script",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "LRS_Snowflake_V2",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"type": "Query",
												"text": {
													"value": "@{concat(\n    'Create or replace table LRS_RAW.TOWER_RAW.DAILYROUTEENTRYVEHICLE_STAGING',\n    ' as select * from  \n    LRS_RAW.TOWER_RAW.DAILYROUTEENTRYVEHICLE where 1=0'\n    )\n    }",
													"type": "Expression"
												}
											}
										],
										"scriptBlockExecutionTimeout": "02:00:00"
									}
								},
								{
									"name": "Drop staging table for GLExportBatch",
									"type": "Script",
									"dependsOn": [
										{
											"activity": "GLExportBatch Snowflake Merge Operation",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "LRS_Snowflake_V2",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"type": "Query",
												"text": {
													"value": "@{concat(\n    'Drop table LRS_RAW.TOWER_RAW.GLEXPORTBATCH_STAGING'\n    )\n}",
													"type": "Expression"
												}
											}
										],
										"scriptBlockExecutionTimeout": "02:00:00"
									}
								},
								{
									"name": "Payment Delta Load",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "Create staging for Payment",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SqlServerSource",
											"sqlReaderQuery": {
												"value": "@{concat(\n    'select * from PAYMENT where PAYMENTDATE > DATEADD(day,-', \n    pipeline().parameters.Incremental_Range,\n    ', GETDATE())'\n    )\n}\n",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"sink": {
											"type": "SnowflakeV2Sink",
											"importSettings": {
												"type": "SnowflakeImportCopyCommand",
												"additionalCopyOptions": {
													"ON_ERROR": "CONTINUE"
												}
											}
										},
										"enableStaging": true,
										"stagingSettings": {
											"linkedServiceName": {
												"referenceName": "msaz01_dm01_Azure_Blob",
												"type": "LinkedServiceReference"
											},
											"path": "staging",
											"enableCompression": true
										},
										"enableSkipIncompatibleRow": true,
										"logSettings": {
											"enableCopyActivityLog": true,
											"copyActivityLogSettings": {
												"logLevel": "Warning",
												"enableReliableLogging": false
											},
											"logLocationSettings": {
												"linkedServiceName": {
													"referenceName": "msaz01_dm01_Azure_Blob",
													"type": "LinkedServiceReference"
												}
											}
										},
										"translator": {
											"type": "TabularTranslator",
											"mappings": [
												{
													"source": {
														"name": "PaymentUID",
														"type": "Guid"
													},
													"sink": {
														"name": "PAYMENTUID",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "PaymentBatchUID",
														"type": "Guid"
													},
													"sink": {
														"name": "PAYMENTBATCHUID",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "BatchSequence",
														"type": "Int32"
													},
													"sink": {
														"name": "BATCHSEQUENCE",
														"type": "Int64"
													}
												},
												{
													"source": {
														"name": "SourceUID",
														"type": "Guid"
													},
													"sink": {
														"name": "SOURCEUID",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "PaymentDate",
														"type": "DateTime"
													},
													"sink": {
														"name": "PAYMENTDATE",
														"type": "DateTime"
													}
												},
												{
													"source": {
														"name": "Status",
														"type": "Int16"
													},
													"sink": {
														"name": "STATUS",
														"type": "Int64"
													}
												},
												{
													"source": {
														"name": "ClearOrNSFDate",
														"type": "DateTime"
													},
													"sink": {
														"name": "CLEARORNSFDATE",
														"type": "DateTime"
													}
												},
												{
													"source": {
														"name": "CustID",
														"type": "String"
													},
													"sink": {
														"name": "CUSTID",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "PaymentMethod",
														"type": "Int16"
													},
													"sink": {
														"name": "PAYMENTMETHOD",
														"type": "Int64"
													}
												},
												{
													"source": {
														"name": "CreditCardType",
														"type": "Int16"
													},
													"sink": {
														"name": "CREDITCARDTYPE",
														"type": "Int64"
													}
												},
												{
													"source": {
														"name": "PaymentBankAcct",
														"type": "String"
													},
													"sink": {
														"name": "PAYMENTBANKACCT",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "PaymentIDNbr",
														"type": "String"
													},
													"sink": {
														"name": "PAYMENTIDNBR",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "Amount",
														"type": "Decimal"
													},
													"sink": {
														"name": "AMOUNT",
														"type": "Int64"
													}
												},
												{
													"source": {
														"name": "ApplicationMethod",
														"type": "Int16"
													},
													"sink": {
														"name": "APPLICATIONMETHOD",
														"type": "Int64"
													}
												},
												{
													"source": {
														"name": "RemoveCreditHold",
														"type": "Int16"
													},
													"sink": {
														"name": "REMOVECREDITHOLD",
														"type": "Int64"
													}
												},
												{
													"source": {
														"name": "CreditAmount",
														"type": "Decimal"
													},
													"sink": {
														"name": "CREDITAMOUNT",
														"type": "Int64"
													}
												},
												{
													"source": {
														"name": "CreditReason",
														"type": "String"
													},
													"sink": {
														"name": "CREDITREASON",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "PaymentNote",
														"type": "String"
													},
													"sink": {
														"name": "PAYMENTNOTE",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "CustomerBalance",
														"type": "Decimal"
													},
													"sink": {
														"name": "CUSTOMERBALANCE",
														"type": "Int64"
													}
												},
												{
													"source": {
														"name": "BankAccountXRefUID",
														"type": "Guid"
													},
													"sink": {
														"name": "BANKACCOUNTXREFUID",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "CollectionsNotified",
														"type": "Int16"
													},
													"sink": {
														"name": "COLLECTIONSNOTIFIED",
														"type": "Int64"
													}
												},
												{
													"source": {
														"name": "CustomerPaymentAccountUID",
														"type": "Guid"
													},
													"sink": {
														"name": "CUSTOMERPAYMENTACCOUNTUID",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "ReversedByDate",
														"type": "DateTime"
													},
													"sink": {
														"name": "REVERSEDBYDATE",
														"type": "DateTime"
													}
												},
												{
													"source": {
														"name": "ReversedByUserID",
														"type": "String"
													},
													"sink": {
														"name": "REVERSEDBYUSERID",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "ReversalReasonNote",
														"type": "String"
													},
													"sink": {
														"name": "REVERSALREASONNOTE",
														"type": "String"
													}
												}
											]
										}
									},
									"inputs": [
										{
											"referenceName": "MSAZ01_TOWER",
											"type": "DatasetReference",
											"parameters": {
												"db": "Tower7",
												"schema": "dbo",
												"table": "Payment"
											}
										}
									],
									"outputs": [
										{
											"referenceName": "LRS_Snowflake_Raw_IR_V2",
											"type": "DatasetReference",
											"parameters": {
												"Snowflake_Sink_Table": "PAYMENT_STAGING",
												"Snowflake_Schema": "TOWER_RAW"
											}
										}
									]
								},
								{
									"name": "Payment Snowflake Merge Operation",
									"description": "merge statement to the raw tables. this helps avoids any duplication and upsert the rows needed.",
									"type": "Script",
									"dependsOn": [
										{
											"activity": "Payment Delta Load",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "LRS_Snowflake_V2",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"type": "Query",
												"text": {
													"value": "@{concat('merge into LRS_RAW.TOWER_RAW.PAYMENT t \nusing \n    TOWER_RAW.PAYMENT_STAGING s \non t.PAYMENTUID = s.PAYMENTUID  \nwhen matched then update set \n\tt.paymentuid =s.paymentuid , \n\tt.paymentbatchuid =s.paymentbatchuid , \n\tt.batchsequence =s.batchsequence , \n\tt.sourceuid =s.sourceuid, \n\tt.paymentdate =s.paymentdate , \n\tt.status =s.status, \n\tt.clearornsfdate =s.clearornsfdate, \n\tt.custid =s. custid , \n\tt.paymentmethod =s.paymentmethod , \n\tt.creditcardtype =s.creditcardtype, \n\tt.paymentbankacct =s.paymentbankacct, \n\tt.paymentidnbr =s.paymentidnbr, \n\tt.amount =s.amount , \n\tt.applicationmethod =s.applicationmethod , \n\tt.removecredithold =s.removecredithold , \n\tt.creditamount =s.creditamount , \n\tt.creditreason =s.creditreason, \n\tt.paymentnote=s.paymentnote ,  \n\tt.customerbalance =s.customerbalance, \n\tt.bankaccountxrefuid =s.bankaccountxrefuid , \n\tt.collectionsnotified =s.collectionsnotified, \n\tt.customerpaymentaccountuid =s.customerpaymentaccountuid, \n\tt.reversedbydate=s.reversedbydate , \n\tt.reversedbyuserid =s.reversedbyuserid , \n\tt.reversalreasonnote = s.reversalreasonnote  \nwhen not matched then insert \n\t(\n\tt.paymentuid ,\n\tt.paymentbatchuid ,\n\tt.batchsequence ,\n\tt.sourceuid ,\n\tt.paymentdate ,\n\tt.status ,\n\tt.clearornsfdate ,\n\tt.custid ,\n\tt.paymentmethod ,\n\tt.creditcardtype ,\n\tt.paymentbankacct ,\n\tt.paymentidnbr ,\n\tt.amount ,\n\tt.applicationmethod ,\n\tt.removecredithold ,\n\tt.creditamount ,\n\tt.creditreason ,\n\tt.paymentnote, \n\tt.customerbalance ,\n\tt.bankaccountxrefuid ,\n\tt.collectionsnotified ,\n\tt.customerpaymentaccountuid,\n\tt.reversedbydate,\n\tt.reversedbyuserid ,\n\tt.reversalreasonnote \n\t)\nvalues \n\t(\n\ts.paymentuid ,\n\ts.paymentbatchuid ,\n\ts.batchsequence ,\n\ts.sourceuid ,\n\ts.paymentdate ,\n\ts.status ,\n\ts.clearornsfdate ,\n\ts.custid ,\n\ts.paymentmethod ,\n\ts.creditcardtype ,\n\ts.paymentbankacct ,\n\ts.paymentidnbr ,\n\ts.amount ,\n\ts.applicationmethod ,\n\ts.removecredithold ,\n\ts.creditamount ,\n\ts.creditreason ,\n\ts.paymentnote, \n\ts.customerbalance ,\n\ts.bankaccountxrefuid ,\n\ts.collectionsnotified ,\n\ts.customerpaymentaccountuid ,\n\ts.reversedbydate,\n\ts.reversedbyuserid ,\n\ts.reversalreasonnote )'\n\t)}\n",
													"type": "Expression"
												}
											}
										],
										"scriptBlockExecutionTimeout": "02:00:00"
									}
								},
								{
									"name": "Create staging for Payment",
									"type": "Script",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "LRS_Snowflake_V2",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"type": "Query",
												"text": {
													"value": "@{concat(\n    'Create or replace table LRS_RAW.TOWER_RAW.PAYMENT_STAGING',\n    ' as select * from  \n    LRS_RAW.TOWER_RAW.PAYMENT where 1=0'\n    )\n    }",
													"type": "Expression"
												}
											}
										],
										"scriptBlockExecutionTimeout": "02:00:00"
									}
								},
								{
									"name": "Drop staging table for Payment",
									"type": "Script",
									"dependsOn": [
										{
											"activity": "Payment Snowflake Merge Operation",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "LRS_Snowflake_V2",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"type": "Query",
												"text": {
													"value": "@{concat(\n    'Drop table LRS_RAW.TOWER_RAW.PAYMENT_STAGING'\n    )\n}",
													"type": "Expression"
												}
											}
										],
										"scriptBlockExecutionTimeout": "02:00:00"
									}
								},
								{
									"name": "InvoiceDetail Delta Load",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "Create staging for InvoiceDetail",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SqlServerSource",
											"sqlReaderQuery": {
												"value": "@{concat(\n    'select * from INVOICEDETAIL \n    where STARTDATE > (SELECT MAX(STARTDATE) FROM INVOICEDETAIL) -' , \n  pipeline().parameters.Incremental_Range2\n    )\n}\n",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"sink": {
											"type": "SnowflakeV2Sink",
											"importSettings": {
												"type": "SnowflakeImportCopyCommand",
												"additionalCopyOptions": {
													"ON_ERROR": "CONTINUE"
												}
											}
										},
										"enableStaging": true,
										"stagingSettings": {
											"linkedServiceName": {
												"referenceName": "msaz01_dm01_Azure_Blob",
												"type": "LinkedServiceReference"
											},
											"path": "staging"
										},
										"enableSkipIncompatibleRow": true,
										"logSettings": {
											"enableCopyActivityLog": true,
											"copyActivityLogSettings": {
												"logLevel": "Warning",
												"enableReliableLogging": false
											},
											"logLocationSettings": {
												"linkedServiceName": {
													"referenceName": "msaz01_dm01_Azure_Blob",
													"type": "LinkedServiceReference"
												}
											}
										},
										"translator": {
											"type": "TabularTranslator",
											"mappings": [
												{
													"source": {
														"name": "InvoiceDetailUID",
														"type": "Guid"
													},
													"sink": {
														"name": "INVOICEDETAILUID",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "InvoiceUID",
														"type": "Guid"
													},
													"sink": {
														"name": "INVOICEUID",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "SiteID",
														"type": "String"
													},
													"sink": {
														"name": "SITEID",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "ServiceUID",
														"type": "Guid"
													},
													"sink": {
														"name": "SERVICEUID",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "SourceUID",
														"type": "Guid"
													},
													"sink": {
														"name": "SOURCEUID",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "SourceIDNbr",
														"type": "String"
													},
													"sink": {
														"name": "SOURCEIDNBR",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "LineType",
														"type": "Int16"
													},
													"sink": {
														"name": "LINETYPE",
														"type": "Int64"
													}
												},
												{
													"source": {
														"name": "LineSubType",
														"type": "Int16"
													},
													"sink": {
														"name": "LINESUBTYPE",
														"type": "Int64"
													}
												},
												{
													"source": {
														"name": "SvcCode",
														"type": "String"
													},
													"sink": {
														"name": "SVCCODE",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "Description",
														"type": "String"
													},
													"sink": {
														"name": "DESCRIPTION",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "Salesperson",
														"type": "String"
													},
													"sink": {
														"name": "SALESPERSON",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "SvcFrequency",
														"type": "String"
													},
													"sink": {
														"name": "SVCFREQUENCY",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "Quantity",
														"type": "Decimal"
													},
													"sink": {
														"name": "QUANTITY",
														"type": "Int64"
													}
												},
												{
													"source": {
														"name": "Amount",
														"type": "Decimal"
													},
													"sink": {
														"name": "AMOUNT",
														"type": "Int64"
													}
												},
												{
													"source": {
														"name": "UnitPrice",
														"type": "Decimal"
													},
													"sink": {
														"name": "UNITPRICE",
														"type": "Int64"
													}
												},
												{
													"source": {
														"name": "TaxAmount",
														"type": "Decimal"
													},
													"sink": {
														"name": "TAXAMOUNT",
														"type": "Int64"
													}
												},
												{
													"source": {
														"name": "StartDate",
														"type": "DateTime"
													},
													"sink": {
														"name": "STARTDATE",
														"type": "DateTime"
													}
												},
												{
													"source": {
														"name": "EndDate",
														"type": "DateTime"
													},
													"sink": {
														"name": "ENDDATE",
														"type": "DateTime"
													}
												},
												{
													"source": {
														"name": "PrintRecord",
														"type": "Int16"
													},
													"sink": {
														"name": "PRINTRECORD",
														"type": "Int64"
													}
												},
												{
													"source": {
														"name": "LineOrderKey1",
														"type": "String"
													},
													"sink": {
														"name": "LINEORDERKEY1",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "LineOrderKey2",
														"type": "String"
													},
													"sink": {
														"name": "LINEORDERKEY2",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "LineOrderKey3",
														"type": "String"
													},
													"sink": {
														"name": "LINEORDERKEY3",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "LineOrderKey4",
														"type": "String"
													},
													"sink": {
														"name": "LINEORDERKEY4",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "PONbr",
														"type": "String"
													},
													"sink": {
														"name": "PONBR",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "POSource",
														"type": "Int16"
													},
													"sink": {
														"name": "POSOURCE",
														"type": "Int64"
													}
												},
												{
													"source": {
														"name": "AssignedToCollections",
														"type": "Int16"
													},
													"sink": {
														"name": "ASSIGNEDTOCOLLECTIONS",
														"type": "Int64"
													}
												},
												{
													"source": {
														"name": "AssignedToCollectionsDate",
														"type": "DateTime"
													},
													"sink": {
														"name": "ASSIGNEDTOCOLLECTIONSDATE",
														"type": "DateTime"
													}
												},
												{
													"source": {
														"name": "DiscountAmount",
														"type": "Decimal"
													},
													"sink": {
														"name": "DISCOUNTAMOUNT",
														"type": "Int64"
													}
												},
												{
													"source": {
														"name": "PriorARDStatus",
														"type": "Int16"
													},
													"sink": {
														"name": "PRIORARDSTATUS",
														"type": "Int64"
													}
												},
												{
													"source": {
														"name": "LineLevel",
														"type": "Int16"
													},
													"sink": {
														"name": "LINELEVEL",
														"type": "Int64"
													}
												},
												{
													"source": {
														"name": "SiteAddressUID",
														"type": "Guid"
													},
													"sink": {
														"name": "SITEADDRESSUID",
														"type": "String"
													}
												}
											]
										}
									},
									"inputs": [
										{
											"referenceName": "MSAZ01_TOWER",
											"type": "DatasetReference",
											"parameters": {
												"db": "Tower7",
												"schema": "dbo",
												"table": "INVOICEDETAIL"
											}
										}
									],
									"outputs": [
										{
											"referenceName": "LRS_Snowflake_Raw_IR_V2",
											"type": "DatasetReference",
											"parameters": {
												"Snowflake_Sink_Table": "INVOICEDETAIL_STAGING",
												"Snowflake_Schema": "TOWER_RAW"
											}
										}
									]
								},
								{
									"name": "InvoiceDetail Snowflake Merge Operation",
									"description": "merge statement to the raw tables. this helps avoids any duplication and upsert the rows needed.",
									"type": "Script",
									"dependsOn": [
										{
											"activity": "InvoiceDetail Delta Load",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "LRS_Snowflake_V2",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"type": "Query",
												"text": {
													"value": "@{concat('merge into LRS_RAW.TOWER_RAW.INVOICEDETAIL t \nusing \n    TOWER_RAW.INVOICEDETAIL_STAGING s \non t.INVOICEDETAILUID= s.INVOICEDETAILUID  \nwhen matched then update set \nt.InvoiceDetailUID= s.InvoiceDetailUID,\n      t.InvoiceUID= s.InvoiceUID,\n      t.SiteID= s.SiteID,\n      t.ServiceUID= s.ServiceUID,\n      t.SourceUID= s.SourceUID,\n      t.SourceIDNbr= s.SourceIDNbr,\n      t.LineType= s.LineType,\n      t.LineSubType= s.LineSubType,\n      t.SvcCode= s.SvcCode,\n      t.Description= s.Description ,\n      t. Salesperson = s.Salesperson ,\n      t.SvcFrequency= s.SvcFrequency ,\n      t.Quantity= s.Quantity,\n      t.Amount= s.Amount ,\n      t.UnitPrice= s.UnitPrice,\n      t.TaxAmount= s.TaxAmount,\n      t.StartDate= s.StartDate,\n      t.EndDate= s.EndDate ,\n      t.PrintRecord= s.PrintRecord ,\n      t.LineOrderKey1= s.LineOrderKey1 ,\n      t.LineOrderKey2= s.LineOrderKey2 ,\n      t.LineOrderKey3= s.LineOrderKey3 ,\n      t.LineOrderKey4= s.LineOrderKey4 ,\n      t.PONbr= s.PONbr ,\n      t.POSource= s.POSource ,\n      t.AssignedToCollections= s.AssignedToCollections ,\n      t.AssignedToCollectionsDate= s.AssignedToCollectionsDate ,\n      t.DiscountAmount= s.DiscountAmount,\n      t.PriorARDStatus= s.PriorARDStatus ,\n      t.LineLevel= s.LineLevel,\n      t.SiteAddressUID= s.SiteAddressUID \nwhen not matched then insert \n\t(\n\tt.InvoiceDetailUID,\n      t.InvoiceUID,\n      t.SiteID,\n      t.ServiceUID,\n      t.SourceUID,\n      t.SourceIDNbr,\n      t.LineType,\n      t.LineSubType,\n      t.SvcCode,\n      t.Description,\n      t.Salesperson,\n      t.SvcFrequency,\n      t.Quantity,\n      t.Amount,\n      t.UnitPrice,\n      t.TaxAmount,\n      t.StartDate,\n      t.EndDate,\n      t.PrintRecord,\n      t.LineOrderKey1,\n      t.LineOrderKey2,\n      t.LineOrderKey3,\n      t.LineOrderKey4,\n      t.PONbr,\n      t.POSource,\n      t.AssignedToCollections,\n      t.AssignedToCollectionsDate,\n      t.DiscountAmount,\n      t.PriorARDStatus,\n      t.LineLevel,\n      t.SiteAddressUID\n\t)\nvalues \n\t(\n\ts.InvoiceDetailUID,\n      s.InvoiceUID,\n      s.SiteID,\n      s.ServiceUID,\n      s.SourceUID,\n      s.SourceIDNbr,\n      s.LineType,\n      s.LineSubType,\n      s.SvcCode,\n      s.Description,\n      s.Salesperson,\n      s.SvcFrequency,\n      s.Quantity,\n      s.Amount,\n      s.UnitPrice,\n      s.TaxAmount,\n      s.StartDate,\n      s.EndDate,\n      s.PrintRecord,\n      s.LineOrderKey1,\n      s.LineOrderKey2,\n      s.LineOrderKey3,\n      s.LineOrderKey4,\n      s.PONbr,\n      s.POSource,\n      s.AssignedToCollections,\n      s.AssignedToCollectionsDate,\n      s.DiscountAmount,\n      s.PriorARDStatus,\n      s.LineLevel,\n      s.SiteAddressUID)'\n\t)}\n",
													"type": "Expression"
												}
											}
										],
										"scriptBlockExecutionTimeout": "02:00:00"
									}
								},
								{
									"name": "Create staging for InvoiceDetail",
									"type": "Script",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "LRS_Snowflake_V2",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"type": "Query",
												"text": {
													"value": "@{concat(\n    'Create or replace table LRS_RAW.TOWER_RAW.INVOICEDETAIL_STAGING',\n    ' as select * from  \n    LRS_RAW.TOWER_RAW.INVOICEDETAIL where 1=0'\n    )\n    }",
													"type": "Expression"
												}
											}
										],
										"scriptBlockExecutionTimeout": "02:00:00"
									}
								},
								{
									"name": "Drop staging table for InvoiceDetail",
									"type": "Script",
									"dependsOn": [
										{
											"activity": "InvoiceDetail Snowflake Merge Operation",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "LRS_Snowflake_V2",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"type": "Query",
												"text": {
													"value": "@{concat(\n    'Drop table LRS_RAW.TOWER_RAW.INVOICEDETAIL_STAGING'\n    )\n}",
													"type": "Expression"
												}
											}
										],
										"scriptBlockExecutionTimeout": "02:00:00"
									}
								},
								{
									"name": "Invoice Delta Load",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "Create staging for Invoice",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SqlServerSource",
											"sqlReaderQuery": {
												"value": "@{concat(\n    'select * from INVOICE \n    where DUEDATE > (SELECT MAX(DUEDATE) FROM INVOICE) -' , \n  pipeline().parameters.Incremental_Range3\n    )\n}\n",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"sink": {
											"type": "SnowflakeV2Sink",
											"importSettings": {
												"type": "SnowflakeImportCopyCommand",
												"additionalCopyOptions": {
													"ON_ERROR": "CONTINUE"
												}
											}
										},
										"enableStaging": true,
										"stagingSettings": {
											"linkedServiceName": {
												"referenceName": "msaz01_dm01_Azure_Blob",
												"type": "LinkedServiceReference"
											},
											"path": "staging"
										},
										"enableSkipIncompatibleRow": true,
										"logSettings": {
											"enableCopyActivityLog": true,
											"copyActivityLogSettings": {
												"logLevel": "Warning",
												"enableReliableLogging": false
											},
											"logLocationSettings": {
												"linkedServiceName": {
													"referenceName": "msaz01_dm01_Azure_Blob",
													"type": "LinkedServiceReference"
												}
											}
										},
										"translator": {
											"type": "TabularTranslator",
											"mappings": [
												{
													"source": {
														"name": "InvoiceUID",
														"type": "Guid"
													},
													"sink": {
														"name": "INVOICEUID",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "InvoiceID",
														"type": "String"
													},
													"sink": {
														"name": "INVOICEID",
														"type": "Int64"
													}
												},
												{
													"source": {
														"name": "Status",
														"type": "Int16"
													},
													"sink": {
														"name": "STATUS",
														"type": "Int64"
													}
												},
												{
													"source": {
														"name": "InvoiceContent",
														"type": "Int16"
													},
													"sink": {
														"name": "INVOICECONTENT",
														"type": "Int64"
													}
												},
												{
													"source": {
														"name": "PrintInvoice",
														"type": "Int16"
													},
													"sink": {
														"name": "PRINTINVOICE",
														"type": "Int64"
													}
												},
												{
													"source": {
														"name": "InvoiceOrderKey",
														"type": "String"
													},
													"sink": {
														"name": "INVOICEORDERKEY",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "BillBatchUID",
														"type": "Guid"
													},
													"sink": {
														"name": "BILLBATCHUID",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "BillCustID",
														"type": "String"
													},
													"sink": {
														"name": "BILLCUSTID",
														"type": "Int64"
													}
												},
												{
													"source": {
														"name": "BillSiteID",
														"type": "String"
													},
													"sink": {
														"name": "BILLSITEID",
														"type": "Int64"
													}
												},
												{
													"source": {
														"name": "BillName",
														"type": "String"
													},
													"sink": {
														"name": "BILLNAME",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "BillContact",
														"type": "String"
													},
													"sink": {
														"name": "BILLCONTACT",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "BillAddressUID",
														"type": "Guid"
													},
													"sink": {
														"name": "BILLADDRESSUID",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "BillPhone",
														"type": "String"
													},
													"sink": {
														"name": "BILLPHONE",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "BillFax",
														"type": "String"
													},
													"sink": {
														"name": "BILLFAX",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "BillEmail",
														"type": "String"
													},
													"sink": {
														"name": "BILLEMAIL",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "SiteAddressUID",
														"type": "Guid"
													},
													"sink": {
														"name": "SITEADDRESSUID",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "InvoiceDate",
														"type": "DateTime"
													},
													"sink": {
														"name": "INVOICEDATE",
														"type": "DateTime"
													}
												},
												{
													"source": {
														"name": "LastInvoiceDate",
														"type": "DateTime"
													},
													"sink": {
														"name": "LASTINVOICEDATE",
														"type": "DateTime"
													}
												},
												{
													"source": {
														"name": "DueDate",
														"type": "DateTime"
													},
													"sink": {
														"name": "DUEDATE",
														"type": "DateTime"
													}
												},
												{
													"source": {
														"name": "FinanceChargeThruDate",
														"type": "DateTime"
													},
													"sink": {
														"name": "FINANCECHARGETHRUDATE",
														"type": "DateTime"
													}
												},
												{
													"source": {
														"name": "CustClass",
														"type": "String"
													},
													"sink": {
														"name": "CUSTCLASS",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "BalForward",
														"type": "Decimal"
													},
													"sink": {
														"name": "BALFORWARD",
														"type": "Int64"
													}
												},
												{
													"source": {
														"name": "AgingBal00",
														"type": "Decimal"
													},
													"sink": {
														"name": "AGINGBAL00",
														"type": "Int64"
													}
												},
												{
													"source": {
														"name": "AgingBal01",
														"type": "Decimal"
													},
													"sink": {
														"name": "AGINGBAL01",
														"type": "Int64"
													}
												},
												{
													"source": {
														"name": "AgingBal02",
														"type": "Decimal"
													},
													"sink": {
														"name": "AGINGBAL02",
														"type": "Int64"
													}
												},
												{
													"source": {
														"name": "AgingBal03",
														"type": "Decimal"
													},
													"sink": {
														"name": "AGINGBAL03",
														"type": "Int64"
													}
												},
												{
													"source": {
														"name": "AgingBal04",
														"type": "Decimal"
													},
													"sink": {
														"name": "AGINGBAL04",
														"type": "Int64"
													}
												},
												{
													"source": {
														"name": "NewBalance",
														"type": "Decimal"
													},
													"sink": {
														"name": "NEWBALANCE",
														"type": "Int64"
													}
												},
												{
													"source": {
														"name": "TotSvcOneTime",
														"type": "Decimal"
													},
													"sink": {
														"name": "TOTSVCONETIME",
														"type": "Int64"
													}
												},
												{
													"source": {
														"name": "TotSvcRecurring",
														"type": "Decimal"
													},
													"sink": {
														"name": "TOTSVCRECURRING",
														"type": "Int64"
													}
												},
												{
													"source": {
														"name": "TotSvcOnCall",
														"type": "Decimal"
													},
													"sink": {
														"name": "TOTSVCONCALL",
														"type": "Int64"
													}
												},
												{
													"source": {
														"name": "TotSvcTaxes",
														"type": "Decimal"
													},
													"sink": {
														"name": "TOTSVCTAXES",
														"type": "Int64"
													}
												},
												{
													"source": {
														"name": "TotFinCharges",
														"type": "Decimal"
													},
													"sink": {
														"name": "TOTFINCHARGES",
														"type": "Int64"
													}
												},
												{
													"source": {
														"name": "TotCharges",
														"type": "Decimal"
													},
													"sink": {
														"name": "TOTCHARGES",
														"type": "Int64"
													}
												},
												{
													"source": {
														"name": "TotChargeTaxes",
														"type": "Decimal"
													},
													"sink": {
														"name": "TOTCHARGETAXES",
														"type": "Int64"
													}
												},
												{
													"source": {
														"name": "TotCredits",
														"type": "Decimal"
													},
													"sink": {
														"name": "TOTCREDITS",
														"type": "Int64"
													}
												},
												{
													"source": {
														"name": "TotCreditTaxes",
														"type": "Decimal"
													},
													"sink": {
														"name": "TOTCREDITTAXES",
														"type": "Int64"
													}
												},
												{
													"source": {
														"name": "TotPayments",
														"type": "Decimal"
													},
													"sink": {
														"name": "TOTPAYMENTS",
														"type": "Int64"
													}
												},
												{
													"source": {
														"name": "AutomaticPaymentType",
														"type": "Int16"
													},
													"sink": {
														"name": "AUTOMATICPAYMENTTYPE",
														"type": "Int64"
													}
												},
												{
													"source": {
														"name": "CompanyID",
														"type": "String"
													},
													"sink": {
														"name": "COMPANYID",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "InvoiceMailingOption",
														"type": "Int16"
													},
													"sink": {
														"name": "INVOICEMAILINGOPTION",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "InvoiceInsert",
														"type": "String"
													},
													"sink": {
														"name": "INVOICEINSERT",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "ExternalInvoiceNbr",
														"type": "String"
													},
													"sink": {
														"name": "EXTERNALINVOICENBR",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "InvoiceDetailFormat",
														"type": "Int16"
													},
													"sink": {
														"name": "INVOICEDETAILFORMAT",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "LineOfBusiness",
														"type": "String"
													},
													"sink": {
														"name": "LINEOFBUSINESS",
														"type": "String"
													}
												}
											]
										}
									},
									"inputs": [
										{
											"referenceName": "MSAZ01_TOWER",
											"type": "DatasetReference",
											"parameters": {
												"db": "Tower7",
												"schema": "dbo",
												"table": "INVOICE"
											}
										}
									],
									"outputs": [
										{
											"referenceName": "LRS_Snowflake_Raw_IR_V2",
											"type": "DatasetReference",
											"parameters": {
												"Snowflake_Sink_Table": "INVOICE_STAGING",
												"Snowflake_Schema": "TOWER_RAW"
											}
										}
									]
								},
								{
									"name": "Create staging for Invoice",
									"type": "Script",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "LRS_Snowflake_V2",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"type": "Query",
												"text": {
													"value": "@{concat(\n    'Create or replace table LRS_RAW.TOWER_RAW.INVOICE_STAGING',\n    ' as select * from  \n    LRS_RAW.TOWER_RAW.INVOICE where 1=0'\n    )\n    }",
													"type": "Expression"
												}
											}
										],
										"scriptBlockExecutionTimeout": "02:00:00"
									}
								},
								{
									"name": "Invoice Snowflake Merge Operation",
									"description": "merge statement to the raw tables. this helps avoids any duplication and upsert the rows needed.",
									"type": "Script",
									"dependsOn": [
										{
											"activity": "Invoice Delta Load",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "LRS_Snowflake_V2",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"type": "Query",
												"text": {
													"value": "@{concat('merge into LRS_RAW.TOWER_RAW.INVOICE t \nusing \n    TOWER_RAW.INVOICE_STAGING s \non t.INVOICEUID= s.INVOICEUID  \nwhen matched then update set \n\tt.invoiceuid = s.invoiceuid ,\n\tt.invoiceid = s.invoiceid ,\n\tt.status = s. status,\n\tt.invoicecontent = s.invoicecontent ,\n\tt.printinvoice = s.printinvoice ,\n\tt.invoiceorderkey = s.invoiceorderkey ,\n\tt.billbatchuid = s.billbatchuid ,\n\tt.billcustid = s.billcustid ,\n\tt.billsiteid = s.billsiteid ,\n\tt.billname = s.billname ,\n\tt.billcontact= s.billcontact ,\n\tt.billaddressuid = s.billaddressuid ,\n\tt.billphone = s.billphone ,\n\tt.billfax = s.billfax ,\n\tt.billemail = s.billemail ,\n\tt.siteaddressuid = s.siteaddressuid ,\n\tt.invoicedate = s.invoicedate ,\n\tt.lastinvoicedate = s.lastinvoicedate ,\n\tt.duedate = s.duedate ,\n\tt.financechargethrudate = s.financechargethrudate ,\n\tt.custclass = s.custclass ,\n\tt.balforward = s.balforward ,\n\tt.agingbal00 = s.agingbal00 ,\n\tt.agingbal01 = s.agingbal01 ,\n\tt.agingbal02 = s.agingbal02 ,\n\tt.agingbal03 = s.agingbal03 ,\n\tt.agingbal04 = s.agingbal04 ,\n\tt.newbalance = s.newbalance ,\n\tt.totsvconetime = s.totsvconetime ,\n\tt.totsvcrecurring = s.totsvcrecurring ,\n\tt.totsvconcall = s.totsvconcall ,\n\tt.totsvctaxes = s.totsvctaxes ,\n\tt.totfincharges = s.totfincharges ,\n\tt.totcharges = s.totcharges ,\n\tt.totchargetaxes = s.totchargetaxes ,\n\tt.totcredits = s.totcredits ,\n\tt.totcredittaxes = s.totcredittaxes ,\n\tt.totpayments = s.totpayments ,\n\tt.automaticpaymenttype = s.automaticpaymenttype ,\n\tt.companyid = s.companyid ,\n\tt.invoicemailingoption = s.invoicemailingoption ,\n\tt.invoiceinsert = s.invoiceinsert ,\n\tt.externalinvoicenbr = s.externalinvoicenbr ,\n\tt.invoicedetailformat = s.invoicedetailformat ,\n\tt.lineofbusiness =s.lineofbusiness \nwhen not matched then insert \n\t( \n\tt.invoiceuid ,\n\tt.invoiceid ,\n\tt.status ,\n\tt.invoicecontent ,\n\tt.printinvoice ,\n\tt.invoiceorderkey ,\n\tt.billbatchuid ,\n\tt.billcustid ,\n\tt.billsiteid ,\n\tt.billname ,\n\tt.billcontact,\n\tt.billaddressuid ,\n\tt.billphone ,\n\tt.billfax ,\n\tt.billemail ,\n\tt.siteaddressuid ,\n\tt.invoicedate ,\n\tt.lastinvoicedate ,\n\tt.duedate ,\n\tt.financechargethrudate ,\n\tt.custclass ,\n\tt.balforward ,\n\tt.agingbal00 ,\n\tt.agingbal01 ,\n\tt.agingbal02 ,\n\tt.agingbal03 ,\n\tt.agingbal04 ,\n\tt.newbalance ,\n\tt.totsvconetime ,\n\tt.totsvcrecurring ,\n\tt.totsvconcall ,\n\tt.totsvctaxes ,\n\tt.totfincharges ,\n\tt.totcharges ,\n\tt.totchargetaxes ,\n\tt.totcredits ,\n\tt.totcredittaxes ,\n\tt.totpayments ,\n\tt.automaticpaymenttype ,\n\tt.companyid ,\n\tt.invoicemailingoption ,\n\tt.invoiceinsert ,\n\tt.externalinvoicenbr ,\n\tt.invoicedetailformat ,\n\tt.lineofbusiness \n\t)\nvalues \n\t(\n\ts.invoiceuid ,\n\ts.invoiceid ,\n\ts.status ,\n\ts.invoicecontent ,\n\ts.printinvoice ,\n\ts.invoiceorderkey ,\n\ts.billbatchuid ,\n\ts.billcustid ,\n\ts.billsiteid ,\n\ts.billname ,\n\ts.billcontact,\n\ts.billaddressuid ,\n\ts.billphone ,\n\ts.billfax ,\n\ts.billemail ,\n\ts.siteaddressuid ,\n\ts.invoicedate ,\n\ts.lastinvoicedate ,\n\ts.duedate ,\n\ts.financechargethrudate ,\n\ts.custclass ,\n\ts.balforward ,\n\ts.agingbal00 ,\n\ts.agingbal01 ,\n\ts.agingbal02 ,\n\ts.agingbal03 ,\n\ts.agingbal04 ,\n\ts.newbalance ,\n\ts.totsvconetime ,\n\ts.totsvcrecurring ,\n\ts.totsvconcall ,\n\ts.totsvctaxes ,\n\ts.totfincharges ,\n\ts.totcharges ,\n\ts.totchargetaxes ,\n\ts.totcredits ,\n\ts.totcredittaxes ,\n\ts.totpayments ,\n\ts.automaticpaymenttype ,\n\ts.companyid ,\n\ts.invoicemailingoption ,\n\ts.invoiceinsert ,\n\ts.externalinvoicenbr ,\n\ts.invoicedetailformat ,\n\ts.lineofbusiness)'\n\t)}\n",
													"type": "Expression"
												}
											}
										],
										"scriptBlockExecutionTimeout": "02:00:00"
									}
								},
								{
									"name": "Drop staging table for Invoice",
									"type": "Script",
									"dependsOn": [
										{
											"activity": "Invoice Snowflake Merge Operation",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "LRS_Snowflake_V2",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"type": "Query",
												"text": {
													"value": "@{concat(\n    'Drop table LRS_RAW.TOWER_RAW.INVOICE_STAGING'\n    )\n}",
													"type": "Expression"
												}
											}
										],
										"scriptBlockExecutionTimeout": "02:00:00"
									}
								},
								{
									"name": "Create staging for Service History",
									"type": "Script",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "LRS_Snowflake_V2",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"type": "Query",
												"text": {
													"value": "@{concat(\n    'Create or replace table LRS_RAW.TOWER_RAW.SERVICEHISTORY_STAGING',\n    ' as select * from  \n    LRS_RAW.TOWER_RAW.SERVICEHISTORY where 1=0'\n    )\n    }",
													"type": "Expression"
												}
											}
										],
										"scriptBlockExecutionTimeout": "02:00:00"
									}
								},
								{
									"name": "Service History Delta Load",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "Create staging for Service History",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SqlServerSource",
											"sqlReaderQuery": {
												"value": "@{concat(\n    'select * from SERVICEHISTORY \n    where SERVICEDATE > (SELECT MAX(SERVICEDATE) FROM SERVICEHISTORY) -' , \n  pipeline().parameters.Incremental_Range3\n    )\n}\n",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"sink": {
											"type": "SnowflakeV2Sink",
											"importSettings": {
												"type": "SnowflakeImportCopyCommand",
												"additionalCopyOptions": {
													"ON_ERROR": "CONTINUE"
												}
											}
										},
										"enableStaging": true,
										"stagingSettings": {
											"linkedServiceName": {
												"referenceName": "msaz01_dm01_Azure_Blob",
												"type": "LinkedServiceReference"
											},
											"path": "staging",
											"enableCompression": true
										},
										"enableSkipIncompatibleRow": true,
										"logSettings": {
											"enableCopyActivityLog": true,
											"copyActivityLogSettings": {
												"logLevel": "Warning",
												"enableReliableLogging": false
											},
											"logLocationSettings": {
												"linkedServiceName": {
													"referenceName": "msaz01_dm01_Azure_Blob",
													"type": "LinkedServiceReference"
												}
											}
										},
										"translator": {
											"type": "TabularTranslator",
											"mappings": [
												{
													"source": {
														"name": "ServiceHistoryUID",
														"type": "Guid"
													},
													"sink": {
														"name": "SERVICEHISTORYUID",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "ServiceHistoryType",
														"type": "Int16"
													},
													"sink": {
														"name": "SERVICEHISTORYTYPE",
														"type": "Int64"
													}
												},
												{
													"source": {
														"name": "WorkflowCode",
														"type": "String"
													},
													"sink": {
														"name": "WORKFLOWCODE",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "ServiceQueue",
														"type": "String"
													},
													"sink": {
														"name": "SERVICEQUEUE",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "SourceUID",
														"type": "Guid"
													},
													"sink": {
														"name": "SOURCEUID",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "ServiceOrderID",
														"type": "String"
													},
													"sink": {
														"name": "SERVICEORDERID",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "ServiceInfoUID",
														"type": "Guid"
													},
													"sink": {
														"name": "SERVICEINFOUID",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "ServiceScheduleUID",
														"type": "Guid"
													},
													"sink": {
														"name": "SERVICESCHEDULEUID",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "RescheduledHistoryUID",
														"type": "Guid"
													},
													"sink": {
														"name": "RESCHEDULEDHISTORYUID",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "Status",
														"type": "Int16"
													},
													"sink": {
														"name": "STATUS",
														"type": "Int64"
													}
												},
												{
													"source": {
														"name": "ReleasedToBilling",
														"type": "Int16"
													},
													"sink": {
														"name": "RELEASEDTOBILLING",
														"type": "Int64"
													}
												},
												{
													"source": {
														"name": "ReasonNote",
														"type": "String"
													},
													"sink": {
														"name": "REASONNOTE",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "Route",
														"type": "String"
													},
													"sink": {
														"name": "ROUTE",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "RouteSequence",
														"type": "Decimal"
													},
													"sink": {
														"name": "ROUTESEQUENCE",
														"type": "Int64"
													}
												},
												{
													"source": {
														"name": "ServiceDate",
														"type": "DateTime"
													},
													"sink": {
														"name": "SERVICEDATE",
														"type": "DateTime"
													}
												},
												{
													"source": {
														"name": "StartTime",
														"type": "DateTime"
													},
													"sink": {
														"name": "STARTTIME",
														"type": "DateTime"
													}
												},
												{
													"source": {
														"name": "FinishTime",
														"type": "DateTime"
													},
													"sink": {
														"name": "FINISHTIME",
														"type": "DateTime"
													}
												},
												{
													"source": {
														"name": "ServiceNote",
														"type": "String"
													},
													"sink": {
														"name": "SERVICENOTE",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "WorkOrderID",
														"type": "String"
													},
													"sink": {
														"name": "WORKORDERID",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "Quantity",
														"type": "Decimal"
													},
													"sink": {
														"name": "QUANTITY",
														"type": "Int64"
													}
												},
												{
													"source": {
														"name": "RequestedStartTime",
														"type": "Int16"
													},
													"sink": {
														"name": "REQUESTEDSTARTTIME",
														"type": "Int64"
													}
												},
												{
													"source": {
														"name": "RequestedEndTime",
														"type": "Int16"
													},
													"sink": {
														"name": "REQUESTEDENDTIME",
														"type": "Int64"
													}
												},
												{
													"source": {
														"name": "LaborCost",
														"type": "Decimal"
													},
													"sink": {
														"name": "LABORCOST",
														"type": "Int64"
													}
												},
												{
													"source": {
														"name": "NonLaborCost",
														"type": "Decimal"
													},
													"sink": {
														"name": "NONLABORCOST",
														"type": "Int64"
													}
												},
												{
													"source": {
														"name": "OriginalServiceDate",
														"type": "DateTime"
													},
													"sink": {
														"name": "ORIGINALSERVICEDATE",
														"type": "DateTime"
													}
												},
												{
													"source": {
														"name": "GPSVerified",
														"type": "Int16"
													},
													"sink": {
														"name": "GPSVERIFIED",
														"type": "Int64"
													}
												},
												{
													"source": {
														"name": "Latitude",
														"type": "Decimal"
													},
													"sink": {
														"name": "LATITUDE",
														"type": "Int64"
													}
												},
												{
													"source": {
														"name": "LiftArmUsed",
														"type": "Int16"
													},
													"sink": {
														"name": "LIFTARMUSED",
														"type": "Int64"
													}
												},
												{
													"source": {
														"name": "Longitude",
														"type": "Decimal"
													},
													"sink": {
														"name": "LONGITUDE",
														"type": "Int64"
													}
												},
												{
													"source": {
														"name": "AllocatedRevenue",
														"type": "Decimal"
													},
													"sink": {
														"name": "ALLOCATEDREVENUE",
														"type": "Int64"
													}
												},
												{
													"source": {
														"name": "DriverNotified",
														"type": "Int16"
													},
													"sink": {
														"name": "DRIVERNOTIFIED",
														"type": "Int64"
													}
												},
												{
													"source": {
														"name": "DisposalTripUID",
														"type": "Guid"
													},
													"sink": {
														"name": "DISPOSALTRIPUID",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "OriginalWorkflowCode",
														"type": "String"
													},
													"sink": {
														"name": "ORIGINALWORKFLOWCODE",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "UpsRoadNetSyncNotificationStatus",
														"type": "Int16"
													},
													"sink": {
														"name": "UPSROADNETSYNCNOTIFICATIONSTATUS",
														"type": "Int64"
													}
												},
												{
													"source": {
														"name": "GeocodeDifference",
														"type": "Int32"
													},
													"sink": {
														"name": "GEOCODEDIFFERENCE",
														"type": "Int64"
													}
												},
												{
													"source": {
														"name": "GeocodeUpdate",
														"type": "Int16"
													},
													"sink": {
														"name": "GEOCODEUPDATE",
														"type": "Int64"
													}
												},
												{
													"source": {
														"name": "AllocatedRebate",
														"type": "Decimal"
													},
													"sink": {
														"name": "ALLOCATEDREBATE",
														"type": "Int64"
													}
												},
												{
													"source": {
														"name": "PercentFull",
														"type": "Decimal"
													},
													"sink": {
														"name": "PERCENTFULL",
														"type": "Int64"
													}
												},
												{
													"source": {
														"name": "CompletionSequence",
														"type": "Int32"
													},
													"sink": {
														"name": "COMPLETIONSEQUENCE",
														"type": "Int64"
													}
												},
												{
													"source": {
														"name": "Odometer",
														"type": "Decimal"
													},
													"sink": {
														"name": "ODOMETER",
														"type": "Int64"
													}
												},
												{
													"source": {
														"name": "RecurringRevenue",
														"type": "Decimal"
													},
													"sink": {
														"name": "RECURRINGREVENUE",
														"type": "Int64"
													}
												},
												{
													"source": {
														"name": "Surcharges",
														"type": "Decimal"
													},
													"sink": {
														"name": "SURCHARGES",
														"type": "Int64"
													}
												},
												{
													"source": {
														"name": "WorkorderRevenue",
														"type": "Decimal"
													},
													"sink": {
														"name": "WORKORDERREVENUE",
														"type": "Int64"
													}
												},
												{
													"source": {
														"name": "ThirdPartyServiceCost",
														"type": "Decimal"
													},
													"sink": {
														"name": "THIRDPARTYSERVICECOST",
														"type": "Int64"
													}
												},
												{
													"source": {
														"name": "ThirdPartyWorkorderCost",
														"type": "Decimal"
													},
													"sink": {
														"name": "THIRDPARTYWORKORDERCOST",
														"type": "Int64"
													}
												},
												{
													"source": {
														"name": "HolidayScheduleUID",
														"type": "Guid"
													},
													"sink": {
														"name": "HOLIDAYSCHEDULEUID",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "SerialNbr",
														"type": "String"
													},
													"sink": {
														"name": "SERIALNBR",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "syncRowVersion",
														"type": "Byte[]"
													},
													"sink": {
														"name": "SYNCROWVERSION",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "WorkStartTime",
														"type": "DateTime"
													},
													"sink": {
														"name": "WORKSTARTTIME",
														"type": "DateTime"
													}
												},
												{
													"source": {
														"name": "WorkStopTime",
														"type": "DateTime"
													},
													"sink": {
														"name": "WORKSTOPTIME",
														"type": "DateTime"
													}
												},
												{
													"source": {
														"name": "RouteSubsectionUID",
														"type": "Guid"
													},
													"sink": {
														"name": "ROUTESUBSECTIONUID",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "ThirdPartyPONbr",
														"type": "String"
													},
													"sink": {
														"name": "THIRDPARTYPONBR",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "ThirdPartyServiceProvider",
														"type": "String"
													},
													"sink": {
														"name": "THIRDPARTYSERVICEPROVIDER",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "CompletedByVehicle",
														"type": "String"
													},
													"sink": {
														"name": "COMPLETEDBYVEHICLE",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "PickupEquivalent",
														"type": "Int32"
													},
													"sink": {
														"name": "PICKUPEQUIVALENT",
														"type": "Int64"
													}
												},
												{
													"source": {
														"name": "PickupEquivalentAdjustment",
														"type": "Int32"
													},
													"sink": {
														"name": "PICKUPEQUIVALENTADJUSTMENT",
														"type": "Int64"
													}
												},
												{
													"source": {
														"name": "PickupEquivalentIsBilled",
														"type": "Boolean"
													},
													"sink": {
														"name": "PICKUPEQUIVALENTISBILLED",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "StatusSource",
														"type": "Int16"
													},
													"sink": {
														"name": "STATUSSOURCE",
														"type": "Int64"
													}
												}
											]
										}
									},
									"inputs": [
										{
											"referenceName": "MSAZ01_TOWER",
											"type": "DatasetReference",
											"parameters": {
												"db": "Tower7",
												"schema": "dbo",
												"table": "SERVICEHISTORY"
											}
										}
									],
									"outputs": [
										{
											"referenceName": "LRS_Snowflake_Raw_IR_V2",
											"type": "DatasetReference",
											"parameters": {
												"Snowflake_Sink_Table": "SERVICEHISTORY_STAGING",
												"Snowflake_Schema": "TOWER_RAW"
											}
										}
									]
								},
								{
									"name": "Service History Snowflake Merge Operation",
									"description": "merge statement to the raw tables. this helps avoids any duplication and upsert the rows needed.",
									"type": "Script",
									"dependsOn": [
										{
											"activity": "Service History Delta Load",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "LRS_Snowflake_V2",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"type": "Query",
												"text": {
													"value": "@{concat('merge into LRS_RAW.TOWER_RAW. SERVICEHISTORY t \nusing \n    TOWER_RAW.SERVICEHISTORY_STAGING s \non t.SERVICEHISTORYUID= s.SERVICEHISTORYUID \nwhen matched then update set\nt.ServiceHistoryUID= s.ServiceHistoryUID,\n      t.ServiceHistoryType= s.ServiceHistoryType,\n      t.WorkflowCode= s.WorkflowCode,\n      t.ServiceQueue= s.ServiceQueue,\n      t.SourceUID= s.SourceUID,\n      t.ServiceOrderID= s.ServiceOrderID,\n      t.ServiceInfoUID= s.ServiceInfoUID,\n      t.ServiceScheduleUID= s.ServiceScheduleUID,\n      t.RescheduledHistoryUID= s.RescheduledHistoryUID,\n      t.Status= s.Status,\n      t.ReleasedToBilling= s.ReleasedToBilling,\n      t.ReasonNote= s.ReasonNote,\n      t.Route= s.Route,\n      t.RouteSequence= s.RouteSequence,\n      t.ServiceDate= s.ServiceDate,\n      t.StartTime= s.StartTime,\n      t.FinishTime= s.FinishTime,\n      t.ServiceNote= s.ServiceNote,\n      t.WorkOrderID= s.WorkOrderID,\n      t.Quantity= s.Quantity,\n      t.RequestedStartTime= s.RequestedStartTime,\n      t.RequestedEndTime= s.RequestedEndTime,   \n      t.LaborCost= s. LaborCost,\n      t.NonLaborCost= s.NonLaborCost,\n      t.OriginalServiceDate= s.OriginalServiceDate,\n      t.GPSVerified= s.GPSVerified,\n      t.Latitude= s.Latitude,\n      t.LiftArmUsed= s.LiftArmUsed,\n      t.Longitude= s.Longitude,\n      t.AllocatedRevenue= s.AllocatedRevenue,\n      t.DriverNotified= s.DriverNotified,\n      t.DisposalTripUID= s.DisposalTripUID,\n      t.OriginalWorkflowCode= s.OriginalWorkflowCode,\n      t.UpsRoadNetSyncNotificationStatus= s.UpsRoadNetSyncNotificationStatus,\n      t.GeocodeDifference= s.GeocodeDifference,\n      t.GeocodeUpdate= s.GeocodeUpdate,\n      t.AllocatedRebate= s.AllocatedRebate,\n      t.PercentFull= s.PercentFull,\n      t.CompletionSequence= s.CompletionSequence,\n      t.Odometer= s.Odometer,\n      t.RecurringRevenue= s.RecurringRevenue,\n      t.Surcharges= s.Surcharges,\n      t.WorkorderRevenue= s.WorkorderRevenue,\n      t.ThirdPartyServiceCost= s.ThirdPartyServiceCost,\n      t.ThirdPartyWorkorderCost= s.ThirdPartyWorkorderCost,\n      t.HolidayScheduleUID= s.HolidayScheduleUID,\n      t.SerialNbr= s.SerialNbr,\n      t.syncRowVersion= s.syncRowVersion,\n      t.WorkStartTime= s.WorkStartTime,\n      t.WorkStopTime= s.WorkStopTime,\n      t.RouteSubsectionUID= s.RouteSubsectionUID,\n      t.ThirdPartyPONbr= s.ThirdPartyPONbr,\n      t.ThirdPartyServiceProvider= s.ThirdPartyServiceProvider,\n      t.CompletedByVehicle= s.CompletedByVehicle,\n      t.PickupEquivalent= s.PickupEquivalent,\n      t.PickupEquivalentAdjustment= s.PickupEquivalentAdjustment,\n      t.PickupEquivalentIsBilled= s.PickupEquivalentIsBilled,\n      t.StatusSource = s.StatusSource \nwhen not matched then insert \n    ( \nt.ServiceHistoryUID,\n      t.ServiceHistoryType,\n      t.WorkflowCode,\n      t.ServiceQueue,\n      t.SourceUID,\n      t.ServiceOrderID,\n      t.ServiceInfoUID,\n      t.ServiceScheduleUID,\n      t.RescheduledHistoryUID,\n      t.Status,\n      t.ReleasedToBilling,\n      t.ReasonNote,\n      t.Route,\n      t.RouteSequence,\n      t.ServiceDate,\n      t.StartTime,\n      t.FinishTime,\n      t.ServiceNote,\n      t.WorkOrderID,\n      t.Quantity,\n      t.RequestedStartTime,\n      t.RequestedEndTime,\n      t.LaborCost,\n      t.NonLaborCost,\n      t.OriginalServiceDate,\n      t.GPSVerified,\n      t.Latitude,\n      t.LiftArmUsed,\n      t.Longitude,\n      t.AllocatedRevenue,\n      t.DriverNotified,\n      t.DisposalTripUID,\n      t.OriginalWorkflowCode,\n      t.UpsRoadNetSyncNotificationStatus,\n      t.GeocodeDifference,\n      t.GeocodeUpdate,\n      t.AllocatedRebate,\n      t.PercentFull,\n      t.CompletionSequence,\n      t.Odometer,\n      t.RecurringRevenue,\n      t.Surcharges,\n      t.WorkorderRevenue,\n      t.ThirdPartyServiceCost,\n      t.ThirdPartyWorkorderCost,\n      t.HolidayScheduleUID,\n      t.SerialNbr,\n      t.syncRowVersion,\n      t.WorkStartTime,\n      t.WorkStopTime,\n      t.RouteSubsectionUID,\n      t.ThirdPartyPONbr,\n      t.ThirdPartyServiceProvider,\n      t.CompletedByVehicle,\n      t.PickupEquivalent,\n      t.PickupEquivalentAdjustment,\n      t.PickupEquivalentIsBilled,\n      t.StatusSource\n)\nValues\n(\ns.ServiceHistoryUID,\n      s.ServiceHistoryType,\n      s.WorkflowCode,\n      s.ServiceQueue,\n      s.SourceUID,\n      s.ServiceOrderID,\n      s.ServiceInfoUID,\n      s.ServiceScheduleUID,\n      s.RescheduledHistoryUID,\n      s.Status,\n      s.ReleasedToBilling,\n      s.ReasonNote,\n      s.Route,\n      s.RouteSequence,\n      s.ServiceDate,\n      s.StartTime,\n      s.FinishTime,\n      s.ServiceNote,\n      s.WorkOrderID,\n      s.Quantity,\n      s.RequestedStartTime,\n      s.RequestedEndTime,\n      s.LaborCost,\n      s.NonLaborCost,\n      s.OriginalServiceDate,\n      s.GPSVerified,\n      s.Latitude,\n      s.LiftArmUsed,\n      s.Longitude,\n      s.AllocatedRevenue,\n      s.DriverNotified,\n      s.DisposalTripUID,\n      s.OriginalWorkflowCode,\n      s.UpsRoadNetSyncNotificationStatus,\n      s.GeocodeDifference,\n      s.GeocodeUpdate,\n      s.AllocatedRebate,\n      s.PercentFull,\n      s.CompletionSequence,\n      s.Odometer,\n      s.RecurringRevenue,\n      s.Surcharges,\n      s.WorkorderRevenue,\n      s.ThirdPartyServiceCost,\n      s.ThirdPartyWorkorderCost,\n      s.HolidayScheduleUID,\n      s.SerialNbr,\n      s.syncRowVersion,\n      s.WorkStartTime,\n      s.WorkStopTime,\n      s.RouteSubsectionUID,\n      s.ThirdPartyPONbr,\n      s.ThirdPartyServiceProvider,\n      s.CompletedByVehicle,\n      s.PickupEquivalent,\n      s.PickupEquivalentAdjustment,\n      s.PickupEquivalentIsBilled,\n      s.StatusSource)'\n)}\n",
													"type": "Expression"
												}
											}
										],
										"scriptBlockExecutionTimeout": "02:00:00"
									}
								},
								{
									"name": "Drop staging table for Service History",
									"type": "Script",
									"dependsOn": [
										{
											"activity": "Service History Snowflake Merge Operation",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "LRS_Snowflake_V2",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"type": "Query",
												"text": {
													"value": "@{concat(\n    'Drop table LRS_RAW.TOWER_RAW.SERVICEHISTORY_STAGING'\n    )\n}",
													"type": "Expression"
												}
											}
										],
										"scriptBlockExecutionTimeout": "02:00:00"
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"Incremental_Range": {
						"type": "string",
						"defaultValue": "14"
					},
					"Incremental_Range2": {
						"type": "string",
						"defaultValue": "500"
					},
					"Incremental_Range3": {
						"type": "string",
						"defaultValue": "50"
					}
				},
				"folder": {
					"name": "Test"
				},
				"annotations": [],
				"lastPublishTime": "2024-08-29T04:22:38Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/TOWER_INCREMENTAL_LOAD_FACT')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Tower Table Names",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SnowflakeV2Source",
								"exportSettings": {
									"type": "SnowflakeExportCopyCommand"
								}
							},
							"dataset": {
								"referenceName": "LRS_Snowflake_Raw_V2",
								"type": "DatasetReference",
								"parameters": {
									"Snowflake_Sink_Table": "VW_TOWER_WATERMARK_PVT",
									"Snowflake_Schema": "MASTER_DATA"
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "DateTime Incremental Loop",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Tower Table Names",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Tower Table Names').output.value",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Ardetail Delta Load",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "Create staging for ARDetail",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SqlServerSource",
											"sqlReaderQuery": {
												"value": "@{concat(\n    'select * from ARdetail where createddatetime > DATEADD(day,-', \n    pipeline().parameters.Incremental_Range,\n    ', GETDATE())'\n    )\n}\n",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"sink": {
											"type": "SnowflakeV2Sink",
											"importSettings": {
												"type": "SnowflakeImportCopyCommand",
												"additionalCopyOptions": {
													"ON_ERROR": "CONTINUE"
												}
											}
										},
										"enableStaging": true,
										"stagingSettings": {
											"linkedServiceName": {
												"referenceName": "msaz01_dm01_Azure_Blob",
												"type": "LinkedServiceReference"
											},
											"path": "staging",
											"enableCompression": true
										},
										"enableSkipIncompatibleRow": true,
										"logSettings": {
											"enableCopyActivityLog": true,
											"copyActivityLogSettings": {
												"logLevel": "Warning",
												"enableReliableLogging": false
											},
											"logLocationSettings": {
												"linkedServiceName": {
													"referenceName": "msaz01_dm01_Azure_Blob",
													"type": "LinkedServiceReference"
												}
											}
										},
										"translator": {
											"type": "TabularTranslator",
											"mappings": [
												{
													"source": {
														"name": "ARDetailUID",
														"type": "Guid"
													},
													"sink": {
														"name": "ARDETAILUID",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "SourceUID",
														"type": "Guid"
													},
													"sink": {
														"name": "SOURCEUID",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "Status",
														"type": "Int16"
													},
													"sink": {
														"name": "STATUS",
														"type": "Int64"
													}
												},
												{
													"source": {
														"name": "CustID",
														"type": "String"
													},
													"sink": {
														"name": "CUSTID",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "SiteID",
														"type": "String"
													},
													"sink": {
														"name": "SITEID",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "Material",
														"type": "String"
													},
													"sink": {
														"name": "MATERIAL",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "DetailType",
														"type": "Int16"
													},
													"sink": {
														"name": "DETAILTYPE",
														"type": "Int64"
													}
												},
												{
													"source": {
														"name": "Tax",
														"type": "String"
													},
													"sink": {
														"name": "TAX",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "DebitAcct",
														"type": "String"
													},
													"sink": {
														"name": "DEBITACCT",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "CreditAcct",
														"type": "String"
													},
													"sink": {
														"name": "CREDITACCT",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "Period",
														"type": "String"
													},
													"sink": {
														"name": "PERIOD",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "InvoiceUID",
														"type": "Guid"
													},
													"sink": {
														"name": "INVOICEUID",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "TransactionDate",
														"type": "DateTime"
													},
													"sink": {
														"name": "TRANSACTIONDATE",
														"type": "DateTime"
													}
												},
												{
													"source": {
														"name": "DueDate",
														"type": "DateTime"
													},
													"sink": {
														"name": "DUEDATE",
														"type": "DateTime"
													}
												},
												{
													"source": {
														"name": "GLExportBatchUID",
														"type": "Guid"
													},
													"sink": {
														"name": "GLEXPORTBATCHUID",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "Quantity",
														"type": "Decimal"
													},
													"sink": {
														"name": "QUANTITY",
														"type": "Int64"
													}
												},
												{
													"source": {
														"name": "UnitRate",
														"type": "Decimal"
													},
													"sink": {
														"name": "UNITRATE",
														"type": "Int64"
													}
												},
												{
													"source": {
														"name": "OriginalAmount",
														"type": "Decimal"
													},
													"sink": {
														"name": "ORIGINALAMOUNT",
														"type": "Int64"
													}
												},
												{
													"source": {
														"name": "Balance",
														"type": "Decimal"
													},
													"sink": {
														"name": "BALANCE",
														"type": "Int64"
													}
												},
												{
													"source": {
														"name": "BilledAppliedAmount",
														"type": "Decimal"
													},
													"sink": {
														"name": "BILLEDAPPLIEDAMOUNT",
														"type": "Int64"
													}
												},
												{
													"source": {
														"name": "DisplayOnInvoice",
														"type": "Int16"
													},
													"sink": {
														"name": "DISPLAYONINVOICE",
														"type": "Int64"
													}
												},
												{
													"source": {
														"name": "DetailSource",
														"type": "Int16"
													},
													"sink": {
														"name": "DETAILSOURCE",
														"type": "Int64"
													}
												},
												{
													"source": {
														"name": "CompanyID",
														"type": "String"
													},
													"sink": {
														"name": "COMPANYID",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "CreatedDateTime",
														"type": "DateTime"
													},
													"sink": {
														"name": "CREATEDDATETIME",
														"type": "DateTime"
													}
												},
												{
													"source": {
														"name": "CreditAcctSegType",
														"type": "Byte"
													},
													"sink": {
														"name": "CREDITACCTSEGTYPE",
														"type": "Int64"
													}
												},
												{
													"source": {
														"name": "DebitAcctSegType",
														"type": "Byte"
													},
													"sink": {
														"name": "DEBITACCTSEGTYPE",
														"type": "Int64"
													}
												}
											]
										}
									},
									"inputs": [
										{
											"referenceName": "MSAZ01_TOWER",
											"type": "DatasetReference",
											"parameters": {
												"db": "Tower7",
												"schema": "dbo",
												"table": "ARdetail"
											}
										}
									],
									"outputs": [
										{
											"referenceName": "LRS_Snowflake_Raw_IR_V2",
											"type": "DatasetReference",
											"parameters": {
												"Snowflake_Sink_Table": "ARDETAIL_STAGING",
												"Snowflake_Schema": "TOWER_RAW"
											}
										}
									]
								},
								{
									"name": "ARDetail Snowflake Merge Operation",
									"description": "merge statement to the raw tables. this helps avoids any duplication and upsert the rows needed.",
									"type": "Script",
									"dependsOn": [
										{
											"activity": "Ardetail Delta Load",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "LRS_Snowflake_V2",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"type": "Query",
												"text": {
													"value": "@{concat('merge into LRS_RAW.TOWER_RAW.ARDETAIL t \nusing \n    TOWER_RAW.ARDETAIL_STAGING s \non t.ardetailuid = s.ardetailuid  \nwhen matched then update set \n\tardetailuid = s.ardetailuid ,\n      t.sourceuid = s.sourceuid ,\n      t.status = s.status ,\n      t.custid = s.custid ,\n      t.siteid = s.siteid ,\n      t.material = s.material ,\n      t.detailtype = s.detailtype ,\n      t.tax = s.tax ,\n      t.debitacct = s.debitacct ,\n      t.creditacct = s.creditacct ,\n      t.period = s.period ,\n      t.invoiceuid = s.invoiceuid ,\n      t.transactiondate = s.transactiondate ,\n      t.duedate = s.duedate ,\n      t.glexportbatchuid = s.glexportbatchuid ,\n      t.quantity = s.quantity ,\n      t.unitrate = s.unitrate,\n      t.originalamount = s.originalamount ,\n      t.balance = s.balance ,\n      t.billedappliedamount = s.billedappliedamount ,\n      t.displayoninvoice = s.displayoninvoice ,\n      t.detailsource = s.detailsource ,\n      t.companyid = s. companyid ,\n      t.createddatetime = s.createddatetime ,\n      t.creditacctsegtype = s.creditacctsegtype ,\n      t.debitacctsegtype = s.debitacctsegtype \nwhen not matched then insert \n\t(\n\tardetailuid ,\n      t.sourceuid ,\n      t.status ,\n      t.custid ,\n      t.siteid ,\n      t.material ,\n      t.detailtype ,\n      t.tax ,\n      t.debitacct ,\n      t.creditacct ,\n      t.period ,\n      t.invoiceuid ,\n      t.transactiondate ,\n      t.duedate ,\n      t.glexportbatchuid ,\n      t.quantity ,\n      t.unitrate ,\n      t.originalamount ,\n      t.balance ,\n      t.billedappliedamount ,\n      t.displayoninvoice ,\n      t.detailsource ,\n      t.companyid ,\n      t.createddatetime ,\n      t.creditacctsegtype ,\n      t.debitacctsegtype \n\t)\nvalues \n\t(\n\t ardetailuid ,\n      s.sourceuid ,\n      s.status ,\n      s.custid ,\n      s.siteid ,\n      s.material ,\n      s.detailtype ,\n      s.tax ,\n      s.debitacct ,\n      s.creditacct ,\n      s.period ,\n      s.invoiceuid ,\n      s.transactiondate ,\n      s.duedate ,\n      s.glexportbatchuid ,\n      s.quantity ,\n      s.unitrate ,\n      s.originalamount ,\n      s.balance ,\n      s.billedappliedamount ,\n      s.displayoninvoice ,\n      s.detailsource ,\n      s.companyid ,\n      s.createddatetime ,\n      s.creditacctsegtype ,\n      s.debitacctsegtype)'\n\t)}\n",
													"type": "Expression"
												}
											}
										],
										"scriptBlockExecutionTimeout": "02:00:00"
									}
								},
								{
									"name": "Create staging for ARDetail",
									"type": "Script",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "LRS_Snowflake_V2",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"type": "Query",
												"text": {
													"value": "@{concat(\n    'Create or replace table LRS_RAW.TOWER_RAW.ARDETAIL_STAGING',\n    ' as select * from  \n    LRS_RAW.TOWER_RAW.ARDETAIL where 1=0'\n    )\n    }",
													"type": "Expression"
												}
											}
										],
										"scriptBlockExecutionTimeout": "02:00:00"
									}
								},
								{
									"name": "Drop staging table for AR Detail",
									"type": "Script",
									"dependsOn": [
										{
											"activity": "ARDetail Snowflake Merge Operation",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "LRS_Snowflake_V2",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"type": "Query",
												"text": {
													"value": "@{concat(\n    'Drop table LRS_RAW.TOWER_RAW.ARDETAIL_STAGING'\n    )\n}",
													"type": "Expression"
												}
											}
										],
										"scriptBlockExecutionTimeout": "02:00:00"
									}
								},
								{
									"name": "GLExportBatch Delta Load",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "Create staging for GLExportBatch",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SqlServerSource",
											"sqlReaderQuery": {
												"value": "@{concat(\n    'select * from GLEXPORTBATCH where exportdatetime > DATEADD(day,-', \n    pipeline().parameters.Incremental_Range,\n    ', GETDATE())'\n    )\n}\n",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"sink": {
											"type": "SnowflakeV2Sink",
											"importSettings": {
												"type": "SnowflakeImportCopyCommand",
												"additionalCopyOptions": {
													"ON_ERROR": "CONTINUE"
												}
											}
										},
										"enableStaging": true,
										"stagingSettings": {
											"linkedServiceName": {
												"referenceName": "msaz01_dm01_Azure_Blob",
												"type": "LinkedServiceReference"
											},
											"path": "staging",
											"enableCompression": true
										},
										"enableSkipIncompatibleRow": true,
										"logSettings": {
											"enableCopyActivityLog": true,
											"copyActivityLogSettings": {
												"logLevel": "Warning",
												"enableReliableLogging": false
											},
											"logLocationSettings": {
												"linkedServiceName": {
													"referenceName": "msaz01_dm01_Azure_Blob",
													"type": "LinkedServiceReference"
												}
											}
										},
										"translator": {
											"type": "TabularTranslator",
											"mappings": [
												{
													"source": {
														"name": "GLExportBatchUID",
														"type": "Guid"
													},
													"sink": {
														"name": "GLEXPORTBATCHUID",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "GLExportBatchID",
														"type": "String"
													},
													"sink": {
														"name": "GLEXPORTBATCHID",
														"type": "Int64"
													}
												},
												{
													"source": {
														"name": "ExportDateTime",
														"type": "DateTime"
													},
													"sink": {
														"name": "EXPORTDATETIME",
														"type": "DateTime"
													}
												},
												{
													"source": {
														"name": "Status",
														"type": "Int16"
													},
													"sink": {
														"name": "STATUS",
														"type": "Int64"
													}
												},
												{
													"source": {
														"name": "CreditTotal",
														"type": "Decimal"
													},
													"sink": {
														"name": "CREDITTOTAL",
														"type": "Int64"
													}
												},
												{
													"source": {
														"name": "DebitTotal",
														"type": "Decimal"
													},
													"sink": {
														"name": "DEBITTOTAL",
														"type": "Int64"
													}
												},
												{
													"source": {
														"name": "Description",
														"type": "String"
													},
													"sink": {
														"name": "DESCRIPTION",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "FileCount",
														"type": "Int32"
													},
													"sink": {
														"name": "FILECOUNT",
														"type": "Int64"
													}
												},
												{
													"source": {
														"name": "BatchType",
														"type": "Int16"
													},
													"sink": {
														"name": "BATCHTYPE",
														"type": "Int64"
													}
												},
												{
													"source": {
														"name": "CompanyID",
														"type": "String"
													},
													"sink": {
														"name": "COMPANYID",
														"type": "Int64"
													}
												},
												{
													"source": {
														"name": "Period",
														"type": "String"
													},
													"sink": {
														"name": "PERIOD",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "CompanyList",
														"type": "String"
													},
													"sink": {
														"name": "COMPANYLIST",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "PeriodList",
														"type": "String"
													},
													"sink": {
														"name": "PERIODLIST",
														"type": "String"
													}
												}
											]
										}
									},
									"inputs": [
										{
											"referenceName": "MSAZ01_TOWER",
											"type": "DatasetReference",
											"parameters": {
												"db": "Tower7",
												"schema": "dbo",
												"table": "GLEXPORTBATCH"
											}
										}
									],
									"outputs": [
										{
											"referenceName": "LRS_Snowflake_Raw_IR_V2",
											"type": "DatasetReference",
											"parameters": {
												"Snowflake_Sink_Table": "GLEXPORTBATCH_STAGING",
												"Snowflake_Schema": "TOWER_RAW"
											}
										}
									]
								},
								{
									"name": "GLExportBatch Snowflake Merge Operation",
									"description": "merge statement to the raw tables. this helps avoids any duplication and upsert the rows needed.",
									"type": "Script",
									"dependsOn": [
										{
											"activity": "GLExportBatch Delta Load",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "LRS_Snowflake_V2",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"type": "Query",
												"text": {
													"value": "@{concat('merge into LRS_RAW.TOWER_RAW.GLEXPORTBATCH t \nusing \n    TOWER_RAW.GLEXPORTBATCH_STAGING s \non t.GLEXPORTBATCHUID = s.GLEXPORTBATCHUID  \nwhen matched then update set \n\tt.glexportbatchuid = s.glexportbatchuid ,\n\tt.glexportbatchid = s.glexportbatchid,\n\tt.exportdatetime= s.exportdatetime ,\n\tt.status = s.status ,\n\tt.credittotal = s.credittotal ,\n\tt.debittotal = s.debittotal ,\n\tt.description = s.description ,\n\tt.filecount = s.filecount,\n\tt.batchtype = s.batchtype,\n\tt.companyid = s.companyid,\n\tt.period = s.period ,\n\tt.companylist = s.companylist ,\n\tt.periodlist = s.periodlist \nwhen not matched then insert \n\t(\n\tt.glexportbatchuid,\n\tt.glexportbatchid ,\n\tt.exportdatetime,\n\tt.status ,\n\tt.credittotal ,\n\tt.debittotal ,\n\tt.description ,\n\tt.filecount ,\n\tt.batchtype ,\n\tt.companyid ,\n\tt.period ,\n\tt.companylist ,\n\tt.periodlist \n\t)\nvalues \n\t(\n\ts.glexportbatchuid ,\n\ts.glexportbatchid ,\n\ts.exportdatetime,\n\ts.status ,\n\ts.credittotal ,\n\ts.debittotal ,\n\ts.description ,\n\ts.filecount ,\n\ts.batchtype ,\n\ts.companyid ,\n\ts.period ,\n\ts.companylist,\n\ts.periodlist)'\n\t)}\n",
													"type": "Expression"
												}
											}
										],
										"scriptBlockExecutionTimeout": "02:00:00"
									}
								},
								{
									"name": "Create staging for GLExportBatch",
									"type": "Script",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "LRS_Snowflake_V2",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"type": "Query",
												"text": {
													"value": "@{concat(\n    'Create or replace table LRS_RAW.TOWER_RAW.GLEXPORTBATCH_STAGING',\n    ' as select * from  \n    LRS_RAW.TOWER_RAW.GLEXPORTBATCH where 1=0'\n    )\n    }",
													"type": "Expression"
												}
											}
										],
										"scriptBlockExecutionTimeout": "02:00:00"
									}
								},
								{
									"name": "Drop staging table for GLExportBatch",
									"type": "Script",
									"dependsOn": [
										{
											"activity": "GLExportBatch Snowflake Merge Operation",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "LRS_Snowflake_V2",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"type": "Query",
												"text": {
													"value": "@{concat(\n    'Drop table LRS_RAW.TOWER_RAW.GLEXPORTBATCH_STAGING'\n    )\n}",
													"type": "Expression"
												}
											}
										],
										"scriptBlockExecutionTimeout": "02:00:00"
									}
								},
								{
									"name": "Payment Delta Load",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "Create staging for Payment",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SqlServerSource",
											"sqlReaderQuery": {
												"value": "@{concat(\n    'select * from PAYMENT where PAYMENTDATE > DATEADD(day,-', \n    pipeline().parameters.Incremental_Range,\n    ', GETDATE())'\n    )\n}\n",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"sink": {
											"type": "SnowflakeV2Sink",
											"importSettings": {
												"type": "SnowflakeImportCopyCommand",
												"additionalCopyOptions": {
													"ON_ERROR": "CONTINUE"
												}
											}
										},
										"enableStaging": true,
										"stagingSettings": {
											"linkedServiceName": {
												"referenceName": "msaz01_dm01_Azure_Blob",
												"type": "LinkedServiceReference"
											},
											"path": "staging",
											"enableCompression": true
										},
										"enableSkipIncompatibleRow": true,
										"logSettings": {
											"enableCopyActivityLog": true,
											"copyActivityLogSettings": {
												"logLevel": "Warning",
												"enableReliableLogging": false
											},
											"logLocationSettings": {
												"linkedServiceName": {
													"referenceName": "msaz01_dm01_Azure_Blob",
													"type": "LinkedServiceReference"
												}
											}
										},
										"translator": {
											"type": "TabularTranslator",
											"mappings": [
												{
													"source": {
														"name": "PaymentUID",
														"type": "Guid"
													},
													"sink": {
														"name": "PAYMENTUID",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "PaymentBatchUID",
														"type": "Guid"
													},
													"sink": {
														"name": "PAYMENTBATCHUID",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "BatchSequence",
														"type": "Int32"
													},
													"sink": {
														"name": "BATCHSEQUENCE",
														"type": "Int64"
													}
												},
												{
													"source": {
														"name": "SourceUID",
														"type": "Guid"
													},
													"sink": {
														"name": "SOURCEUID",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "PaymentDate",
														"type": "DateTime"
													},
													"sink": {
														"name": "PAYMENTDATE",
														"type": "DateTime"
													}
												},
												{
													"source": {
														"name": "Status",
														"type": "Int16"
													},
													"sink": {
														"name": "STATUS",
														"type": "Int64"
													}
												},
												{
													"source": {
														"name": "ClearOrNSFDate",
														"type": "DateTime"
													},
													"sink": {
														"name": "CLEARORNSFDATE",
														"type": "DateTime"
													}
												},
												{
													"source": {
														"name": "CustID",
														"type": "String"
													},
													"sink": {
														"name": "CUSTID",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "PaymentMethod",
														"type": "Int16"
													},
													"sink": {
														"name": "PAYMENTMETHOD",
														"type": "Int64"
													}
												},
												{
													"source": {
														"name": "CreditCardType",
														"type": "Int16"
													},
													"sink": {
														"name": "CREDITCARDTYPE",
														"type": "Int64"
													}
												},
												{
													"source": {
														"name": "PaymentBankAcct",
														"type": "String"
													},
													"sink": {
														"name": "PAYMENTBANKACCT",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "PaymentIDNbr",
														"type": "String"
													},
													"sink": {
														"name": "PAYMENTIDNBR",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "Amount",
														"type": "Decimal"
													},
													"sink": {
														"name": "AMOUNT",
														"type": "Int64"
													}
												},
												{
													"source": {
														"name": "ApplicationMethod",
														"type": "Int16"
													},
													"sink": {
														"name": "APPLICATIONMETHOD",
														"type": "Int64"
													}
												},
												{
													"source": {
														"name": "RemoveCreditHold",
														"type": "Int16"
													},
													"sink": {
														"name": "REMOVECREDITHOLD",
														"type": "Int64"
													}
												},
												{
													"source": {
														"name": "CreditAmount",
														"type": "Decimal"
													},
													"sink": {
														"name": "CREDITAMOUNT",
														"type": "Int64"
													}
												},
												{
													"source": {
														"name": "CreditReason",
														"type": "String"
													},
													"sink": {
														"name": "CREDITREASON",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "PaymentNote",
														"type": "String"
													},
													"sink": {
														"name": "PAYMENTNOTE",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "CustomerBalance",
														"type": "Decimal"
													},
													"sink": {
														"name": "CUSTOMERBALANCE",
														"type": "Int64"
													}
												},
												{
													"source": {
														"name": "BankAccountXRefUID",
														"type": "Guid"
													},
													"sink": {
														"name": "BANKACCOUNTXREFUID",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "CollectionsNotified",
														"type": "Int16"
													},
													"sink": {
														"name": "COLLECTIONSNOTIFIED",
														"type": "Int64"
													}
												},
												{
													"source": {
														"name": "CustomerPaymentAccountUID",
														"type": "Guid"
													},
													"sink": {
														"name": "CUSTOMERPAYMENTACCOUNTUID",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "ReversedByDate",
														"type": "DateTime"
													},
													"sink": {
														"name": "REVERSEDBYDATE",
														"type": "DateTime"
													}
												},
												{
													"source": {
														"name": "ReversedByUserID",
														"type": "String"
													},
													"sink": {
														"name": "REVERSEDBYUSERID",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "ReversalReasonNote",
														"type": "String"
													},
													"sink": {
														"name": "REVERSALREASONNOTE",
														"type": "String"
													}
												}
											]
										}
									},
									"inputs": [
										{
											"referenceName": "MSAZ01_TOWER",
											"type": "DatasetReference",
											"parameters": {
												"db": "Tower7",
												"schema": "dbo",
												"table": "Payment"
											}
										}
									],
									"outputs": [
										{
											"referenceName": "LRS_Snowflake_Raw_IR_V2",
											"type": "DatasetReference",
											"parameters": {
												"Snowflake_Sink_Table": "PAYMENT_STAGING",
												"Snowflake_Schema": "TOWER_RAW"
											}
										}
									]
								},
								{
									"name": "Payment Snowflake Merge Operation",
									"description": "merge statement to the raw tables. this helps avoids any duplication and upsert the rows needed.",
									"type": "Script",
									"dependsOn": [
										{
											"activity": "Payment Delta Load",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "LRS_Snowflake_V2",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"type": "Query",
												"text": {
													"value": "@{concat('merge into LRS_RAW.TOWER_RAW.PAYMENT t \nusing \n    TOWER_RAW.PAYMENT_STAGING s \non t.PAYMENTUID = s.PAYMENTUID  \nwhen matched then update set \n\tt.paymentuid =s.paymentuid , \n\tt.paymentbatchuid =s.paymentbatchuid , \n\tt.batchsequence =s.batchsequence , \n\tt.sourceuid =s.sourceuid, \n\tt.paymentdate =s.paymentdate , \n\tt.status =s.status, \n\tt.clearornsfdate =s.clearornsfdate, \n\tt.custid =s. custid , \n\tt.paymentmethod =s.paymentmethod , \n\tt.creditcardtype =s.creditcardtype, \n\tt.paymentbankacct =s.paymentbankacct, \n\tt.paymentidnbr =s.paymentidnbr, \n\tt.amount =s.amount , \n\tt.applicationmethod =s.applicationmethod , \n\tt.removecredithold =s.removecredithold , \n\tt.creditamount =s.creditamount , \n\tt.creditreason =s.creditreason, \n\tt.paymentnote=s.paymentnote ,  \n\tt.customerbalance =s.customerbalance, \n\tt.bankaccountxrefuid =s.bankaccountxrefuid , \n\tt.collectionsnotified =s.collectionsnotified, \n\tt.customerpaymentaccountuid =s.customerpaymentaccountuid, \n\tt.reversedbydate=s.reversedbydate , \n\tt.reversedbyuserid =s.reversedbyuserid , \n\tt.reversalreasonnote = s.reversalreasonnote  \nwhen not matched then insert \n\t(\n\tt.paymentuid ,\n\tt.paymentbatchuid ,\n\tt.batchsequence ,\n\tt.sourceuid ,\n\tt.paymentdate ,\n\tt.status ,\n\tt.clearornsfdate ,\n\tt.custid ,\n\tt.paymentmethod ,\n\tt.creditcardtype ,\n\tt.paymentbankacct ,\n\tt.paymentidnbr ,\n\tt.amount ,\n\tt.applicationmethod ,\n\tt.removecredithold ,\n\tt.creditamount ,\n\tt.creditreason ,\n\tt.paymentnote, \n\tt.customerbalance ,\n\tt.bankaccountxrefuid ,\n\tt.collectionsnotified ,\n\tt.customerpaymentaccountuid,\n\tt.reversedbydate,\n\tt.reversedbyuserid ,\n\tt.reversalreasonnote \n\t)\nvalues \n\t(\n\ts.paymentuid ,\n\ts.paymentbatchuid ,\n\ts.batchsequence ,\n\ts.sourceuid ,\n\ts.paymentdate ,\n\ts.status ,\n\ts.clearornsfdate ,\n\ts.custid ,\n\ts.paymentmethod ,\n\ts.creditcardtype ,\n\ts.paymentbankacct ,\n\ts.paymentidnbr ,\n\ts.amount ,\n\ts.applicationmethod ,\n\ts.removecredithold ,\n\ts.creditamount ,\n\ts.creditreason ,\n\ts.paymentnote, \n\ts.customerbalance ,\n\ts.bankaccountxrefuid ,\n\ts.collectionsnotified ,\n\ts.customerpaymentaccountuid ,\n\ts.reversedbydate,\n\ts.reversedbyuserid ,\n\ts.reversalreasonnote )'\n\t)}\n",
													"type": "Expression"
												}
											}
										],
										"scriptBlockExecutionTimeout": "02:00:00"
									}
								},
								{
									"name": "Create staging for Payment",
									"type": "Script",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "LRS_Snowflake_V2",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"type": "Query",
												"text": {
													"value": "@{concat(\n    'Create or replace table LRS_RAW.TOWER_RAW.PAYMENT_STAGING',\n    ' as select * from  \n    LRS_RAW.TOWER_RAW.PAYMENT where 1=0'\n    )\n    }",
													"type": "Expression"
												}
											}
										],
										"scriptBlockExecutionTimeout": "02:00:00"
									}
								},
								{
									"name": "Drop staging table for Payment",
									"type": "Script",
									"dependsOn": [
										{
											"activity": "Payment Snowflake Merge Operation",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "LRS_Snowflake_V2",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"type": "Query",
												"text": {
													"value": "@{concat(\n    'Drop table LRS_RAW.TOWER_RAW.PAYMENT_STAGING'\n    )\n}",
													"type": "Expression"
												}
											}
										],
										"scriptBlockExecutionTimeout": "02:00:00"
									}
								},
								{
									"name": "InvoiceDetail Delta Load",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "Create staging for InvoiceDetail",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SqlServerSource",
											"sqlReaderQuery": {
												"value": "@{concat(\n    'select * from INVOICEDETAIL \n    where STARTDATE > (SELECT MAX(STARTDATE) FROM INVOICEDETAIL) -' , \n  pipeline().parameters.Incremental_Range2\n    )\n}\n",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"sink": {
											"type": "SnowflakeV2Sink",
											"importSettings": {
												"type": "SnowflakeImportCopyCommand",
												"additionalCopyOptions": {
													"ON_ERROR": "CONTINUE"
												}
											}
										},
										"enableStaging": true,
										"stagingSettings": {
											"linkedServiceName": {
												"referenceName": "msaz01_dm01_Azure_Blob",
												"type": "LinkedServiceReference"
											},
											"path": "staging"
										},
										"enableSkipIncompatibleRow": true,
										"logSettings": {
											"enableCopyActivityLog": true,
											"copyActivityLogSettings": {
												"logLevel": "Warning",
												"enableReliableLogging": false
											},
											"logLocationSettings": {
												"linkedServiceName": {
													"referenceName": "msaz01_dm01_Azure_Blob",
													"type": "LinkedServiceReference"
												}
											}
										},
										"translator": {
											"type": "TabularTranslator",
											"mappings": [
												{
													"source": {
														"name": "InvoiceDetailUID",
														"type": "Guid"
													},
													"sink": {
														"name": "INVOICEDETAILUID",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "InvoiceUID",
														"type": "Guid"
													},
													"sink": {
														"name": "INVOICEUID",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "SiteID",
														"type": "String"
													},
													"sink": {
														"name": "SITEID",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "ServiceUID",
														"type": "Guid"
													},
													"sink": {
														"name": "SERVICEUID",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "SourceUID",
														"type": "Guid"
													},
													"sink": {
														"name": "SOURCEUID",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "SourceIDNbr",
														"type": "String"
													},
													"sink": {
														"name": "SOURCEIDNBR",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "LineType",
														"type": "Int16"
													},
													"sink": {
														"name": "LINETYPE",
														"type": "Int64"
													}
												},
												{
													"source": {
														"name": "LineSubType",
														"type": "Int16"
													},
													"sink": {
														"name": "LINESUBTYPE",
														"type": "Int64"
													}
												},
												{
													"source": {
														"name": "SvcCode",
														"type": "String"
													},
													"sink": {
														"name": "SVCCODE",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "Description",
														"type": "String"
													},
													"sink": {
														"name": "DESCRIPTION",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "Salesperson",
														"type": "String"
													},
													"sink": {
														"name": "SALESPERSON",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "SvcFrequency",
														"type": "String"
													},
													"sink": {
														"name": "SVCFREQUENCY",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "Quantity",
														"type": "Decimal"
													},
													"sink": {
														"name": "QUANTITY",
														"type": "Int64"
													}
												},
												{
													"source": {
														"name": "Amount",
														"type": "Decimal"
													},
													"sink": {
														"name": "AMOUNT",
														"type": "Int64"
													}
												},
												{
													"source": {
														"name": "UnitPrice",
														"type": "Decimal"
													},
													"sink": {
														"name": "UNITPRICE",
														"type": "Int64"
													}
												},
												{
													"source": {
														"name": "TaxAmount",
														"type": "Decimal"
													},
													"sink": {
														"name": "TAXAMOUNT",
														"type": "Int64"
													}
												},
												{
													"source": {
														"name": "StartDate",
														"type": "DateTime"
													},
													"sink": {
														"name": "STARTDATE",
														"type": "DateTime"
													}
												},
												{
													"source": {
														"name": "EndDate",
														"type": "DateTime"
													},
													"sink": {
														"name": "ENDDATE",
														"type": "DateTime"
													}
												},
												{
													"source": {
														"name": "PrintRecord",
														"type": "Int16"
													},
													"sink": {
														"name": "PRINTRECORD",
														"type": "Int64"
													}
												},
												{
													"source": {
														"name": "LineOrderKey1",
														"type": "String"
													},
													"sink": {
														"name": "LINEORDERKEY1",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "LineOrderKey2",
														"type": "String"
													},
													"sink": {
														"name": "LINEORDERKEY2",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "LineOrderKey3",
														"type": "String"
													},
													"sink": {
														"name": "LINEORDERKEY3",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "LineOrderKey4",
														"type": "String"
													},
													"sink": {
														"name": "LINEORDERKEY4",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "PONbr",
														"type": "String"
													},
													"sink": {
														"name": "PONBR",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "POSource",
														"type": "Int16"
													},
													"sink": {
														"name": "POSOURCE",
														"type": "Int64"
													}
												},
												{
													"source": {
														"name": "AssignedToCollections",
														"type": "Int16"
													},
													"sink": {
														"name": "ASSIGNEDTOCOLLECTIONS",
														"type": "Int64"
													}
												},
												{
													"source": {
														"name": "AssignedToCollectionsDate",
														"type": "DateTime"
													},
													"sink": {
														"name": "ASSIGNEDTOCOLLECTIONSDATE",
														"type": "DateTime"
													}
												},
												{
													"source": {
														"name": "DiscountAmount",
														"type": "Decimal"
													},
													"sink": {
														"name": "DISCOUNTAMOUNT",
														"type": "Int64"
													}
												},
												{
													"source": {
														"name": "PriorARDStatus",
														"type": "Int16"
													},
													"sink": {
														"name": "PRIORARDSTATUS",
														"type": "Int64"
													}
												},
												{
													"source": {
														"name": "LineLevel",
														"type": "Int16"
													},
													"sink": {
														"name": "LINELEVEL",
														"type": "Int64"
													}
												},
												{
													"source": {
														"name": "SiteAddressUID",
														"type": "Guid"
													},
													"sink": {
														"name": "SITEADDRESSUID",
														"type": "String"
													}
												}
											]
										}
									},
									"inputs": [
										{
											"referenceName": "MSAZ01_TOWER",
											"type": "DatasetReference",
											"parameters": {
												"db": "Tower7",
												"schema": "dbo",
												"table": "INVOICEDETAIL"
											}
										}
									],
									"outputs": [
										{
											"referenceName": "LRS_Snowflake_Raw_IR_V2",
											"type": "DatasetReference",
											"parameters": {
												"Snowflake_Sink_Table": "INVOICEDETAIL_STAGING",
												"Snowflake_Schema": "TOWER_RAW"
											}
										}
									]
								},
								{
									"name": "InvoiceDetail Snowflake Merge Operation",
									"description": "merge statement to the raw tables. this helps avoids any duplication and upsert the rows needed.",
									"type": "Script",
									"dependsOn": [
										{
											"activity": "InvoiceDetail Delta Load",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "LRS_Snowflake_V2",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"type": "Query",
												"text": {
													"value": "@{concat('merge into LRS_RAW.TOWER_RAW.INVOICEDETAIL t \nusing \n    TOWER_RAW.INVOICEDETAIL_STAGING s \non t.INVOICEDETAILUID= s.INVOICEDETAILUID  \nwhen matched then update set \nt.InvoiceDetailUID= s.InvoiceDetailUID,\n      t.InvoiceUID= s.InvoiceUID,\n      t.SiteID= s.SiteID,\n      t.ServiceUID= s.ServiceUID,\n      t.SourceUID= s.SourceUID,\n      t.SourceIDNbr= s.SourceIDNbr,\n      t.LineType= s.LineType,\n      t.LineSubType= s.LineSubType,\n      t.SvcCode= s.SvcCode,\n      t.Description= s.Description ,\n      t. Salesperson = s.Salesperson ,\n      t.SvcFrequency= s.SvcFrequency ,\n      t.Quantity= s.Quantity,\n      t.Amount= s.Amount ,\n      t.UnitPrice= s.UnitPrice,\n      t.TaxAmount= s.TaxAmount,\n      t.StartDate= s.StartDate,\n      t.EndDate= s.EndDate ,\n      t.PrintRecord= s.PrintRecord ,\n      t.LineOrderKey1= s.LineOrderKey1 ,\n      t.LineOrderKey2= s.LineOrderKey2 ,\n      t.LineOrderKey3= s.LineOrderKey3 ,\n      t.LineOrderKey4= s.LineOrderKey4 ,\n      t.PONbr= s.PONbr ,\n      t.POSource= s.POSource ,\n      t.AssignedToCollections= s.AssignedToCollections ,\n      t.AssignedToCollectionsDate= s.AssignedToCollectionsDate ,\n      t.DiscountAmount= s.DiscountAmount,\n      t.PriorARDStatus= s.PriorARDStatus ,\n      t.LineLevel= s.LineLevel,\n      t.SiteAddressUID= s.SiteAddressUID \nwhen not matched then insert \n\t(\n\tt.InvoiceDetailUID,\n      t.InvoiceUID,\n      t.SiteID,\n      t.ServiceUID,\n      t.SourceUID,\n      t.SourceIDNbr,\n      t.LineType,\n      t.LineSubType,\n      t.SvcCode,\n      t.Description,\n      t.Salesperson,\n      t.SvcFrequency,\n      t.Quantity,\n      t.Amount,\n      t.UnitPrice,\n      t.TaxAmount,\n      t.StartDate,\n      t.EndDate,\n      t.PrintRecord,\n      t.LineOrderKey1,\n      t.LineOrderKey2,\n      t.LineOrderKey3,\n      t.LineOrderKey4,\n      t.PONbr,\n      t.POSource,\n      t.AssignedToCollections,\n      t.AssignedToCollectionsDate,\n      t.DiscountAmount,\n      t.PriorARDStatus,\n      t.LineLevel,\n      t.SiteAddressUID\n\t)\nvalues \n\t(\n\ts.InvoiceDetailUID,\n      s.InvoiceUID,\n      s.SiteID,\n      s.ServiceUID,\n      s.SourceUID,\n      s.SourceIDNbr,\n      s.LineType,\n      s.LineSubType,\n      s.SvcCode,\n      s.Description,\n      s.Salesperson,\n      s.SvcFrequency,\n      s.Quantity,\n      s.Amount,\n      s.UnitPrice,\n      s.TaxAmount,\n      s.StartDate,\n      s.EndDate,\n      s.PrintRecord,\n      s.LineOrderKey1,\n      s.LineOrderKey2,\n      s.LineOrderKey3,\n      s.LineOrderKey4,\n      s.PONbr,\n      s.POSource,\n      s.AssignedToCollections,\n      s.AssignedToCollectionsDate,\n      s.DiscountAmount,\n      s.PriorARDStatus,\n      s.LineLevel,\n      s.SiteAddressUID)'\n\t)}\n",
													"type": "Expression"
												}
											}
										],
										"scriptBlockExecutionTimeout": "02:00:00"
									}
								},
								{
									"name": "Create staging for InvoiceDetail",
									"type": "Script",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "LRS_Snowflake_V2",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"type": "Query",
												"text": {
													"value": "@{concat(\n    'Create or replace table LRS_RAW.TOWER_RAW.INVOICEDETAIL_STAGING',\n    ' as select * from  \n    LRS_RAW.TOWER_RAW.INVOICEDETAIL where 1=0'\n    )\n    }",
													"type": "Expression"
												}
											}
										],
										"scriptBlockExecutionTimeout": "02:00:00"
									}
								},
								{
									"name": "Drop staging table for InvoiceDetail",
									"type": "Script",
									"dependsOn": [
										{
											"activity": "InvoiceDetail Snowflake Merge Operation",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "LRS_Snowflake_V2",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"type": "Query",
												"text": {
													"value": "@{concat(\n    'Drop table LRS_RAW.TOWER_RAW.INVOICEDETAIL_STAGING'\n    )\n}",
													"type": "Expression"
												}
											}
										],
										"scriptBlockExecutionTimeout": "02:00:00"
									}
								},
								{
									"name": "Invoice Delta Load",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "Create staging for Invoice",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SqlServerSource",
											"sqlReaderQuery": {
												"value": "@{concat(\n    'select * from INVOICE \n    where DUEDATE > (SELECT MAX(DUEDATE) FROM INVOICE) -' , \n  pipeline().parameters.Incremental_Range3\n    )\n}\n",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"sink": {
											"type": "SnowflakeV2Sink",
											"importSettings": {
												"type": "SnowflakeImportCopyCommand",
												"additionalCopyOptions": {
													"ON_ERROR": "CONTINUE"
												}
											}
										},
										"enableStaging": true,
										"stagingSettings": {
											"linkedServiceName": {
												"referenceName": "msaz01_dm01_Azure_Blob",
												"type": "LinkedServiceReference"
											},
											"path": "staging"
										},
										"enableSkipIncompatibleRow": true,
										"logSettings": {
											"enableCopyActivityLog": true,
											"copyActivityLogSettings": {
												"logLevel": "Warning",
												"enableReliableLogging": false
											},
											"logLocationSettings": {
												"linkedServiceName": {
													"referenceName": "msaz01_dm01_Azure_Blob",
													"type": "LinkedServiceReference"
												}
											}
										},
										"translator": {
											"type": "TabularTranslator",
											"mappings": [
												{
													"source": {
														"name": "InvoiceUID",
														"type": "Guid"
													},
													"sink": {
														"name": "INVOICEUID",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "InvoiceID",
														"type": "String"
													},
													"sink": {
														"name": "INVOICEID",
														"type": "Int64"
													}
												},
												{
													"source": {
														"name": "Status",
														"type": "Int16"
													},
													"sink": {
														"name": "STATUS",
														"type": "Int64"
													}
												},
												{
													"source": {
														"name": "InvoiceContent",
														"type": "Int16"
													},
													"sink": {
														"name": "INVOICECONTENT",
														"type": "Int64"
													}
												},
												{
													"source": {
														"name": "PrintInvoice",
														"type": "Int16"
													},
													"sink": {
														"name": "PRINTINVOICE",
														"type": "Int64"
													}
												},
												{
													"source": {
														"name": "InvoiceOrderKey",
														"type": "String"
													},
													"sink": {
														"name": "INVOICEORDERKEY",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "BillBatchUID",
														"type": "Guid"
													},
													"sink": {
														"name": "BILLBATCHUID",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "BillCustID",
														"type": "String"
													},
													"sink": {
														"name": "BILLCUSTID",
														"type": "Int64"
													}
												},
												{
													"source": {
														"name": "BillSiteID",
														"type": "String"
													},
													"sink": {
														"name": "BILLSITEID",
														"type": "Int64"
													}
												},
												{
													"source": {
														"name": "BillName",
														"type": "String"
													},
													"sink": {
														"name": "BILLNAME",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "BillContact",
														"type": "String"
													},
													"sink": {
														"name": "BILLCONTACT",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "BillAddressUID",
														"type": "Guid"
													},
													"sink": {
														"name": "BILLADDRESSUID",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "BillPhone",
														"type": "String"
													},
													"sink": {
														"name": "BILLPHONE",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "BillFax",
														"type": "String"
													},
													"sink": {
														"name": "BILLFAX",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "BillEmail",
														"type": "String"
													},
													"sink": {
														"name": "BILLEMAIL",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "SiteAddressUID",
														"type": "Guid"
													},
													"sink": {
														"name": "SITEADDRESSUID",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "InvoiceDate",
														"type": "DateTime"
													},
													"sink": {
														"name": "INVOICEDATE",
														"type": "DateTime"
													}
												},
												{
													"source": {
														"name": "LastInvoiceDate",
														"type": "DateTime"
													},
													"sink": {
														"name": "LASTINVOICEDATE",
														"type": "DateTime"
													}
												},
												{
													"source": {
														"name": "DueDate",
														"type": "DateTime"
													},
													"sink": {
														"name": "DUEDATE",
														"type": "DateTime"
													}
												},
												{
													"source": {
														"name": "FinanceChargeThruDate",
														"type": "DateTime"
													},
													"sink": {
														"name": "FINANCECHARGETHRUDATE",
														"type": "DateTime"
													}
												},
												{
													"source": {
														"name": "CustClass",
														"type": "String"
													},
													"sink": {
														"name": "CUSTCLASS",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "BalForward",
														"type": "Decimal"
													},
													"sink": {
														"name": "BALFORWARD",
														"type": "Int64"
													}
												},
												{
													"source": {
														"name": "AgingBal00",
														"type": "Decimal"
													},
													"sink": {
														"name": "AGINGBAL00",
														"type": "Int64"
													}
												},
												{
													"source": {
														"name": "AgingBal01",
														"type": "Decimal"
													},
													"sink": {
														"name": "AGINGBAL01",
														"type": "Int64"
													}
												},
												{
													"source": {
														"name": "AgingBal02",
														"type": "Decimal"
													},
													"sink": {
														"name": "AGINGBAL02",
														"type": "Int64"
													}
												},
												{
													"source": {
														"name": "AgingBal03",
														"type": "Decimal"
													},
													"sink": {
														"name": "AGINGBAL03",
														"type": "Int64"
													}
												},
												{
													"source": {
														"name": "AgingBal04",
														"type": "Decimal"
													},
													"sink": {
														"name": "AGINGBAL04",
														"type": "Int64"
													}
												},
												{
													"source": {
														"name": "NewBalance",
														"type": "Decimal"
													},
													"sink": {
														"name": "NEWBALANCE",
														"type": "Int64"
													}
												},
												{
													"source": {
														"name": "TotSvcOneTime",
														"type": "Decimal"
													},
													"sink": {
														"name": "TOTSVCONETIME",
														"type": "Int64"
													}
												},
												{
													"source": {
														"name": "TotSvcRecurring",
														"type": "Decimal"
													},
													"sink": {
														"name": "TOTSVCRECURRING",
														"type": "Int64"
													}
												},
												{
													"source": {
														"name": "TotSvcOnCall",
														"type": "Decimal"
													},
													"sink": {
														"name": "TOTSVCONCALL",
														"type": "Int64"
													}
												},
												{
													"source": {
														"name": "TotSvcTaxes",
														"type": "Decimal"
													},
													"sink": {
														"name": "TOTSVCTAXES",
														"type": "Int64"
													}
												},
												{
													"source": {
														"name": "TotFinCharges",
														"type": "Decimal"
													},
													"sink": {
														"name": "TOTFINCHARGES",
														"type": "Int64"
													}
												},
												{
													"source": {
														"name": "TotCharges",
														"type": "Decimal"
													},
													"sink": {
														"name": "TOTCHARGES",
														"type": "Int64"
													}
												},
												{
													"source": {
														"name": "TotChargeTaxes",
														"type": "Decimal"
													},
													"sink": {
														"name": "TOTCHARGETAXES",
														"type": "Int64"
													}
												},
												{
													"source": {
														"name": "TotCredits",
														"type": "Decimal"
													},
													"sink": {
														"name": "TOTCREDITS",
														"type": "Int64"
													}
												},
												{
													"source": {
														"name": "TotCreditTaxes",
														"type": "Decimal"
													},
													"sink": {
														"name": "TOTCREDITTAXES",
														"type": "Int64"
													}
												},
												{
													"source": {
														"name": "TotPayments",
														"type": "Decimal"
													},
													"sink": {
														"name": "TOTPAYMENTS",
														"type": "Int64"
													}
												},
												{
													"source": {
														"name": "AutomaticPaymentType",
														"type": "Int16"
													},
													"sink": {
														"name": "AUTOMATICPAYMENTTYPE",
														"type": "Int64"
													}
												},
												{
													"source": {
														"name": "CompanyID",
														"type": "String"
													},
													"sink": {
														"name": "COMPANYID",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "InvoiceMailingOption",
														"type": "Int16"
													},
													"sink": {
														"name": "INVOICEMAILINGOPTION",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "InvoiceInsert",
														"type": "String"
													},
													"sink": {
														"name": "INVOICEINSERT",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "ExternalInvoiceNbr",
														"type": "String"
													},
													"sink": {
														"name": "EXTERNALINVOICENBR",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "InvoiceDetailFormat",
														"type": "Int16"
													},
													"sink": {
														"name": "INVOICEDETAILFORMAT",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "LineOfBusiness",
														"type": "String"
													},
													"sink": {
														"name": "LINEOFBUSINESS",
														"type": "String"
													}
												}
											]
										}
									},
									"inputs": [
										{
											"referenceName": "MSAZ01_TOWER",
											"type": "DatasetReference",
											"parameters": {
												"db": "Tower7",
												"schema": "dbo",
												"table": "INVOICE"
											}
										}
									],
									"outputs": [
										{
											"referenceName": "LRS_Snowflake_Raw_IR_V2",
											"type": "DatasetReference",
											"parameters": {
												"Snowflake_Sink_Table": "INVOICE_STAGING",
												"Snowflake_Schema": "TOWER_RAW"
											}
										}
									]
								},
								{
									"name": "Create staging for Invoice",
									"type": "Script",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "LRS_Snowflake_V2",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"type": "Query",
												"text": {
													"value": "@{concat(\n    'Create or replace table LRS_RAW.TOWER_RAW.INVOICE_STAGING',\n    ' as select * from  \n    LRS_RAW.TOWER_RAW.INVOICE where 1=0'\n    )\n    }",
													"type": "Expression"
												}
											}
										],
										"scriptBlockExecutionTimeout": "02:00:00"
									}
								},
								{
									"name": "Invoice Snowflake Merge Operation",
									"description": "merge statement to the raw tables. this helps avoids any duplication and upsert the rows needed.",
									"type": "Script",
									"dependsOn": [
										{
											"activity": "Invoice Delta Load",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "LRS_Snowflake_V2",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"type": "Query",
												"text": {
													"value": "@{concat('merge into LRS_RAW.TOWER_RAW.INVOICE t \nusing \n    TOWER_RAW.INVOICE_STAGING s \non t.INVOICEUID= s.INVOICEUID  \nwhen matched then update set \n\tt.invoiceuid = s.invoiceuid ,\n\tt.invoiceid = s.invoiceid ,\n\tt.status = s. status,\n\tt.invoicecontent = s.invoicecontent ,\n\tt.printinvoice = s.printinvoice ,\n\tt.invoiceorderkey = s.invoiceorderkey ,\n\tt.billbatchuid = s.billbatchuid ,\n\tt.billcustid = s.billcustid ,\n\tt.billsiteid = s.billsiteid ,\n\tt.billname = s.billname ,\n\tt.billcontact= s.billcontact ,\n\tt.billaddressuid = s.billaddressuid ,\n\tt.billphone = s.billphone ,\n\tt.billfax = s.billfax ,\n\tt.billemail = s.billemail ,\n\tt.siteaddressuid = s.siteaddressuid ,\n\tt.invoicedate = s.invoicedate ,\n\tt.lastinvoicedate = s.lastinvoicedate ,\n\tt.duedate = s.duedate ,\n\tt.financechargethrudate = s.financechargethrudate ,\n\tt.custclass = s.custclass ,\n\tt.balforward = s.balforward ,\n\tt.agingbal00 = s.agingbal00 ,\n\tt.agingbal01 = s.agingbal01 ,\n\tt.agingbal02 = s.agingbal02 ,\n\tt.agingbal03 = s.agingbal03 ,\n\tt.agingbal04 = s.agingbal04 ,\n\tt.newbalance = s.newbalance ,\n\tt.totsvconetime = s.totsvconetime ,\n\tt.totsvcrecurring = s.totsvcrecurring ,\n\tt.totsvconcall = s.totsvconcall ,\n\tt.totsvctaxes = s.totsvctaxes ,\n\tt.totfincharges = s.totfincharges ,\n\tt.totcharges = s.totcharges ,\n\tt.totchargetaxes = s.totchargetaxes ,\n\tt.totcredits = s.totcredits ,\n\tt.totcredittaxes = s.totcredittaxes ,\n\tt.totpayments = s.totpayments ,\n\tt.automaticpaymenttype = s.automaticpaymenttype ,\n\tt.companyid = s.companyid ,\n\tt.invoicemailingoption = s.invoicemailingoption ,\n\tt.invoiceinsert = s.invoiceinsert ,\n\tt.externalinvoicenbr = s.externalinvoicenbr ,\n\tt.invoicedetailformat = s.invoicedetailformat ,\n\tt.lineofbusiness =s.lineofbusiness \nwhen not matched then insert \n\t( \n\tt.invoiceuid ,\n\tt.invoiceid ,\n\tt.status ,\n\tt.invoicecontent ,\n\tt.printinvoice ,\n\tt.invoiceorderkey ,\n\tt.billbatchuid ,\n\tt.billcustid ,\n\tt.billsiteid ,\n\tt.billname ,\n\tt.billcontact,\n\tt.billaddressuid ,\n\tt.billphone ,\n\tt.billfax ,\n\tt.billemail ,\n\tt.siteaddressuid ,\n\tt.invoicedate ,\n\tt.lastinvoicedate ,\n\tt.duedate ,\n\tt.financechargethrudate ,\n\tt.custclass ,\n\tt.balforward ,\n\tt.agingbal00 ,\n\tt.agingbal01 ,\n\tt.agingbal02 ,\n\tt.agingbal03 ,\n\tt.agingbal04 ,\n\tt.newbalance ,\n\tt.totsvconetime ,\n\tt.totsvcrecurring ,\n\tt.totsvconcall ,\n\tt.totsvctaxes ,\n\tt.totfincharges ,\n\tt.totcharges ,\n\tt.totchargetaxes ,\n\tt.totcredits ,\n\tt.totcredittaxes ,\n\tt.totpayments ,\n\tt.automaticpaymenttype ,\n\tt.companyid ,\n\tt.invoicemailingoption ,\n\tt.invoiceinsert ,\n\tt.externalinvoicenbr ,\n\tt.invoicedetailformat ,\n\tt.lineofbusiness \n\t)\nvalues \n\t(\n\ts.invoiceuid ,\n\ts.invoiceid ,\n\ts.status ,\n\ts.invoicecontent ,\n\ts.printinvoice ,\n\ts.invoiceorderkey ,\n\ts.billbatchuid ,\n\ts.billcustid ,\n\ts.billsiteid ,\n\ts.billname ,\n\ts.billcontact,\n\ts.billaddressuid ,\n\ts.billphone ,\n\ts.billfax ,\n\ts.billemail ,\n\ts.siteaddressuid ,\n\ts.invoicedate ,\n\ts.lastinvoicedate ,\n\ts.duedate ,\n\ts.financechargethrudate ,\n\ts.custclass ,\n\ts.balforward ,\n\ts.agingbal00 ,\n\ts.agingbal01 ,\n\ts.agingbal02 ,\n\ts.agingbal03 ,\n\ts.agingbal04 ,\n\ts.newbalance ,\n\ts.totsvconetime ,\n\ts.totsvcrecurring ,\n\ts.totsvconcall ,\n\ts.totsvctaxes ,\n\ts.totfincharges ,\n\ts.totcharges ,\n\ts.totchargetaxes ,\n\ts.totcredits ,\n\ts.totcredittaxes ,\n\ts.totpayments ,\n\ts.automaticpaymenttype ,\n\ts.companyid ,\n\ts.invoicemailingoption ,\n\ts.invoiceinsert ,\n\ts.externalinvoicenbr ,\n\ts.invoicedetailformat ,\n\ts.lineofbusiness)'\n\t)}\n",
													"type": "Expression"
												}
											}
										],
										"scriptBlockExecutionTimeout": "02:00:00"
									}
								},
								{
									"name": "Drop staging table for Invoice",
									"type": "Script",
									"dependsOn": [
										{
											"activity": "Invoice Snowflake Merge Operation",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "LRS_Snowflake_V2",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"type": "Query",
												"text": {
													"value": "@{concat(\n    'Drop table LRS_RAW.TOWER_RAW.INVOICE_STAGING'\n    )\n}",
													"type": "Expression"
												}
											}
										],
										"scriptBlockExecutionTimeout": "02:00:00"
									}
								},
								{
									"name": "Create staging for Service History",
									"type": "Script",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "LRS_Snowflake_V2",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"type": "Query",
												"text": {
													"value": "@{concat(\n    'Create or replace table LRS_RAW.TOWER_RAW.SERVICEHISTORY_STAGING',\n    ' as select * from  \n    LRS_RAW.TOWER_RAW.SERVICEHISTORY where 1=0'\n    )\n    }",
													"type": "Expression"
												}
											}
										],
										"scriptBlockExecutionTimeout": "02:00:00"
									}
								},
								{
									"name": "Service History Delta Load",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "Create staging for Service History",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SqlServerSource",
											"sqlReaderQuery": {
												"value": "@{concat(\n    'select * from SERVICEHISTORY \n    where SERVICEDATE > (SELECT MAX(SERVICEDATE) FROM SERVICEHISTORY) -' , \n  pipeline().parameters.Incremental_Range3\n    )\n}\n",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"sink": {
											"type": "SnowflakeV2Sink",
											"importSettings": {
												"type": "SnowflakeImportCopyCommand",
												"additionalCopyOptions": {
													"ON_ERROR": "CONTINUE"
												}
											}
										},
										"enableStaging": true,
										"stagingSettings": {
											"linkedServiceName": {
												"referenceName": "msaz01_dm01_Azure_Blob",
												"type": "LinkedServiceReference"
											},
											"path": "staging",
											"enableCompression": true
										},
										"enableSkipIncompatibleRow": true,
										"logSettings": {
											"enableCopyActivityLog": true,
											"copyActivityLogSettings": {
												"logLevel": "Warning",
												"enableReliableLogging": false
											},
											"logLocationSettings": {
												"linkedServiceName": {
													"referenceName": "msaz01_dm01_Azure_Blob",
													"type": "LinkedServiceReference"
												}
											}
										},
										"translator": {
											"type": "TabularTranslator",
											"mappings": [
												{
													"source": {
														"name": "ServiceHistoryUID",
														"type": "Guid"
													},
													"sink": {
														"name": "SERVICEHISTORYUID",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "ServiceHistoryType",
														"type": "Int16"
													},
													"sink": {
														"name": "SERVICEHISTORYTYPE",
														"type": "Int64"
													}
												},
												{
													"source": {
														"name": "WorkflowCode",
														"type": "String"
													},
													"sink": {
														"name": "WORKFLOWCODE",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "ServiceQueue",
														"type": "String"
													},
													"sink": {
														"name": "SERVICEQUEUE",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "SourceUID",
														"type": "Guid"
													},
													"sink": {
														"name": "SOURCEUID",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "ServiceOrderID",
														"type": "String"
													},
													"sink": {
														"name": "SERVICEORDERID",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "ServiceInfoUID",
														"type": "Guid"
													},
													"sink": {
														"name": "SERVICEINFOUID",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "ServiceScheduleUID",
														"type": "Guid"
													},
													"sink": {
														"name": "SERVICESCHEDULEUID",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "RescheduledHistoryUID",
														"type": "Guid"
													},
													"sink": {
														"name": "RESCHEDULEDHISTORYUID",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "Status",
														"type": "Int16"
													},
													"sink": {
														"name": "STATUS",
														"type": "Int64"
													}
												},
												{
													"source": {
														"name": "ReleasedToBilling",
														"type": "Int16"
													},
													"sink": {
														"name": "RELEASEDTOBILLING",
														"type": "Int64"
													}
												},
												{
													"source": {
														"name": "ReasonNote",
														"type": "String"
													},
													"sink": {
														"name": "REASONNOTE",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "Route",
														"type": "String"
													},
													"sink": {
														"name": "ROUTE",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "RouteSequence",
														"type": "Decimal"
													},
													"sink": {
														"name": "ROUTESEQUENCE",
														"type": "Int64"
													}
												},
												{
													"source": {
														"name": "ServiceDate",
														"type": "DateTime"
													},
													"sink": {
														"name": "SERVICEDATE",
														"type": "DateTime"
													}
												},
												{
													"source": {
														"name": "StartTime",
														"type": "DateTime"
													},
													"sink": {
														"name": "STARTTIME",
														"type": "DateTime"
													}
												},
												{
													"source": {
														"name": "FinishTime",
														"type": "DateTime"
													},
													"sink": {
														"name": "FINISHTIME",
														"type": "DateTime"
													}
												},
												{
													"source": {
														"name": "ServiceNote",
														"type": "String"
													},
													"sink": {
														"name": "SERVICENOTE",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "WorkOrderID",
														"type": "String"
													},
													"sink": {
														"name": "WORKORDERID",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "Quantity",
														"type": "Decimal"
													},
													"sink": {
														"name": "QUANTITY",
														"type": "Int64"
													}
												},
												{
													"source": {
														"name": "RequestedStartTime",
														"type": "Int16"
													},
													"sink": {
														"name": "REQUESTEDSTARTTIME",
														"type": "Int64"
													}
												},
												{
													"source": {
														"name": "RequestedEndTime",
														"type": "Int16"
													},
													"sink": {
														"name": "REQUESTEDENDTIME",
														"type": "Int64"
													}
												},
												{
													"source": {
														"name": "LaborCost",
														"type": "Decimal"
													},
													"sink": {
														"name": "LABORCOST",
														"type": "Int64"
													}
												},
												{
													"source": {
														"name": "NonLaborCost",
														"type": "Decimal"
													},
													"sink": {
														"name": "NONLABORCOST",
														"type": "Int64"
													}
												},
												{
													"source": {
														"name": "OriginalServiceDate",
														"type": "DateTime"
													},
													"sink": {
														"name": "ORIGINALSERVICEDATE",
														"type": "DateTime"
													}
												},
												{
													"source": {
														"name": "GPSVerified",
														"type": "Int16"
													},
													"sink": {
														"name": "GPSVERIFIED",
														"type": "Int64"
													}
												},
												{
													"source": {
														"name": "Latitude",
														"type": "Decimal"
													},
													"sink": {
														"name": "LATITUDE",
														"type": "Int64"
													}
												},
												{
													"source": {
														"name": "LiftArmUsed",
														"type": "Int16"
													},
													"sink": {
														"name": "LIFTARMUSED",
														"type": "Int64"
													}
												},
												{
													"source": {
														"name": "Longitude",
														"type": "Decimal"
													},
													"sink": {
														"name": "LONGITUDE",
														"type": "Int64"
													}
												},
												{
													"source": {
														"name": "AllocatedRevenue",
														"type": "Decimal"
													},
													"sink": {
														"name": "ALLOCATEDREVENUE",
														"type": "Int64"
													}
												},
												{
													"source": {
														"name": "DriverNotified",
														"type": "Int16"
													},
													"sink": {
														"name": "DRIVERNOTIFIED",
														"type": "Int64"
													}
												},
												{
													"source": {
														"name": "DisposalTripUID",
														"type": "Guid"
													},
													"sink": {
														"name": "DISPOSALTRIPUID",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "OriginalWorkflowCode",
														"type": "String"
													},
													"sink": {
														"name": "ORIGINALWORKFLOWCODE",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "UpsRoadNetSyncNotificationStatus",
														"type": "Int16"
													},
													"sink": {
														"name": "UPSROADNETSYNCNOTIFICATIONSTATUS",
														"type": "Int64"
													}
												},
												{
													"source": {
														"name": "GeocodeDifference",
														"type": "Int32"
													},
													"sink": {
														"name": "GEOCODEDIFFERENCE",
														"type": "Int64"
													}
												},
												{
													"source": {
														"name": "GeocodeUpdate",
														"type": "Int16"
													},
													"sink": {
														"name": "GEOCODEUPDATE",
														"type": "Int64"
													}
												},
												{
													"source": {
														"name": "AllocatedRebate",
														"type": "Decimal"
													},
													"sink": {
														"name": "ALLOCATEDREBATE",
														"type": "Int64"
													}
												},
												{
													"source": {
														"name": "PercentFull",
														"type": "Decimal"
													},
													"sink": {
														"name": "PERCENTFULL",
														"type": "Int64"
													}
												},
												{
													"source": {
														"name": "CompletionSequence",
														"type": "Int32"
													},
													"sink": {
														"name": "COMPLETIONSEQUENCE",
														"type": "Int64"
													}
												},
												{
													"source": {
														"name": "Odometer",
														"type": "Decimal"
													},
													"sink": {
														"name": "ODOMETER",
														"type": "Int64"
													}
												},
												{
													"source": {
														"name": "RecurringRevenue",
														"type": "Decimal"
													},
													"sink": {
														"name": "RECURRINGREVENUE",
														"type": "Int64"
													}
												},
												{
													"source": {
														"name": "Surcharges",
														"type": "Decimal"
													},
													"sink": {
														"name": "SURCHARGES",
														"type": "Int64"
													}
												},
												{
													"source": {
														"name": "WorkorderRevenue",
														"type": "Decimal"
													},
													"sink": {
														"name": "WORKORDERREVENUE",
														"type": "Int64"
													}
												},
												{
													"source": {
														"name": "ThirdPartyServiceCost",
														"type": "Decimal"
													},
													"sink": {
														"name": "THIRDPARTYSERVICECOST",
														"type": "Int64"
													}
												},
												{
													"source": {
														"name": "ThirdPartyWorkorderCost",
														"type": "Decimal"
													},
													"sink": {
														"name": "THIRDPARTYWORKORDERCOST",
														"type": "Int64"
													}
												},
												{
													"source": {
														"name": "HolidayScheduleUID",
														"type": "Guid"
													},
													"sink": {
														"name": "HOLIDAYSCHEDULEUID",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "SerialNbr",
														"type": "String"
													},
													"sink": {
														"name": "SERIALNBR",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "syncRowVersion",
														"type": "Byte[]"
													},
													"sink": {
														"name": "SYNCROWVERSION",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "WorkStartTime",
														"type": "DateTime"
													},
													"sink": {
														"name": "WORKSTARTTIME",
														"type": "DateTime"
													}
												},
												{
													"source": {
														"name": "WorkStopTime",
														"type": "DateTime"
													},
													"sink": {
														"name": "WORKSTOPTIME",
														"type": "DateTime"
													}
												},
												{
													"source": {
														"name": "RouteSubsectionUID",
														"type": "Guid"
													},
													"sink": {
														"name": "ROUTESUBSECTIONUID",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "ThirdPartyPONbr",
														"type": "String"
													},
													"sink": {
														"name": "THIRDPARTYPONBR",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "ThirdPartyServiceProvider",
														"type": "String"
													},
													"sink": {
														"name": "THIRDPARTYSERVICEPROVIDER",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "CompletedByVehicle",
														"type": "String"
													},
													"sink": {
														"name": "COMPLETEDBYVEHICLE",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "PickupEquivalent",
														"type": "Int32"
													},
													"sink": {
														"name": "PICKUPEQUIVALENT",
														"type": "Int64"
													}
												},
												{
													"source": {
														"name": "PickupEquivalentAdjustment",
														"type": "Int32"
													},
													"sink": {
														"name": "PICKUPEQUIVALENTADJUSTMENT",
														"type": "Int64"
													}
												},
												{
													"source": {
														"name": "PickupEquivalentIsBilled",
														"type": "Boolean"
													},
													"sink": {
														"name": "PICKUPEQUIVALENTISBILLED",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "StatusSource",
														"type": "Int16"
													},
													"sink": {
														"name": "STATUSSOURCE",
														"type": "Int64"
													}
												}
											]
										}
									},
									"inputs": [
										{
											"referenceName": "MSAZ01_TOWER",
											"type": "DatasetReference",
											"parameters": {
												"db": "Tower7",
												"schema": "dbo",
												"table": "SERVICEHISTORY"
											}
										}
									],
									"outputs": [
										{
											"referenceName": "LRS_Snowflake_Raw_IR_V2",
											"type": "DatasetReference",
											"parameters": {
												"Snowflake_Sink_Table": "SERVICEHISTORY_STAGING",
												"Snowflake_Schema": "TOWER_RAW"
											}
										}
									]
								},
								{
									"name": "Service History Snowflake Merge Operation",
									"description": "merge statement to the raw tables. this helps avoids any duplication and upsert the rows needed.",
									"type": "Script",
									"dependsOn": [
										{
											"activity": "Service History Delta Load",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "LRS_Snowflake_V2",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"type": "Query",
												"text": {
													"value": "@{concat('merge into LRS_RAW.TOWER_RAW. SERVICEHISTORY t \nusing \n    TOWER_RAW.SERVICEHISTORY_STAGING s \non t.SERVICEHISTORYUID= s.SERVICEHISTORYUID \nwhen matched then update set\nt.ServiceHistoryUID= s.ServiceHistoryUID,\n      t.ServiceHistoryType= s.ServiceHistoryType,\n      t.WorkflowCode= s.WorkflowCode,\n      t.ServiceQueue= s.ServiceQueue,\n      t.SourceUID= s.SourceUID,\n      t.ServiceOrderID= s.ServiceOrderID,\n      t.ServiceInfoUID= s.ServiceInfoUID,\n      t.ServiceScheduleUID= s.ServiceScheduleUID,\n      t.RescheduledHistoryUID= s.RescheduledHistoryUID,\n      t.Status= s.Status,\n      t.ReleasedToBilling= s.ReleasedToBilling,\n      t.ReasonNote= s.ReasonNote,\n      t.Route= s.Route,\n      t.RouteSequence= s.RouteSequence,\n      t.ServiceDate= s.ServiceDate,\n      t.StartTime= s.StartTime,\n      t.FinishTime= s.FinishTime,\n      t.ServiceNote= s.ServiceNote,\n      t.WorkOrderID= s.WorkOrderID,\n      t.Quantity= s.Quantity,\n      t.RequestedStartTime= s.RequestedStartTime,\n      t.RequestedEndTime= s.RequestedEndTime,   \n      t.LaborCost= s. LaborCost,\n      t.NonLaborCost= s.NonLaborCost,\n      t.OriginalServiceDate= s.OriginalServiceDate,\n      t.GPSVerified= s.GPSVerified,\n      t.Latitude= s.Latitude,\n      t.LiftArmUsed= s.LiftArmUsed,\n      t.Longitude= s.Longitude,\n      t.AllocatedRevenue= s.AllocatedRevenue,\n      t.DriverNotified= s.DriverNotified,\n      t.DisposalTripUID= s.DisposalTripUID,\n      t.OriginalWorkflowCode= s.OriginalWorkflowCode,\n      t.UpsRoadNetSyncNotificationStatus= s.UpsRoadNetSyncNotificationStatus,\n      t.GeocodeDifference= s.GeocodeDifference,\n      t.GeocodeUpdate= s.GeocodeUpdate,\n      t.AllocatedRebate= s.AllocatedRebate,\n      t.PercentFull= s.PercentFull,\n      t.CompletionSequence= s.CompletionSequence,\n      t.Odometer= s.Odometer,\n      t.RecurringRevenue= s.RecurringRevenue,\n      t.Surcharges= s.Surcharges,\n      t.WorkorderRevenue= s.WorkorderRevenue,\n      t.ThirdPartyServiceCost= s.ThirdPartyServiceCost,\n      t.ThirdPartyWorkorderCost= s.ThirdPartyWorkorderCost,\n      t.HolidayScheduleUID= s.HolidayScheduleUID,\n      t.SerialNbr= s.SerialNbr,\n      t.syncRowVersion= s.syncRowVersion,\n      t.WorkStartTime= s.WorkStartTime,\n      t.WorkStopTime= s.WorkStopTime,\n      t.RouteSubsectionUID= s.RouteSubsectionUID,\n      t.ThirdPartyPONbr= s.ThirdPartyPONbr,\n      t.ThirdPartyServiceProvider= s.ThirdPartyServiceProvider,\n      t.CompletedByVehicle= s.CompletedByVehicle,\n      t.PickupEquivalent= s.PickupEquivalent,\n      t.PickupEquivalentAdjustment= s.PickupEquivalentAdjustment,\n      t.PickupEquivalentIsBilled= s.PickupEquivalentIsBilled,\n      t.StatusSource = s.StatusSource \nwhen not matched then insert \n    ( \nt.ServiceHistoryUID,\n      t.ServiceHistoryType,\n      t.WorkflowCode,\n      t.ServiceQueue,\n      t.SourceUID,\n      t.ServiceOrderID,\n      t.ServiceInfoUID,\n      t.ServiceScheduleUID,\n      t.RescheduledHistoryUID,\n      t.Status,\n      t.ReleasedToBilling,\n      t.ReasonNote,\n      t.Route,\n      t.RouteSequence,\n      t.ServiceDate,\n      t.StartTime,\n      t.FinishTime,\n      t.ServiceNote,\n      t.WorkOrderID,\n      t.Quantity,\n      t.RequestedStartTime,\n      t.RequestedEndTime,\n      t.LaborCost,\n      t.NonLaborCost,\n      t.OriginalServiceDate,\n      t.GPSVerified,\n      t.Latitude,\n      t.LiftArmUsed,\n      t.Longitude,\n      t.AllocatedRevenue,\n      t.DriverNotified,\n      t.DisposalTripUID,\n      t.OriginalWorkflowCode,\n      t.UpsRoadNetSyncNotificationStatus,\n      t.GeocodeDifference,\n      t.GeocodeUpdate,\n      t.AllocatedRebate,\n      t.PercentFull,\n      t.CompletionSequence,\n      t.Odometer,\n      t.RecurringRevenue,\n      t.Surcharges,\n      t.WorkorderRevenue,\n      t.ThirdPartyServiceCost,\n      t.ThirdPartyWorkorderCost,\n      t.HolidayScheduleUID,\n      t.SerialNbr,\n      t.syncRowVersion,\n      t.WorkStartTime,\n      t.WorkStopTime,\n      t.RouteSubsectionUID,\n      t.ThirdPartyPONbr,\n      t.ThirdPartyServiceProvider,\n      t.CompletedByVehicle,\n      t.PickupEquivalent,\n      t.PickupEquivalentAdjustment,\n      t.PickupEquivalentIsBilled,\n      t.StatusSource\n)\nValues\n(\ns.ServiceHistoryUID,\n      s.ServiceHistoryType,\n      s.WorkflowCode,\n      s.ServiceQueue,\n      s.SourceUID,\n      s.ServiceOrderID,\n      s.ServiceInfoUID,\n      s.ServiceScheduleUID,\n      s.RescheduledHistoryUID,\n      s.Status,\n      s.ReleasedToBilling,\n      s.ReasonNote,\n      s.Route,\n      s.RouteSequence,\n      s.ServiceDate,\n      s.StartTime,\n      s.FinishTime,\n      s.ServiceNote,\n      s.WorkOrderID,\n      s.Quantity,\n      s.RequestedStartTime,\n      s.RequestedEndTime,\n      s.LaborCost,\n      s.NonLaborCost,\n      s.OriginalServiceDate,\n      s.GPSVerified,\n      s.Latitude,\n      s.LiftArmUsed,\n      s.Longitude,\n      s.AllocatedRevenue,\n      s.DriverNotified,\n      s.DisposalTripUID,\n      s.OriginalWorkflowCode,\n      s.UpsRoadNetSyncNotificationStatus,\n      s.GeocodeDifference,\n      s.GeocodeUpdate,\n      s.AllocatedRebate,\n      s.PercentFull,\n      s.CompletionSequence,\n      s.Odometer,\n      s.RecurringRevenue,\n      s.Surcharges,\n      s.WorkorderRevenue,\n      s.ThirdPartyServiceCost,\n      s.ThirdPartyWorkorderCost,\n      s.HolidayScheduleUID,\n      s.SerialNbr,\n      s.syncRowVersion,\n      s.WorkStartTime,\n      s.WorkStopTime,\n      s.RouteSubsectionUID,\n      s.ThirdPartyPONbr,\n      s.ThirdPartyServiceProvider,\n      s.CompletedByVehicle,\n      s.PickupEquivalent,\n      s.PickupEquivalentAdjustment,\n      s.PickupEquivalentIsBilled,\n      s.StatusSource)'\n)}\n",
													"type": "Expression"
												}
											}
										],
										"scriptBlockExecutionTimeout": "02:00:00"
									}
								},
								{
									"name": "Drop staging table for Service History",
									"type": "Script",
									"dependsOn": [
										{
											"activity": "Service History Snowflake Merge Operation",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "LRS_Snowflake_V2",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"type": "Query",
												"text": {
													"value": "@{concat(\n    'Drop table LRS_RAW.TOWER_RAW.SERVICEHISTORY_STAGING'\n    )\n}",
													"type": "Expression"
												}
											}
										],
										"scriptBlockExecutionTimeout": "02:00:00"
									}
								}
							]
						}
					},
					{
						"name": "ID Incremental Loop",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Tower Table Names",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Tower Table Names').output.value",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "WorkOrder ID Delta Load",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SqlServerSource",
											"sqlReaderQuery": {
												"value": "select * from Workorder \nwhere workorderid >  @{item().WORKORDER}\n",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"sink": {
											"type": "SnowflakeV2Sink",
											"importSettings": {
												"type": "SnowflakeImportCopyCommand",
												"additionalCopyOptions": {
													"ON_ERROR": "CONTINUE"
												}
											}
										},
										"enableStaging": true,
										"stagingSettings": {
											"linkedServiceName": {
												"referenceName": "msaz01_dm01_Azure_Blob",
												"type": "LinkedServiceReference"
											},
											"path": "staging",
											"enableCompression": true
										},
										"enableSkipIncompatibleRow": true,
										"logSettings": {
											"enableCopyActivityLog": true,
											"copyActivityLogSettings": {
												"logLevel": "Warning",
												"enableReliableLogging": false
											},
											"logLocationSettings": {
												"linkedServiceName": {
													"referenceName": "msaz01_dm01_Azure_Blob",
													"type": "LinkedServiceReference"
												}
											}
										},
										"translator": {
											"type": "TabularTranslator",
											"mappings": [
												{
													"source": {
														"name": "WorkOrderID",
														"type": "String"
													},
													"sink": {
														"name": "WORKORDERID",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "WorkOrderUID",
														"type": "Guid"
													},
													"sink": {
														"name": "WORKORDERUID",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "WorkPONbr",
														"type": "String"
													},
													"sink": {
														"name": "WORKPONBR",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "DestCertificate",
														"type": "String"
													},
													"sink": {
														"name": "DESTCERTIFICATE",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "CODRequired",
														"type": "Int16"
													},
													"sink": {
														"name": "CODREQUIRED",
														"type": "Int64"
													}
												},
												{
													"source": {
														"name": "CustomerDataFileUID",
														"type": "Guid"
													},
													"sink": {
														"name": "CUSTOMERDATAFILEUID",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "InvoiceMessage",
														"type": "String"
													},
													"sink": {
														"name": "INVOICEMESSAGE",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "Printed",
														"type": "Int16"
													},
													"sink": {
														"name": "PRINTED",
														"type": "Int64"
													}
												},
												{
													"source": {
														"name": "PrintDate",
														"type": "DateTime"
													},
													"sink": {
														"name": "PRINTDATE",
														"type": "DateTime"
													}
												},
												{
													"source": {
														"name": "PrintUser",
														"type": "String"
													},
													"sink": {
														"name": "PRINTUSER",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "Destination",
														"type": "String"
													},
													"sink": {
														"name": "DESTINATION",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "ServiceQuantity",
														"type": "Decimal"
													},
													"sink": {
														"name": "SERVICEQUANTITY",
														"type": "Int64"
													}
												},
												{
													"source": {
														"name": "ServiceUOM",
														"type": "String"
													},
													"sink": {
														"name": "SERVICEUOM",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "ReferenceNumber",
														"type": "String"
													},
													"sink": {
														"name": "REFERENCENUMBER",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "TagNumber",
														"type": "String"
													},
													"sink": {
														"name": "TAGNUMBER",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "FinalManifestDate",
														"type": "DateTime"
													},
													"sink": {
														"name": "FINALMANIFESTDATE",
														"type": "DateTime"
													}
												},
												{
													"source": {
														"name": "IsNoChargePickup",
														"type": "Boolean"
													},
													"sink": {
														"name": "ISNOCHARGEPICKUP",
														"type": "String"
													}
												}
											]
										}
									},
									"inputs": [
										{
											"referenceName": "MSAZ01_TOWER",
											"type": "DatasetReference",
											"parameters": {
												"db": "Tower7",
												"schema": "dbo",
												"table": "WORKORDER"
											}
										}
									],
									"outputs": [
										{
											"referenceName": "LRS_Snowflake_Raw_IR_V2",
											"type": "DatasetReference",
											"parameters": {
												"Snowflake_Sink_Table": "WORKORDER",
												"Snowflake_Schema": "TOWER_RAW"
											}
										}
									]
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"Incremental_Range": {
						"type": "string",
						"defaultValue": "14"
					},
					"Incremental_Range2": {
						"type": "string",
						"defaultValue": "500"
					},
					"Incremental_Range3": {
						"type": "string",
						"defaultValue": "50"
					}
				},
				"folder": {
					"name": "Production/TOWER"
				},
				"annotations": [],
				"lastPublishTime": "2024-08-30T18:09:47Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/TOWER_INCREMENTAL_LOAD_FACT_DC')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Tower Table Names",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SnowflakeV2Source",
								"exportSettings": {
									"type": "SnowflakeExportCopyCommand"
								}
							},
							"dataset": {
								"referenceName": "LRS_Snowflake_Raw_V2",
								"type": "DatasetReference",
								"parameters": {
									"Snowflake_Sink_Table": "VW_TOWER_WATERMARK_PVT",
									"Snowflake_Schema": "MASTER_DATA"
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "DateTime Incremental Loop",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Tower Table Names",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Tower Table Names').output.value",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Ardetail Delta Load",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "Create staging for ARDetail",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SqlServerSource",
											"sqlReaderQuery": {
												"value": "@{concat(\n    'select * from ARdetail where createddatetime > DATEADD(day,-', \n    pipeline().parameters.Incremental_Range,\n    ', GETDATE())'\n    )\n}\n",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"sink": {
											"type": "SnowflakeV2Sink",
											"importSettings": {
												"type": "SnowflakeImportCopyCommand",
												"additionalCopyOptions": {
													"ON_ERROR": "CONTINUE"
												}
											}
										},
										"enableStaging": true,
										"stagingSettings": {
											"linkedServiceName": {
												"referenceName": "msaz01_dm01_Azure_Blob",
												"type": "LinkedServiceReference"
											},
											"path": "staging"
										},
										"enableSkipIncompatibleRow": true,
										"logSettings": {
											"enableCopyActivityLog": true,
											"copyActivityLogSettings": {
												"logLevel": "Warning",
												"enableReliableLogging": false
											},
											"logLocationSettings": {
												"linkedServiceName": {
													"referenceName": "msaz01_dm01_Azure_Blob",
													"type": "LinkedServiceReference"
												}
											}
										},
										"translator": {
											"type": "TabularTranslator",
											"mappings": [
												{
													"source": {
														"name": "ARDETAILUID",
														"type": "String"
													},
													"sink": {
														"name": "ARDETAILUID",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "SOURCEUID",
														"type": "String"
													},
													"sink": {
														"name": "SOURCEUID",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "STATUS",
														"type": "Int64"
													},
													"sink": {
														"name": "STATUS",
														"type": "Int64"
													}
												},
												{
													"source": {
														"name": "CUSTID",
														"type": "String"
													},
													"sink": {
														"name": "CUSTID",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "SITEID",
														"type": "String"
													},
													"sink": {
														"name": "SITEID",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "MATERIAL",
														"type": "String"
													},
													"sink": {
														"name": "MATERIAL",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "DETAILTYPE",
														"type": "Int64"
													},
													"sink": {
														"name": "DETAILTYPE",
														"type": "Int64"
													}
												},
												{
													"source": {
														"name": "TAX",
														"type": "String"
													},
													"sink": {
														"name": "TAX",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "DEBITACCT",
														"type": "String"
													},
													"sink": {
														"name": "DEBITACCT",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "CREDITACCT",
														"type": "String"
													},
													"sink": {
														"name": "CREDITACCT",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "PERIOD",
														"type": "String"
													},
													"sink": {
														"name": "PERIOD",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "INVOICEUID",
														"type": "String"
													},
													"sink": {
														"name": "INVOICEUID",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "TRANSACTIONDATE",
														"type": "DateTime"
													},
													"sink": {
														"name": "TRANSACTIONDATE",
														"type": "DateTime"
													}
												},
												{
													"source": {
														"name": "DUEDATE",
														"type": "DateTime"
													},
													"sink": {
														"name": "DUEDATE",
														"type": "DateTime"
													}
												},
												{
													"source": {
														"name": "GLEXPORTBATCHUID",
														"type": "String"
													},
													"sink": {
														"name": "GLEXPORTBATCHUID",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "QUANTITY",
														"type": "Int64"
													},
													"sink": {
														"name": "QUANTITY",
														"type": "Int64"
													}
												},
												{
													"source": {
														"name": "UNITRATE",
														"type": "Int64"
													},
													"sink": {
														"name": "UNITRATE",
														"type": "Int64"
													}
												},
												{
													"source": {
														"name": "ORIGINALAMOUNT",
														"type": "Int64"
													},
													"sink": {
														"name": "ORIGINALAMOUNT",
														"type": "Int64"
													}
												},
												{
													"source": {
														"name": "BALANCE",
														"type": "Int64"
													},
													"sink": {
														"name": "BALANCE",
														"type": "Int64"
													}
												},
												{
													"source": {
														"name": "BILLEDAPPLIEDAMOUNT",
														"type": "Int64"
													},
													"sink": {
														"name": "BILLEDAPPLIEDAMOUNT",
														"type": "Int64"
													}
												},
												{
													"source": {
														"name": "DISPLAYONINVOICE",
														"type": "Int64"
													},
													"sink": {
														"name": "DISPLAYONINVOICE",
														"type": "Int64"
													}
												},
												{
													"source": {
														"name": "DETAILSOURCE",
														"type": "Int64"
													},
													"sink": {
														"name": "DETAILSOURCE",
														"type": "Int64"
													}
												},
												{
													"source": {
														"name": "COMPANYID",
														"type": "String"
													},
													"sink": {
														"name": "COMPANYID",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "CREATEDDATETIME",
														"type": "DateTime"
													},
													"sink": {
														"name": "CREATEDDATETIME",
														"type": "DateTime"
													}
												},
												{
													"source": {
														"name": "CREDITACCTSEGTYPE",
														"type": "Int64"
													},
													"sink": {
														"name": "CREDITACCTSEGTYPE",
														"type": "Int64"
													}
												},
												{
													"source": {
														"name": "DEBITACCTSEGTYPE",
														"type": "Int64"
													},
													"sink": {
														"name": "DEBITACCTSEGTYPE",
														"type": "Int64"
													}
												}
											]
										}
									},
									"inputs": [
										{
											"referenceName": "MSAZ01_TOWER",
											"type": "DatasetReference",
											"parameters": {
												"db": "Tower7",
												"schema": "dbo",
												"table": "ARdetail"
											}
										}
									],
									"outputs": [
										{
											"referenceName": "LRS_Snowflake_Raw_IR_V2",
											"type": "DatasetReference",
											"parameters": {
												"Snowflake_Sink_Table": "ARDETAIL_STAGING",
												"Snowflake_Schema": "TOWER_RAW"
											}
										}
									]
								},
								{
									"name": "ARDetail Snowflake Merge Operation",
									"description": "merge statement to the raw tables. this helps avoids any duplication and upsert the rows needed.",
									"type": "Script",
									"dependsOn": [
										{
											"activity": "Ardetail Delta Load",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "LRS_Snowflake_V2",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"type": "Query",
												"text": {
													"value": "@{concat('merge into LRS_RAW.TOWER_RAW.ARDETAIL t \nusing \n    TOWER_RAW.ARDETAIL_STAGING s \non t.ardetailuid = s.ardetailuid  \nwhen matched then update set \n\tardetailuid = s.ardetailuid ,\n      t.sourceuid = s.sourceuid ,\n      t.status = s.status ,\n      t.custid = s.custid ,\n      t.siteid = s.siteid ,\n      t.material = s.material ,\n      t.detailtype = s.detailtype ,\n      t.tax = s.tax ,\n      t.debitacct = s.debitacct ,\n      t.creditacct = s.creditacct ,\n      t.period = s.period ,\n      t.invoiceuid = s.invoiceuid ,\n      t.transactiondate = s.transactiondate ,\n      t.duedate = s.duedate ,\n      t.glexportbatchuid = s.glexportbatchuid ,\n      t.quantity = s.quantity ,\n      t.unitrate = s.unitrate,\n      t.originalamount = s.originalamount ,\n      t.balance = s.balance ,\n      t.billedappliedamount = s.billedappliedamount ,\n      t.displayoninvoice = s.displayoninvoice ,\n      t.detailsource = s.detailsource ,\n      t.companyid = s. companyid ,\n      t.createddatetime = s.createddatetime ,\n      t.creditacctsegtype = s.creditacctsegtype ,\n      t.debitacctsegtype = s.debitacctsegtype \nwhen not matched then insert \n\t(\n\tardetailuid ,\n      t.sourceuid ,\n      t.status ,\n      t.custid ,\n      t.siteid ,\n      t.material ,\n      t.detailtype ,\n      t.tax ,\n      t.debitacct ,\n      t.creditacct ,\n      t.period ,\n      t.invoiceuid ,\n      t.transactiondate ,\n      t.duedate ,\n      t.glexportbatchuid ,\n      t.quantity ,\n      t.unitrate ,\n      t.originalamount ,\n      t.balance ,\n      t.billedappliedamount ,\n      t.displayoninvoice ,\n      t.detailsource ,\n      t.companyid ,\n      t.createddatetime ,\n      t.creditacctsegtype ,\n      t.debitacctsegtype \n\t)\nvalues \n\t(\n\t ardetailuid ,\n      s.sourceuid ,\n      s.status ,\n      s.custid ,\n      s.siteid ,\n      s.material ,\n      s.detailtype ,\n      s.tax ,\n      s.debitacct ,\n      s.creditacct ,\n      s.period ,\n      s.invoiceuid ,\n      s.transactiondate ,\n      s.duedate ,\n      s.glexportbatchuid ,\n      s.quantity ,\n      s.unitrate ,\n      s.originalamount ,\n      s.balance ,\n      s.billedappliedamount ,\n      s.displayoninvoice ,\n      s.detailsource ,\n      s.companyid ,\n      s.createddatetime ,\n      s.creditacctsegtype ,\n      s.debitacctsegtype)'\n\t)}\n",
													"type": "Expression"
												}
											}
										],
										"scriptBlockExecutionTimeout": "02:00:00"
									}
								},
								{
									"name": "Create staging for ARDetail",
									"type": "Script",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "LRS_Snowflake_V2",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"type": "Query",
												"text": {
													"value": "@{concat(\n    'Create or replace table LRS_RAW.TOWER_RAW.ARDETAIL_STAGING',\n    ' as select * from  \n    LRS_RAW.TOWER_RAW.ARDETAIL where 1=0'\n    )\n    }",
													"type": "Expression"
												}
											}
										],
										"scriptBlockExecutionTimeout": "02:00:00"
									}
								},
								{
									"name": "Drop staging table for AR Detail",
									"type": "Script",
									"dependsOn": [
										{
											"activity": "ARDetail Snowflake Merge Operation",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "LRS_Snowflake_V2",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"type": "Query",
												"text": {
													"value": "@{concat(\n    'Drop table LRS_RAW.TOWER_RAW.ARDETAIL_STAGING'\n    )\n}",
													"type": "Expression"
												}
											}
										],
										"scriptBlockExecutionTimeout": "02:00:00"
									}
								},
								{
									"name": "GLExportBatch Delta Load",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "Create staging for GLExportBatch",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SqlServerSource",
											"sqlReaderQuery": {
												"value": "@{concat(\n    'select * from GLEXPORTBATCH where exportdatetime > DATEADD(day,-', \n    pipeline().parameters.Incremental_Range,\n    ', GETDATE())'\n    )\n}\n",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"sink": {
											"type": "SnowflakeV2Sink",
											"importSettings": {
												"type": "SnowflakeImportCopyCommand",
												"additionalCopyOptions": {
													"ON_ERROR": "CONTINUE"
												}
											}
										},
										"enableStaging": true,
										"stagingSettings": {
											"linkedServiceName": {
												"referenceName": "msaz01_dm01_Azure_Blob",
												"type": "LinkedServiceReference"
											},
											"path": "staging"
										},
										"enableSkipIncompatibleRow": true,
										"logSettings": {
											"enableCopyActivityLog": true,
											"copyActivityLogSettings": {
												"logLevel": "Warning",
												"enableReliableLogging": false
											},
											"logLocationSettings": {
												"linkedServiceName": {
													"referenceName": "msaz01_dm01_Azure_Blob",
													"type": "LinkedServiceReference"
												}
											}
										},
										"translator": {
											"type": "TabularTranslator",
											"mappings": [
												{
													"source": {
														"name": "GLExportBatchUID",
														"type": "Guid"
													},
													"sink": {
														"name": "GLEXPORTBATCHUID",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "GLExportBatchID",
														"type": "String"
													},
													"sink": {
														"name": "GLEXPORTBATCHID",
														"type": "Int64"
													}
												},
												{
													"source": {
														"name": "ExportDateTime",
														"type": "DateTime"
													},
													"sink": {
														"name": "EXPORTDATETIME",
														"type": "DateTime"
													}
												},
												{
													"source": {
														"name": "Status",
														"type": "Int16"
													},
													"sink": {
														"name": "STATUS",
														"type": "Int64"
													}
												},
												{
													"source": {
														"name": "CreditTotal",
														"type": "Decimal"
													},
													"sink": {
														"name": "CREDITTOTAL",
														"type": "Int64"
													}
												},
												{
													"source": {
														"name": "DebitTotal",
														"type": "Decimal"
													},
													"sink": {
														"name": "DEBITTOTAL",
														"type": "Int64"
													}
												},
												{
													"source": {
														"name": "Description",
														"type": "String"
													},
													"sink": {
														"name": "DESCRIPTION",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "FileCount",
														"type": "Int32"
													},
													"sink": {
														"name": "FILECOUNT",
														"type": "Int64"
													}
												},
												{
													"source": {
														"name": "BatchType",
														"type": "Int16"
													},
													"sink": {
														"name": "BATCHTYPE",
														"type": "Int64"
													}
												},
												{
													"source": {
														"name": "CompanyID",
														"type": "String"
													},
													"sink": {
														"name": "COMPANYID",
														"type": "Int64"
													}
												},
												{
													"source": {
														"name": "Period",
														"type": "String"
													},
													"sink": {
														"name": "PERIOD",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "CompanyList",
														"type": "String"
													},
													"sink": {
														"name": "COMPANYLIST",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "PeriodList",
														"type": "String"
													},
													"sink": {
														"name": "PERIODLIST",
														"type": "String"
													}
												}
											]
										}
									},
									"inputs": [
										{
											"referenceName": "MSAZ01_TOWER",
											"type": "DatasetReference",
											"parameters": {
												"db": "Tower7",
												"schema": "dbo",
												"table": "GLEXPORTBATCH"
											}
										}
									],
									"outputs": [
										{
											"referenceName": "LRS_Snowflake_Raw_IR_V2",
											"type": "DatasetReference",
											"parameters": {
												"Snowflake_Sink_Table": "GLEXPORTBATCH_STAGING",
												"Snowflake_Schema": "TOWER_RAW"
											}
										}
									]
								},
								{
									"name": "GLExportBatch Snowflake Merge Operation",
									"description": "merge statement to the raw tables. this helps avoids any duplication and upsert the rows needed.",
									"type": "Script",
									"dependsOn": [
										{
											"activity": "GLExportBatch Delta Load",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "LRS_Snowflake_V2",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"type": "Query",
												"text": {
													"value": "@{concat('merge into LRS_RAW.TOWER_RAW.GLEXPORTBATCH t \nusing \n    TOWER_RAW.GLEXPORTBATCH_STAGING s \non t.GLEXPORTBATCHUID = s.GLEXPORTBATCHUID  \nwhen matched then update set \n\tt.glexportbatchuid = s.glexportbatchuid ,\n\tt.glexportbatchid = s.glexportbatchid,\n\tt.exportdatetime= s.exportdatetime ,\n\tt.status = s.status ,\n\tt.credittotal = s.credittotal ,\n\tt.debittotal = s.debittotal ,\n\tt.description = s.description ,\n\tt.filecount = s.filecount,\n\tt.batchtype = s.batchtype,\n\tt.companyid = s.companyid,\n\tt.period = s.period ,\n\tt.companylist = s.companylist ,\n\tt.periodlist = s.periodlist \nwhen not matched then insert \n\t(\n\tt.glexportbatchuid,\n\tt.glexportbatchid ,\n\tt.exportdatetime,\n\tt.status ,\n\tt.credittotal ,\n\tt.debittotal ,\n\tt.description ,\n\tt.filecount ,\n\tt.batchtype ,\n\tt.companyid ,\n\tt.period ,\n\tt.companylist ,\n\tt.periodlist \n\t)\nvalues \n\t(\n\ts.glexportbatchuid ,\n\ts.glexportbatchid ,\n\ts.exportdatetime,\n\ts.status ,\n\ts.credittotal ,\n\ts.debittotal ,\n\ts.description ,\n\ts.filecount ,\n\ts.batchtype ,\n\ts.companyid ,\n\ts.period ,\n\ts.companylist,\n\ts.periodlist)'\n\t)}\n",
													"type": "Expression"
												}
											}
										],
										"scriptBlockExecutionTimeout": "02:00:00"
									}
								},
								{
									"name": "Create staging for GLExportBatch",
									"type": "Script",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "LRS_Snowflake_V2",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"type": "Query",
												"text": {
													"value": "@{concat(\n    'Create or replace table LRS_RAW.TOWER_RAW.GLEXPORTBATCH_STAGING',\n    ' as select * from  \n    LRS_RAW.TOWER_RAW.GLEXPORTBATCH where 1=0'\n    )\n    }",
													"type": "Expression"
												}
											}
										],
										"scriptBlockExecutionTimeout": "02:00:00"
									}
								},
								{
									"name": "Drop staging table for GLExportBatch",
									"type": "Script",
									"dependsOn": [
										{
											"activity": "GLExportBatch Snowflake Merge Operation",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "LRS_Snowflake_V2",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"type": "Query",
												"text": {
													"value": "@{concat(\n    'Drop table LRS_RAW.TOWER_RAW.GLEXPORTBATCH_STAGING'\n    )\n}",
													"type": "Expression"
												}
											}
										],
										"scriptBlockExecutionTimeout": "02:00:00"
									}
								},
								{
									"name": "Payment Delta Load",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "Create staging for Payment",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SqlServerSource",
											"sqlReaderQuery": {
												"value": "@{concat(\n    'select * from PAYMENT where PAYMENTDATE > DATEADD(day,-', \n    pipeline().parameters.Incremental_Range,\n    ', GETDATE())'\n    )\n}\n",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"sink": {
											"type": "SnowflakeV2Sink",
											"importSettings": {
												"type": "SnowflakeImportCopyCommand",
												"additionalCopyOptions": {
													"ON_ERROR": "CONTINUE"
												}
											}
										},
										"enableStaging": true,
										"stagingSettings": {
											"linkedServiceName": {
												"referenceName": "msaz01_dm01_Azure_Blob",
												"type": "LinkedServiceReference"
											},
											"path": "staging"
										},
										"enableSkipIncompatibleRow": true,
										"logSettings": {
											"enableCopyActivityLog": true,
											"copyActivityLogSettings": {
												"logLevel": "Warning",
												"enableReliableLogging": false
											},
											"logLocationSettings": {
												"linkedServiceName": {
													"referenceName": "msaz01_dm01_Azure_Blob",
													"type": "LinkedServiceReference"
												}
											}
										},
										"translator": {
											"type": "TabularTranslator",
											"mappings": [
												{
													"source": {
														"name": "PaymentUID",
														"type": "Guid"
													},
													"sink": {
														"name": "PAYMENTUID",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "PaymentBatchUID",
														"type": "Guid"
													},
													"sink": {
														"name": "PAYMENTBATCHUID",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "BatchSequence",
														"type": "Int32"
													},
													"sink": {
														"name": "BATCHSEQUENCE",
														"type": "Int64"
													}
												},
												{
													"source": {
														"name": "SourceUID",
														"type": "Guid"
													},
													"sink": {
														"name": "SOURCEUID",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "PaymentDate",
														"type": "DateTime"
													},
													"sink": {
														"name": "PAYMENTDATE",
														"type": "DateTime"
													}
												},
												{
													"source": {
														"name": "Status",
														"type": "Int16"
													},
													"sink": {
														"name": "STATUS",
														"type": "Int64"
													}
												},
												{
													"source": {
														"name": "ClearOrNSFDate",
														"type": "DateTime"
													},
													"sink": {
														"name": "CLEARORNSFDATE",
														"type": "DateTime"
													}
												},
												{
													"source": {
														"name": "CustID",
														"type": "String"
													},
													"sink": {
														"name": "CUSTID",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "PaymentMethod",
														"type": "Int16"
													},
													"sink": {
														"name": "PAYMENTMETHOD",
														"type": "Int64"
													}
												},
												{
													"source": {
														"name": "CreditCardType",
														"type": "Int16"
													},
													"sink": {
														"name": "CREDITCARDTYPE",
														"type": "Int64"
													}
												},
												{
													"source": {
														"name": "PaymentBankAcct",
														"type": "String"
													},
													"sink": {
														"name": "PAYMENTBANKACCT",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "PaymentIDNbr",
														"type": "String"
													},
													"sink": {
														"name": "PAYMENTIDNBR",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "Amount",
														"type": "Decimal"
													},
													"sink": {
														"name": "AMOUNT",
														"type": "Int64"
													}
												},
												{
													"source": {
														"name": "ApplicationMethod",
														"type": "Int16"
													},
													"sink": {
														"name": "APPLICATIONMETHOD",
														"type": "Int64"
													}
												},
												{
													"source": {
														"name": "RemoveCreditHold",
														"type": "Int16"
													},
													"sink": {
														"name": "REMOVECREDITHOLD",
														"type": "Int64"
													}
												},
												{
													"source": {
														"name": "CreditAmount",
														"type": "Decimal"
													},
													"sink": {
														"name": "CREDITAMOUNT",
														"type": "Int64"
													}
												},
												{
													"source": {
														"name": "CreditReason",
														"type": "String"
													},
													"sink": {
														"name": "CREDITREASON",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "PaymentNote",
														"type": "String"
													},
													"sink": {
														"name": "PAYMENTNOTE",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "CustomerBalance",
														"type": "Decimal"
													},
													"sink": {
														"name": "CUSTOMERBALANCE",
														"type": "Int64"
													}
												},
												{
													"source": {
														"name": "BankAccountXRefUID",
														"type": "Guid"
													},
													"sink": {
														"name": "BANKACCOUNTXREFUID",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "CollectionsNotified",
														"type": "Int16"
													},
													"sink": {
														"name": "COLLECTIONSNOTIFIED",
														"type": "Int64"
													}
												},
												{
													"source": {
														"name": "CustomerPaymentAccountUID",
														"type": "Guid"
													},
													"sink": {
														"name": "CUSTOMERPAYMENTACCOUNTUID",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "ReversedByDate",
														"type": "DateTime"
													},
													"sink": {
														"name": "REVERSEDBYDATE",
														"type": "DateTime"
													}
												},
												{
													"source": {
														"name": "ReversedByUserID",
														"type": "String"
													},
													"sink": {
														"name": "REVERSEDBYUSERID",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "ReversalReasonNote",
														"type": "String"
													},
													"sink": {
														"name": "REVERSALREASONNOTE",
														"type": "String"
													}
												}
											]
										}
									},
									"inputs": [
										{
											"referenceName": "MSAZ01_TOWER",
											"type": "DatasetReference",
											"parameters": {
												"db": "Tower7",
												"schema": "dbo",
												"table": "Payment"
											}
										}
									],
									"outputs": [
										{
											"referenceName": "LRS_Snowflake_Raw_IR_V2",
											"type": "DatasetReference",
											"parameters": {
												"Snowflake_Sink_Table": "PAYMENT_STAGING",
												"Snowflake_Schema": "TOWER_RAW"
											}
										}
									]
								},
								{
									"name": "Payment Snowflake Merge Operation",
									"description": "merge statement to the raw tables. this helps avoids any duplication and upsert the rows needed.",
									"type": "Script",
									"dependsOn": [
										{
											"activity": "Payment Delta Load",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "LRS_Snowflake_V2",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"type": "Query",
												"text": {
													"value": "@{concat('merge into LRS_RAW.TOWER_RAW.PAYMENT t \nusing \n    TOWER_RAW.PAYMENT_STAGING s \non t.PAYMENTUID = s.PAYMENTUID  \nwhen matched then update set \n\tt.paymentuid =s.paymentuid , \n\tt.paymentbatchuid =s.paymentbatchuid , \n\tt.batchsequence =s.batchsequence , \n\tt.sourceuid =s.sourceuid, \n\tt.paymentdate =s.paymentdate , \n\tt.status =s.status, \n\tt.clearornsfdate =s.clearornsfdate, \n\tt.custid =s. custid , \n\tt.paymentmethod =s.paymentmethod , \n\tt.creditcardtype =s.creditcardtype, \n\tt.paymentbankacct =s.paymentbankacct, \n\tt.paymentidnbr =s.paymentidnbr, \n\tt.amount =s.amount , \n\tt.applicationmethod =s.applicationmethod , \n\tt.removecredithold =s.removecredithold , \n\tt.creditamount =s.creditamount , \n\tt.creditreason =s.creditreason, \n\tt.paymentnote=s.paymentnote ,  \n\tt.customerbalance =s.customerbalance, \n\tt.bankaccountxrefuid =s.bankaccountxrefuid , \n\tt.collectionsnotified =s.collectionsnotified, \n\tt.customerpaymentaccountuid =s.customerpaymentaccountuid, \n\tt.reversedbydate=s.reversedbydate , \n\tt.reversedbyuserid =s.reversedbyuserid , \n\tt.reversalreasonnote = s.reversalreasonnote  \nwhen not matched then insert \n\t(\n\tt.paymentuid ,\n\tt.paymentbatchuid ,\n\tt.batchsequence ,\n\tt.sourceuid ,\n\tt.paymentdate ,\n\tt.status ,\n\tt.clearornsfdate ,\n\tt.custid ,\n\tt.paymentmethod ,\n\tt.creditcardtype ,\n\tt.paymentbankacct ,\n\tt.paymentidnbr ,\n\tt.amount ,\n\tt.applicationmethod ,\n\tt.removecredithold ,\n\tt.creditamount ,\n\tt.creditreason ,\n\tt.paymentnote, \n\tt.customerbalance ,\n\tt.bankaccountxrefuid ,\n\tt.collectionsnotified ,\n\tt.customerpaymentaccountuid,\n\tt.reversedbydate,\n\tt.reversedbyuserid ,\n\tt.reversalreasonnote \n\t)\nvalues \n\t(\n\ts.paymentuid ,\n\ts.paymentbatchuid ,\n\ts.batchsequence ,\n\ts.sourceuid ,\n\ts.paymentdate ,\n\ts.status ,\n\ts.clearornsfdate ,\n\ts.custid ,\n\ts.paymentmethod ,\n\ts.creditcardtype ,\n\ts.paymentbankacct ,\n\ts.paymentidnbr ,\n\ts.amount ,\n\ts.applicationmethod ,\n\ts.removecredithold ,\n\ts.creditamount ,\n\ts.creditreason ,\n\ts.paymentnote, \n\ts.customerbalance ,\n\ts.bankaccountxrefuid ,\n\ts.collectionsnotified ,\n\ts.customerpaymentaccountuid ,\n\ts.reversedbydate,\n\ts.reversedbyuserid ,\n\ts.reversalreasonnote )'\n\t)}\n",
													"type": "Expression"
												}
											}
										],
										"scriptBlockExecutionTimeout": "02:00:00"
									}
								},
								{
									"name": "Create staging for Payment",
									"type": "Script",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "LRS_Snowflake_V2",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"type": "Query",
												"text": {
													"value": "@{concat(\n    'Create or replace table LRS_RAW.TOWER_RAW.PAYMENT_STAGING',\n    ' as select * from  \n    LRS_RAW.TOWER_RAW.PAYMENT where 1=0'\n    )\n    }",
													"type": "Expression"
												}
											}
										],
										"scriptBlockExecutionTimeout": "02:00:00"
									}
								},
								{
									"name": "Drop staging table for Payment",
									"type": "Script",
									"dependsOn": [
										{
											"activity": "Payment Snowflake Merge Operation",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "LRS_Snowflake_V2",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"type": "Query",
												"text": {
													"value": "@{concat(\n    'Drop table LRS_RAW.TOWER_RAW.PAYMENT_STAGING'\n    )\n}",
													"type": "Expression"
												}
											}
										],
										"scriptBlockExecutionTimeout": "02:00:00"
									}
								},
								{
									"name": "InvoiceDetail Delta Load",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "Create staging for InvoiceDetail",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SqlServerSource",
											"sqlReaderQuery": {
												"value": "@{concat(\n    'select * from INVOICEDETAIL \n    where STARTDATE > (SELECT MAX(STARTDATE) FROM INVOICEDETAIL) -' , \n  pipeline().parameters.Incremental_Range2\n    )\n}\n",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"sink": {
											"type": "SnowflakeV2Sink",
											"importSettings": {
												"type": "SnowflakeImportCopyCommand",
												"additionalCopyOptions": {
													"ON_ERROR": "CONTINUE"
												}
											}
										},
										"enableStaging": true,
										"stagingSettings": {
											"linkedServiceName": {
												"referenceName": "msaz01_dm01_Azure_Blob",
												"type": "LinkedServiceReference"
											},
											"path": "staging"
										},
										"enableSkipIncompatibleRow": true,
										"logSettings": {
											"enableCopyActivityLog": true,
											"copyActivityLogSettings": {
												"logLevel": "Warning",
												"enableReliableLogging": false
											},
											"logLocationSettings": {
												"linkedServiceName": {
													"referenceName": "msaz01_dm01_Azure_Blob",
													"type": "LinkedServiceReference"
												}
											}
										},
										"translator": {
											"type": "TabularTranslator",
											"mappings": [
												{
													"source": {
														"name": "InvoiceDetailUID",
														"type": "Guid"
													},
													"sink": {
														"name": "INVOICEDETAILUID",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "InvoiceUID",
														"type": "Guid"
													},
													"sink": {
														"name": "INVOICEUID",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "SiteID",
														"type": "String"
													},
													"sink": {
														"name": "SITEID",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "ServiceUID",
														"type": "Guid"
													},
													"sink": {
														"name": "SERVICEUID",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "SourceUID",
														"type": "Guid"
													},
													"sink": {
														"name": "SOURCEUID",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "SourceIDNbr",
														"type": "String"
													},
													"sink": {
														"name": "SOURCEIDNBR",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "LineType",
														"type": "Int16"
													},
													"sink": {
														"name": "LINETYPE",
														"type": "Int64"
													}
												},
												{
													"source": {
														"name": "LineSubType",
														"type": "Int16"
													},
													"sink": {
														"name": "LINESUBTYPE",
														"type": "Int64"
													}
												},
												{
													"source": {
														"name": "SvcCode",
														"type": "String"
													},
													"sink": {
														"name": "SVCCODE",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "Description",
														"type": "String"
													},
													"sink": {
														"name": "DESCRIPTION",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "Salesperson",
														"type": "String"
													},
													"sink": {
														"name": "SALESPERSON",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "SvcFrequency",
														"type": "String"
													},
													"sink": {
														"name": "SVCFREQUENCY",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "Quantity",
														"type": "Decimal"
													},
													"sink": {
														"name": "QUANTITY",
														"type": "Int64"
													}
												},
												{
													"source": {
														"name": "Amount",
														"type": "Decimal"
													},
													"sink": {
														"name": "AMOUNT",
														"type": "Int64"
													}
												},
												{
													"source": {
														"name": "UnitPrice",
														"type": "Decimal"
													},
													"sink": {
														"name": "UNITPRICE",
														"type": "Int64"
													}
												},
												{
													"source": {
														"name": "TaxAmount",
														"type": "Decimal"
													},
													"sink": {
														"name": "TAXAMOUNT",
														"type": "Int64"
													}
												},
												{
													"source": {
														"name": "StartDate",
														"type": "DateTime"
													},
													"sink": {
														"name": "STARTDATE",
														"type": "DateTime"
													}
												},
												{
													"source": {
														"name": "EndDate",
														"type": "DateTime"
													},
													"sink": {
														"name": "ENDDATE",
														"type": "DateTime"
													}
												},
												{
													"source": {
														"name": "PrintRecord",
														"type": "Int16"
													},
													"sink": {
														"name": "PRINTRECORD",
														"type": "Int64"
													}
												},
												{
													"source": {
														"name": "LineOrderKey1",
														"type": "String"
													},
													"sink": {
														"name": "LINEORDERKEY1",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "LineOrderKey2",
														"type": "String"
													},
													"sink": {
														"name": "LINEORDERKEY2",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "LineOrderKey3",
														"type": "String"
													},
													"sink": {
														"name": "LINEORDERKEY3",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "LineOrderKey4",
														"type": "String"
													},
													"sink": {
														"name": "LINEORDERKEY4",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "PONbr",
														"type": "String"
													},
													"sink": {
														"name": "PONBR",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "POSource",
														"type": "Int16"
													},
													"sink": {
														"name": "POSOURCE",
														"type": "Int64"
													}
												},
												{
													"source": {
														"name": "AssignedToCollections",
														"type": "Int16"
													},
													"sink": {
														"name": "ASSIGNEDTOCOLLECTIONS",
														"type": "Int64"
													}
												},
												{
													"source": {
														"name": "AssignedToCollectionsDate",
														"type": "DateTime"
													},
													"sink": {
														"name": "ASSIGNEDTOCOLLECTIONSDATE",
														"type": "DateTime"
													}
												},
												{
													"source": {
														"name": "DiscountAmount",
														"type": "Decimal"
													},
													"sink": {
														"name": "DISCOUNTAMOUNT",
														"type": "Int64"
													}
												},
												{
													"source": {
														"name": "PriorARDStatus",
														"type": "Int16"
													},
													"sink": {
														"name": "PRIORARDSTATUS",
														"type": "Int64"
													}
												},
												{
													"source": {
														"name": "LineLevel",
														"type": "Int16"
													},
													"sink": {
														"name": "LINELEVEL",
														"type": "Int64"
													}
												},
												{
													"source": {
														"name": "SiteAddressUID",
														"type": "Guid"
													},
													"sink": {
														"name": "SITEADDRESSUID",
														"type": "String"
													}
												}
											]
										}
									},
									"inputs": [
										{
											"referenceName": "MSAZ01_TOWER",
											"type": "DatasetReference",
											"parameters": {
												"db": "Tower7",
												"schema": "dbo",
												"table": "INVOICEDETAIL"
											}
										}
									],
									"outputs": [
										{
											"referenceName": "LRS_Snowflake_Raw_IR_V2",
											"type": "DatasetReference",
											"parameters": {
												"Snowflake_Sink_Table": "INVOICEDETAIL_STAGING",
												"Snowflake_Schema": "TOWER_RAW"
											}
										}
									]
								},
								{
									"name": "InvoiceDetail Snowflake Merge Operation",
									"description": "merge statement to the raw tables. this helps avoids any duplication and upsert the rows needed.",
									"type": "Script",
									"dependsOn": [
										{
											"activity": "InvoiceDetail Delta Load",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "LRS_Snowflake_V2",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"type": "Query",
												"text": {
													"value": "@{concat('merge into LRS_RAW.TOWER_RAW.INVOICEDETAIL t \nusing \n    TOWER_RAW.INVOICEDETAIL_STAGING s \non t.INVOICEDETAILUID= s.INVOICEDETAILUID  \nwhen matched then update set \nt.InvoiceDetailUID= s.InvoiceDetailUID,\n      t.InvoiceUID= s.InvoiceUID,\n      t.SiteID= s.SiteID,\n      t.ServiceUID= s.ServiceUID,\n      t.SourceUID= s.SourceUID,\n      t.SourceIDNbr= s.SourceIDNbr,\n      t.LineType= s.LineType,\n      t.LineSubType= s.LineSubType,\n      t.SvcCode= s.SvcCode,\n      t.Description= s.Description ,\n      t. Salesperson = s.Salesperson ,\n      t.SvcFrequency= s.SvcFrequency ,\n      t.Quantity= s.Quantity,\n      t.Amount= s.Amount ,\n      t.UnitPrice= s.UnitPrice,\n      t.TaxAmount= s.TaxAmount,\n      t.StartDate= s.StartDate,\n      t.EndDate= s.EndDate ,\n      t.PrintRecord= s.PrintRecord ,\n      t.LineOrderKey1= s.LineOrderKey1 ,\n      t.LineOrderKey2= s.LineOrderKey2 ,\n      t.LineOrderKey3= s.LineOrderKey3 ,\n      t.LineOrderKey4= s.LineOrderKey4 ,\n      t.PONbr= s.PONbr ,\n      t.POSource= s.POSource ,\n      t.AssignedToCollections= s.AssignedToCollections ,\n      t.AssignedToCollectionsDate= s.AssignedToCollectionsDate ,\n      t.DiscountAmount= s.DiscountAmount,\n      t.PriorARDStatus= s.PriorARDStatus ,\n      t.LineLevel= s.LineLevel,\n      t.SiteAddressUID= s.SiteAddressUID \nwhen not matched then insert \n\t(\n\tt.InvoiceDetailUID,\n      t.InvoiceUID,\n      t.SiteID,\n      t.ServiceUID,\n      t.SourceUID,\n      t.SourceIDNbr,\n      t.LineType,\n      t.LineSubType,\n      t.SvcCode,\n      t.Description,\n      t.Salesperson,\n      t.SvcFrequency,\n      t.Quantity,\n      t.Amount,\n      t.UnitPrice,\n      t.TaxAmount,\n      t.StartDate,\n      t.EndDate,\n      t.PrintRecord,\n      t.LineOrderKey1,\n      t.LineOrderKey2,\n      t.LineOrderKey3,\n      t.LineOrderKey4,\n      t.PONbr,\n      t.POSource,\n      t.AssignedToCollections,\n      t.AssignedToCollectionsDate,\n      t.DiscountAmount,\n      t.PriorARDStatus,\n      t.LineLevel,\n      t.SiteAddressUID\n\t)\nvalues \n\t(\n\ts.InvoiceDetailUID,\n      s.InvoiceUID,\n      s.SiteID,\n      s.ServiceUID,\n      s.SourceUID,\n      s.SourceIDNbr,\n      s.LineType,\n      s.LineSubType,\n      s.SvcCode,\n      s.Description,\n      s.Salesperson,\n      s.SvcFrequency,\n      s.Quantity,\n      s.Amount,\n      s.UnitPrice,\n      s.TaxAmount,\n      s.StartDate,\n      s.EndDate,\n      s.PrintRecord,\n      s.LineOrderKey1,\n      s.LineOrderKey2,\n      s.LineOrderKey3,\n      s.LineOrderKey4,\n      s.PONbr,\n      s.POSource,\n      s.AssignedToCollections,\n      s.AssignedToCollectionsDate,\n      s.DiscountAmount,\n      s.PriorARDStatus,\n      s.LineLevel,\n      s.SiteAddressUID)'\n\t)}\n",
													"type": "Expression"
												}
											}
										],
										"scriptBlockExecutionTimeout": "02:00:00"
									}
								},
								{
									"name": "Create staging for InvoiceDetail",
									"type": "Script",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "LRS_Snowflake_V2",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"type": "Query",
												"text": {
													"value": "@{concat(\n    'Create or replace table LRS_RAW.TOWER_RAW.INVOICEDETAIL_STAGING',\n    ' as select * from  \n    LRS_RAW.TOWER_RAW.INVOICEDETAIL where 1=0'\n    )\n    }",
													"type": "Expression"
												}
											}
										],
										"scriptBlockExecutionTimeout": "02:00:00"
									}
								},
								{
									"name": "Drop staging table for InvoiceDetail",
									"type": "Script",
									"dependsOn": [
										{
											"activity": "InvoiceDetail Snowflake Merge Operation",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "LRS_Snowflake_V2",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"type": "Query",
												"text": {
													"value": "@{concat(\n    'Drop table LRS_RAW.TOWER_RAW.INVOICEDETAIL_STAGING'\n    )\n}",
													"type": "Expression"
												}
											}
										],
										"scriptBlockExecutionTimeout": "02:00:00"
									}
								},
								{
									"name": "Invoice Delta Load",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "Create staging for Invoice",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SqlServerSource",
											"sqlReaderQuery": {
												"value": "@{concat(\n    'select * from INVOICE \n    where DUEDATE > (SELECT MAX(DUEDATE) FROM INVOICE) -' , \n  pipeline().parameters.Incremental_Range3\n    )\n}\n",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"sink": {
											"type": "SnowflakeV2Sink",
											"importSettings": {
												"type": "SnowflakeImportCopyCommand",
												"additionalCopyOptions": {
													"ON_ERROR": "CONTINUE"
												}
											}
										},
										"enableStaging": true,
										"stagingSettings": {
											"linkedServiceName": {
												"referenceName": "msaz01_dm01_Azure_Blob",
												"type": "LinkedServiceReference"
											},
											"path": "staging"
										},
										"enableSkipIncompatibleRow": true,
										"logSettings": {
											"enableCopyActivityLog": true,
											"copyActivityLogSettings": {
												"logLevel": "Warning",
												"enableReliableLogging": false
											},
											"logLocationSettings": {
												"linkedServiceName": {
													"referenceName": "msaz01_dm01_Azure_Blob",
													"type": "LinkedServiceReference"
												}
											}
										},
										"translator": {
											"type": "TabularTranslator",
											"mappings": [
												{
													"source": {
														"name": "InvoiceUID",
														"type": "Guid"
													},
													"sink": {
														"name": "INVOICEUID",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "InvoiceID",
														"type": "String"
													},
													"sink": {
														"name": "INVOICEID",
														"type": "Int64"
													}
												},
												{
													"source": {
														"name": "Status",
														"type": "Int16"
													},
													"sink": {
														"name": "STATUS",
														"type": "Int64"
													}
												},
												{
													"source": {
														"name": "InvoiceContent",
														"type": "Int16"
													},
													"sink": {
														"name": "INVOICECONTENT",
														"type": "Int64"
													}
												},
												{
													"source": {
														"name": "PrintInvoice",
														"type": "Int16"
													},
													"sink": {
														"name": "PRINTINVOICE",
														"type": "Int64"
													}
												},
												{
													"source": {
														"name": "InvoiceOrderKey",
														"type": "String"
													},
													"sink": {
														"name": "INVOICEORDERKEY",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "BillBatchUID",
														"type": "Guid"
													},
													"sink": {
														"name": "BILLBATCHUID",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "BillCustID",
														"type": "String"
													},
													"sink": {
														"name": "BILLCUSTID",
														"type": "Int64"
													}
												},
												{
													"source": {
														"name": "BillSiteID",
														"type": "String"
													},
													"sink": {
														"name": "BILLSITEID",
														"type": "Int64"
													}
												},
												{
													"source": {
														"name": "BillName",
														"type": "String"
													},
													"sink": {
														"name": "BILLNAME",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "BillContact",
														"type": "String"
													},
													"sink": {
														"name": "BILLCONTACT",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "BillAddressUID",
														"type": "Guid"
													},
													"sink": {
														"name": "BILLADDRESSUID",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "BillPhone",
														"type": "String"
													},
													"sink": {
														"name": "BILLPHONE",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "BillFax",
														"type": "String"
													},
													"sink": {
														"name": "BILLFAX",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "BillEmail",
														"type": "String"
													},
													"sink": {
														"name": "BILLEMAIL",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "SiteAddressUID",
														"type": "Guid"
													},
													"sink": {
														"name": "SITEADDRESSUID",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "InvoiceDate",
														"type": "DateTime"
													},
													"sink": {
														"name": "INVOICEDATE",
														"type": "DateTime"
													}
												},
												{
													"source": {
														"name": "LastInvoiceDate",
														"type": "DateTime"
													},
													"sink": {
														"name": "LASTINVOICEDATE",
														"type": "DateTime"
													}
												},
												{
													"source": {
														"name": "DueDate",
														"type": "DateTime"
													},
													"sink": {
														"name": "DUEDATE",
														"type": "DateTime"
													}
												},
												{
													"source": {
														"name": "FinanceChargeThruDate",
														"type": "DateTime"
													},
													"sink": {
														"name": "FINANCECHARGETHRUDATE",
														"type": "DateTime"
													}
												},
												{
													"source": {
														"name": "CustClass",
														"type": "String"
													},
													"sink": {
														"name": "CUSTCLASS",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "BalForward",
														"type": "Decimal"
													},
													"sink": {
														"name": "BALFORWARD",
														"type": "Int64"
													}
												},
												{
													"source": {
														"name": "AgingBal00",
														"type": "Decimal"
													},
													"sink": {
														"name": "AGINGBAL00",
														"type": "Int64"
													}
												},
												{
													"source": {
														"name": "AgingBal01",
														"type": "Decimal"
													},
													"sink": {
														"name": "AGINGBAL01",
														"type": "Int64"
													}
												},
												{
													"source": {
														"name": "AgingBal02",
														"type": "Decimal"
													},
													"sink": {
														"name": "AGINGBAL02",
														"type": "Int64"
													}
												},
												{
													"source": {
														"name": "AgingBal03",
														"type": "Decimal"
													},
													"sink": {
														"name": "AGINGBAL03",
														"type": "Int64"
													}
												},
												{
													"source": {
														"name": "AgingBal04",
														"type": "Decimal"
													},
													"sink": {
														"name": "AGINGBAL04",
														"type": "Int64"
													}
												},
												{
													"source": {
														"name": "NewBalance",
														"type": "Decimal"
													},
													"sink": {
														"name": "NEWBALANCE",
														"type": "Int64"
													}
												},
												{
													"source": {
														"name": "TotSvcOneTime",
														"type": "Decimal"
													},
													"sink": {
														"name": "TOTSVCONETIME",
														"type": "Int64"
													}
												},
												{
													"source": {
														"name": "TotSvcRecurring",
														"type": "Decimal"
													},
													"sink": {
														"name": "TOTSVCRECURRING",
														"type": "Int64"
													}
												},
												{
													"source": {
														"name": "TotSvcOnCall",
														"type": "Decimal"
													},
													"sink": {
														"name": "TOTSVCONCALL",
														"type": "Int64"
													}
												},
												{
													"source": {
														"name": "TotSvcTaxes",
														"type": "Decimal"
													},
													"sink": {
														"name": "TOTSVCTAXES",
														"type": "Int64"
													}
												},
												{
													"source": {
														"name": "TotFinCharges",
														"type": "Decimal"
													},
													"sink": {
														"name": "TOTFINCHARGES",
														"type": "Int64"
													}
												},
												{
													"source": {
														"name": "TotCharges",
														"type": "Decimal"
													},
													"sink": {
														"name": "TOTCHARGES",
														"type": "Int64"
													}
												},
												{
													"source": {
														"name": "TotChargeTaxes",
														"type": "Decimal"
													},
													"sink": {
														"name": "TOTCHARGETAXES",
														"type": "Int64"
													}
												},
												{
													"source": {
														"name": "TotCredits",
														"type": "Decimal"
													},
													"sink": {
														"name": "TOTCREDITS",
														"type": "Int64"
													}
												},
												{
													"source": {
														"name": "TotCreditTaxes",
														"type": "Decimal"
													},
													"sink": {
														"name": "TOTCREDITTAXES",
														"type": "Int64"
													}
												},
												{
													"source": {
														"name": "TotPayments",
														"type": "Decimal"
													},
													"sink": {
														"name": "TOTPAYMENTS",
														"type": "Int64"
													}
												},
												{
													"source": {
														"name": "AutomaticPaymentType",
														"type": "Int16"
													},
													"sink": {
														"name": "AUTOMATICPAYMENTTYPE",
														"type": "Int64"
													}
												},
												{
													"source": {
														"name": "CompanyID",
														"type": "String"
													},
													"sink": {
														"name": "COMPANYID",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "InvoiceMailingOption",
														"type": "Int16"
													},
													"sink": {
														"name": "INVOICEMAILINGOPTION",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "InvoiceInsert",
														"type": "String"
													},
													"sink": {
														"name": "INVOICEINSERT",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "ExternalInvoiceNbr",
														"type": "String"
													},
													"sink": {
														"name": "EXTERNALINVOICENBR",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "InvoiceDetailFormat",
														"type": "Int16"
													},
													"sink": {
														"name": "INVOICEDETAILFORMAT",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "LineOfBusiness",
														"type": "String"
													},
													"sink": {
														"name": "LINEOFBUSINESS",
														"type": "String"
													}
												}
											]
										}
									},
									"inputs": [
										{
											"referenceName": "MSAZ01_TOWER",
											"type": "DatasetReference",
											"parameters": {
												"db": "Tower7",
												"schema": "dbo",
												"table": "INVOICE"
											}
										}
									],
									"outputs": [
										{
											"referenceName": "LRS_Snowflake_Raw_IR_V2",
											"type": "DatasetReference",
											"parameters": {
												"Snowflake_Sink_Table": "INVOICE_STAGING",
												"Snowflake_Schema": "TOWER_RAW"
											}
										}
									]
								},
								{
									"name": "Create staging for Invoice",
									"type": "Script",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "LRS_Snowflake_V2",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"type": "Query",
												"text": {
													"value": "@{concat(\n    'Create or replace table LRS_RAW.TOWER_RAW.INVOICE_STAGING',\n    ' as select * from  \n    LRS_RAW.TOWER_RAW.INVOICE where 1=0'\n    )\n    }",
													"type": "Expression"
												}
											}
										],
										"scriptBlockExecutionTimeout": "02:00:00"
									}
								},
								{
									"name": "Invoice Snowflake Merge Operation",
									"description": "merge statement to the raw tables. this helps avoids any duplication and upsert the rows needed.",
									"type": "Script",
									"dependsOn": [
										{
											"activity": "Invoice Delta Load",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "LRS_Snowflake_V2",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"type": "Query",
												"text": {
													"value": "@{concat('merge into LRS_RAW.TOWER_RAW.INVOICE t \nusing \n    TOWER_RAW.INVOICE_STAGING s \non t.INVOICEUID= s.INVOICEUID  \nwhen matched then update set \n\tt.invoiceuid = s.invoiceuid ,\n\tt.invoiceid = s.invoiceid ,\n\tt.status = s. status,\n\tt.invoicecontent = s.invoicecontent ,\n\tt.printinvoice = s.printinvoice ,\n\tt.invoiceorderkey = s.invoiceorderkey ,\n\tt.billbatchuid = s.billbatchuid ,\n\tt.billcustid = s.billcustid ,\n\tt.billsiteid = s.billsiteid ,\n\tt.billname = s.billname ,\n\tt.billcontact= s.billcontact ,\n\tt.billaddressuid = s.billaddressuid ,\n\tt.billphone = s.billphone ,\n\tt.billfax = s.billfax ,\n\tt.billemail = s.billemail ,\n\tt.siteaddressuid = s.siteaddressuid ,\n\tt.invoicedate = s.invoicedate ,\n\tt.lastinvoicedate = s.lastinvoicedate ,\n\tt.duedate = s.duedate ,\n\tt.financechargethrudate = s.financechargethrudate ,\n\tt.custclass = s.custclass ,\n\tt.balforward = s.balforward ,\n\tt.agingbal00 = s.agingbal00 ,\n\tt.agingbal01 = s.agingbal01 ,\n\tt.agingbal02 = s.agingbal02 ,\n\tt.agingbal03 = s.agingbal03 ,\n\tt.agingbal04 = s.agingbal04 ,\n\tt.newbalance = s.newbalance ,\n\tt.totsvconetime = s.totsvconetime ,\n\tt.totsvcrecurring = s.totsvcrecurring ,\n\tt.totsvconcall = s.totsvconcall ,\n\tt.totsvctaxes = s.totsvctaxes ,\n\tt.totfincharges = s.totfincharges ,\n\tt.totcharges = s.totcharges ,\n\tt.totchargetaxes = s.totchargetaxes ,\n\tt.totcredits = s.totcredits ,\n\tt.totcredittaxes = s.totcredittaxes ,\n\tt.totpayments = s.totpayments ,\n\tt.automaticpaymenttype = s.automaticpaymenttype ,\n\tt.companyid = s.companyid ,\n\tt.invoicemailingoption = s.invoicemailingoption ,\n\tt.invoiceinsert = s.invoiceinsert ,\n\tt.externalinvoicenbr = s.externalinvoicenbr ,\n\tt.invoicedetailformat = s.invoicedetailformat ,\n\tt.lineofbusiness =s.lineofbusiness \nwhen not matched then insert \n\t( \n\tt.invoiceuid ,\n\tt.invoiceid ,\n\tt.status ,\n\tt.invoicecontent ,\n\tt.printinvoice ,\n\tt.invoiceorderkey ,\n\tt.billbatchuid ,\n\tt.billcustid ,\n\tt.billsiteid ,\n\tt.billname ,\n\tt.billcontact,\n\tt.billaddressuid ,\n\tt.billphone ,\n\tt.billfax ,\n\tt.billemail ,\n\tt.siteaddressuid ,\n\tt.invoicedate ,\n\tt.lastinvoicedate ,\n\tt.duedate ,\n\tt.financechargethrudate ,\n\tt.custclass ,\n\tt.balforward ,\n\tt.agingbal00 ,\n\tt.agingbal01 ,\n\tt.agingbal02 ,\n\tt.agingbal03 ,\n\tt.agingbal04 ,\n\tt.newbalance ,\n\tt.totsvconetime ,\n\tt.totsvcrecurring ,\n\tt.totsvconcall ,\n\tt.totsvctaxes ,\n\tt.totfincharges ,\n\tt.totcharges ,\n\tt.totchargetaxes ,\n\tt.totcredits ,\n\tt.totcredittaxes ,\n\tt.totpayments ,\n\tt.automaticpaymenttype ,\n\tt.companyid ,\n\tt.invoicemailingoption ,\n\tt.invoiceinsert ,\n\tt.externalinvoicenbr ,\n\tt.invoicedetailformat ,\n\tt.lineofbusiness \n\t)\nvalues \n\t(\n\ts.invoiceuid ,\n\ts.invoiceid ,\n\ts.status ,\n\ts.invoicecontent ,\n\ts.printinvoice ,\n\ts.invoiceorderkey ,\n\ts.billbatchuid ,\n\ts.billcustid ,\n\ts.billsiteid ,\n\ts.billname ,\n\ts.billcontact,\n\ts.billaddressuid ,\n\ts.billphone ,\n\ts.billfax ,\n\ts.billemail ,\n\ts.siteaddressuid ,\n\ts.invoicedate ,\n\ts.lastinvoicedate ,\n\ts.duedate ,\n\ts.financechargethrudate ,\n\ts.custclass ,\n\ts.balforward ,\n\ts.agingbal00 ,\n\ts.agingbal01 ,\n\ts.agingbal02 ,\n\ts.agingbal03 ,\n\ts.agingbal04 ,\n\ts.newbalance ,\n\ts.totsvconetime ,\n\ts.totsvcrecurring ,\n\ts.totsvconcall ,\n\ts.totsvctaxes ,\n\ts.totfincharges ,\n\ts.totcharges ,\n\ts.totchargetaxes ,\n\ts.totcredits ,\n\ts.totcredittaxes ,\n\ts.totpayments ,\n\ts.automaticpaymenttype ,\n\ts.companyid ,\n\ts.invoicemailingoption ,\n\ts.invoiceinsert ,\n\ts.externalinvoicenbr ,\n\ts.invoicedetailformat ,\n\ts.lineofbusiness)'\n\t)}\n",
													"type": "Expression"
												}
											}
										],
										"scriptBlockExecutionTimeout": "02:00:00"
									}
								},
								{
									"name": "Drop staging table for Invoice",
									"type": "Script",
									"dependsOn": [
										{
											"activity": "Invoice Snowflake Merge Operation",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "LRS_Snowflake_V2",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"type": "Query",
												"text": {
													"value": "@{concat(\n    'Drop table LRS_RAW.TOWER_RAW.INVOICE_STAGING'\n    )\n}",
													"type": "Expression"
												}
											}
										],
										"scriptBlockExecutionTimeout": "02:00:00"
									}
								}
							]
						}
					},
					{
						"name": "ID Incremental Loop",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Tower Table Names",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Tower Table Names').output.value",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "WorkOrder ID Delta Load",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SqlServerSource",
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"sink": {
											"type": "SnowflakeV2Sink",
											"importSettings": {
												"type": "SnowflakeImportCopyCommand",
												"additionalCopyOptions": {
													"ON_ERROR": "CONTINUE"
												}
											}
										},
										"enableStaging": true,
										"stagingSettings": {
											"linkedServiceName": {
												"referenceName": "msaz01_dm01_Azure_Blob",
												"type": "LinkedServiceReference"
											},
											"path": "staging"
										},
										"enableSkipIncompatibleRow": true,
										"logSettings": {
											"enableCopyActivityLog": true,
											"copyActivityLogSettings": {
												"logLevel": "Warning",
												"enableReliableLogging": false
											},
											"logLocationSettings": {
												"linkedServiceName": {
													"referenceName": "msaz01_dm01_Azure_Blob",
													"type": "LinkedServiceReference"
												}
											}
										},
										"translator": {
											"type": "TabularTranslator",
											"mappings": [
												{
													"source": {
														"name": "WorkOrderID",
														"type": "String"
													},
													"sink": {
														"name": "WORKORDERID",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "WorkOrderUID",
														"type": "Guid"
													},
													"sink": {
														"name": "WORKORDERUID",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "WorkPONbr",
														"type": "String"
													},
													"sink": {
														"name": "WORKPONBR",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "DestCertificate",
														"type": "String"
													},
													"sink": {
														"name": "DESTCERTIFICATE",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "CODRequired",
														"type": "Int16"
													},
													"sink": {
														"name": "CODREQUIRED",
														"type": "Int64"
													}
												},
												{
													"source": {
														"name": "CustomerDataFileUID",
														"type": "Guid"
													},
													"sink": {
														"name": "CUSTOMERDATAFILEUID",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "InvoiceMessage",
														"type": "String"
													},
													"sink": {
														"name": "INVOICEMESSAGE",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "Printed",
														"type": "Int16"
													},
													"sink": {
														"name": "PRINTED",
														"type": "Int64"
													}
												},
												{
													"source": {
														"name": "PrintDate",
														"type": "DateTime"
													},
													"sink": {
														"name": "PRINTDATE",
														"type": "DateTime"
													}
												},
												{
													"source": {
														"name": "PrintUser",
														"type": "String"
													},
													"sink": {
														"name": "PRINTUSER",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "Destination",
														"type": "String"
													},
													"sink": {
														"name": "DESTINATION",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "ServiceQuantity",
														"type": "Decimal"
													},
													"sink": {
														"name": "SERVICEQUANTITY",
														"type": "Int64"
													}
												},
												{
													"source": {
														"name": "ServiceUOM",
														"type": "String"
													},
													"sink": {
														"name": "SERVICEUOM",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "ReferenceNumber",
														"type": "String"
													},
													"sink": {
														"name": "REFERENCENUMBER",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "TagNumber",
														"type": "String"
													},
													"sink": {
														"name": "TAGNUMBER",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "FinalManifestDate",
														"type": "DateTime"
													},
													"sink": {
														"name": "FINALMANIFESTDATE",
														"type": "DateTime"
													}
												},
												{
													"source": {
														"name": "IsNoChargePickup",
														"type": "Boolean"
													},
													"sink": {
														"name": "ISNOCHARGEPICKUP",
														"type": "String"
													}
												}
											]
										}
									},
									"inputs": [
										{
											"referenceName": "MSAZ01_TOWER",
											"type": "DatasetReference",
											"parameters": {
												"db": "Tower7",
												"schema": "dbo",
												"table": "WORKORDER"
											}
										}
									],
									"outputs": [
										{
											"referenceName": "LRS_Snowflake_Raw_IR_V2",
											"type": "DatasetReference",
											"parameters": {
												"Snowflake_Sink_Table": "WORKORDER",
												"Snowflake_Schema": "TOWER_RAW"
											}
										}
									]
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"Incremental_Range": {
						"type": "string",
						"defaultValue": "14"
					},
					"Incremental_Range2": {
						"type": "string",
						"defaultValue": "500"
					},
					"Incremental_Range3": {
						"type": "string",
						"defaultValue": "50"
					}
				},
				"folder": {
					"name": "Test/Tower_DC"
				},
				"annotations": [],
				"lastPublishTime": "2024-08-27T21:47:39Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/TRUX_DATA_LOAD_2')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Loop over databases",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Database Lookup",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Database Lookup').output.value",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Copy SP03",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SqlServerSource",
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"sink": {
											"type": "SnowflakeV2Sink",
											"preCopyScript": {
												"value": "@{concat('truncate table',' ',item().Snowflake_Schema_New,'.SP03')}",
												"type": "Expression"
											},
											"importSettings": {
												"type": "SnowflakeImportCopyCommand",
												"additionalCopyOptions": {
													"ON_ERROR": "CONTINUE"
												}
											}
										},
										"enableStaging": true,
										"stagingSettings": {
											"linkedServiceName": {
												"referenceName": "MSAZ01_SQL_P12_Blob",
												"type": "LinkedServiceReference"
											},
											"path": "staging",
											"enableCompression": true
										},
										"parallelCopies": {
											"value": "@pipeline().parameters.Degree_Copy_Parallelism",
											"type": "Expression"
										},
										"enableSkipIncompatibleRow": true,
										"logSettings": {
											"enableCopyActivityLog": true,
											"copyActivityLogSettings": {
												"logLevel": "Warning",
												"enableReliableLogging": false
											},
											"logLocationSettings": {
												"linkedServiceName": {
													"referenceName": "MSAZ01_SQL_P12_Blob",
													"type": "LinkedServiceReference"
												}
											}
										},
										"dataIntegrationUnits": {
											"value": "@pipeline().parameters.Maximum_DIU",
											"type": "Expression"
										},
										"translator": {
											"type": "TabularTranslator",
											"mappings": [
												{
													"source": {
														"name": "SP03_ID",
														"type": "Int32"
													},
													"sink": {
														"name": "SP03_ID",
														"type": "Int64"
													}
												},
												{
													"source": {
														"name": "SP03_LINK",
														"type": "Int32"
													},
													"sink": {
														"name": "SP03_LINK",
														"type": "Int64"
													}
												},
												{
													"source": {
														"name": "SP03_CUST",
														"type": "Int32"
													},
													"sink": {
														"name": "SP03_CUST",
														"type": "Int64"
													}
												},
												{
													"source": {
														"name": "SP03_REFE",
														"type": "String"
													},
													"sink": {
														"name": "SP03_REFE",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "SP03_SITE",
														"type": "Int32"
													},
													"sink": {
														"name": "SP03_SITE",
														"type": "Int64"
													}
												}
											]
										}
									},
									"inputs": [
										{
											"referenceName": "TRUX_MSAZ01_SQL_P12",
											"type": "DatasetReference",
											"parameters": {
												"schema": "dbo",
												"table": "SP03",
												"database": "@item().sql_db_name",
												"server": "MSAZ01-SQL-P12"
											}
										}
									],
									"outputs": [
										{
											"referenceName": "LRS_Snowflake_Raw_V2_New",
											"type": "DatasetReference",
											"parameters": {
												"Snowflake_Sink_Table": "SP03",
												"Snowflake_Schema": {
													"value": "@item().Snowflake_Schema_New",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "Copy CC02",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "Copy SP03",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SqlServerSource",
											"sqlReaderQuery": "SELECT \r\n      [CC02_CUST]\r\n      ,[CC02_SITE]\r\n      ,[CC02_TYPE]\r\n      , NULL AS [CC02_NUMBER]\r\n      ,[CC02_EXPMO]\r\n      ,[CC02_EXPYE]\r\n      , NULL AS [CC02_CVV2]\r\n      ,[CC02_HFNAME]\r\n      ,[CC02_HLNAME]\r\n      ,[CC02_HADD]\r\n      ,[CC02_HCITY]\r\n      ,[CC02_HSTAT]\r\n      ,[CC02_HZIP]\r\n      ,[CC02_HCOUN]\r\n      ,[CC02_HPHON]\r\n      ,[CC02_HEMAIL]\r\n      ,[CC02_ACTIVE]\r\n      ,[CC02_CHRGTYPE]\r\n      ,[CC02_ID]\r\n      , NULL AS [CC02_ROUTNUM]\r\n      ,[CC02_ACCTYPE]\r\n      ,[CC02_BANKN]\r\n      ,[CC02_LICNUM]\r\n      ,[CC02_LICSTAT]\r\n      ,[CC02_DOB]\r\n      ,[CC02_ACCNAME]\r\n      ,[CC02_TOKEN]\r\n      ,[CC02_ACCOUNTTYPE]\r\nFROM \r\n      dbo.CC02",
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"sink": {
											"type": "SnowflakeV2Sink",
											"preCopyScript": {
												"value": "@{concat('truncate table',' ',item().Snowflake_Schema_New,'.CC02')}",
												"type": "Expression"
											},
											"importSettings": {
												"type": "SnowflakeImportCopyCommand",
												"additionalCopyOptions": {
													"ON_ERROR": "CONTINUE"
												}
											}
										},
										"enableStaging": true,
										"stagingSettings": {
											"linkedServiceName": {
												"referenceName": "MSAZ01_SQL_P12_Blob",
												"type": "LinkedServiceReference"
											},
											"path": "staging",
											"enableCompression": true
										},
										"parallelCopies": {
											"value": "@pipeline().parameters.Degree_Copy_Parallelism",
											"type": "Expression"
										},
										"enableSkipIncompatibleRow": true,
										"logSettings": {
											"enableCopyActivityLog": true,
											"copyActivityLogSettings": {
												"logLevel": "Warning",
												"enableReliableLogging": false
											},
											"logLocationSettings": {
												"linkedServiceName": {
													"referenceName": "MSAZ01_SQL_P12_Blob",
													"type": "LinkedServiceReference"
												}
											}
										},
										"dataIntegrationUnits": {
											"value": "@pipeline().parameters.Maximum_DIU",
											"type": "Expression"
										},
										"translator": {
											"type": "TabularTranslator",
											"mappings": [
												{
													"source": {
														"name": "CC02_CUST",
														"type": "Int32"
													},
													"sink": {
														"name": "CC02_CUST",
														"type": "Int64"
													}
												},
												{
													"source": {
														"name": "CC02_SITE",
														"type": "Int32"
													},
													"sink": {
														"name": "CC02_SITE",
														"type": "Int64"
													}
												},
												{
													"source": {
														"name": "CC02_TYPE",
														"type": "String"
													},
													"sink": {
														"name": "CC02_TYPE",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "CC02_NUMBER",
														"type": "Int32"
													},
													"sink": {
														"name": "CC02_NUMBER",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "CC02_EXPMO",
														"type": "String"
													},
													"sink": {
														"name": "CC02_EXPMO",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "CC02_EXPYE",
														"type": "String"
													},
													"sink": {
														"name": "CC02_EXPYE",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "CC02_CVV2",
														"type": "Int32"
													},
													"sink": {
														"name": "CC02_CVV2",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "CC02_HFNAME",
														"type": "String"
													},
													"sink": {
														"name": "CC02_HFNAME",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "CC02_HLNAME",
														"type": "String"
													},
													"sink": {
														"name": "CC02_HLNAME",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "CC02_HADD",
														"type": "String"
													},
													"sink": {
														"name": "CC02_HADD",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "CC02_HCITY",
														"type": "String"
													},
													"sink": {
														"name": "CC02_HCITY",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "CC02_HSTAT",
														"type": "String"
													},
													"sink": {
														"name": "CC02_HSTAT",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "CC02_HZIP",
														"type": "String"
													},
													"sink": {
														"name": "CC02_HZIP",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "CC02_HCOUN",
														"type": "String"
													},
													"sink": {
														"name": "CC02_HCOUN",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "CC02_HPHON",
														"type": "String"
													},
													"sink": {
														"name": "CC02_HPHON",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "CC02_HEMAIL",
														"type": "String"
													},
													"sink": {
														"name": "CC02_HEMAIL",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "CC02_ACTIVE",
														"type": "Boolean"
													},
													"sink": {
														"name": "CC02_ACTIVE",
														"type": "Boolean"
													}
												},
												{
													"source": {
														"name": "CC02_CHRGTYPE",
														"type": "String"
													},
													"sink": {
														"name": "CC02_CHRGTYPE",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "CC02_ID",
														"type": "Int32"
													},
													"sink": {
														"name": "CC02_ID",
														"type": "Int64"
													}
												},
												{
													"source": {
														"name": "CC02_ROUTNUM",
														"type": "Int32"
													},
													"sink": {
														"name": "CC02_ROUTNUM",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "CC02_ACCTYPE",
														"type": "String"
													},
													"sink": {
														"name": "CC02_ACCTYPE",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "CC02_BANKN",
														"type": "String"
													},
													"sink": {
														"name": "CC02_BANKN",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "CC02_LICNUM",
														"type": "String"
													},
													"sink": {
														"name": "CC02_LICNUM",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "CC02_LICSTAT",
														"type": "String"
													},
													"sink": {
														"name": "CC02_LICSTAT",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "CC02_DOB",
														"type": "DateTime"
													},
													"sink": {
														"name": "CC02_DOB",
														"type": "DateTime"
													}
												},
												{
													"source": {
														"name": "CC02_ACCNAME",
														"type": "String"
													},
													"sink": {
														"name": "CC02_ACCNAME",
														"type": "String"
													}
												}
											]
										}
									},
									"inputs": [
										{
											"referenceName": "TRUX_MSAZ01_SQL_P12",
											"type": "DatasetReference",
											"parameters": {
												"schema": "dbo",
												"table": "CC02",
												"database": "@item().sql_db_name",
												"server": "MSAZ01-SQL-P12"
											}
										}
									],
									"outputs": [
										{
											"referenceName": "LRS_Snowflake_Raw_V2_New",
											"type": "DatasetReference",
											"parameters": {
												"Snowflake_Sink_Table": "CC02",
												"Snowflake_Schema": {
													"value": "@item().Snowflake_Schema_New",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "Copy LF05O",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "Copy CC02",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SqlServerSource",
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"sink": {
											"type": "SnowflakeV2Sink",
											"preCopyScript": {
												"value": "@{concat('truncate table',' ',item().Snowflake_Schema_New,'.LF05O')}",
												"type": "Expression"
											},
											"importSettings": {
												"type": "SnowflakeImportCopyCommand",
												"additionalCopyOptions": {
													"ON_ERROR": "CONTINUE"
												}
											}
										},
										"enableStaging": true,
										"stagingSettings": {
											"linkedServiceName": {
												"referenceName": "MSAZ01_SQL_P12_Blob",
												"type": "LinkedServiceReference"
											},
											"path": "staging",
											"enableCompression": true
										},
										"parallelCopies": {
											"value": "@pipeline().parameters.Degree_Copy_Parallelism",
											"type": "Expression"
										},
										"enableSkipIncompatibleRow": true,
										"logSettings": {
											"enableCopyActivityLog": true,
											"copyActivityLogSettings": {
												"logLevel": "Warning",
												"enableReliableLogging": false
											},
											"logLocationSettings": {
												"linkedServiceName": {
													"referenceName": "MSAZ01_SQL_P12_Blob",
													"type": "LinkedServiceReference"
												}
											}
										},
										"dataIntegrationUnits": {
											"value": "@pipeline().parameters.Maximum_DIU",
											"type": "Expression"
										},
										"translator": {
											"type": "TabularTranslator",
											"mappings": [
												{
													"source": {
														"name": "LF05O_ID",
														"type": "Int32"
													},
													"sink": {
														"name": "LF05O_ID",
														"type": "Int64"
													}
												},
												{
													"source": {
														"name": "LF05O_LINK",
														"type": "Int32"
													},
													"sink": {
														"name": "LF05O_LINK",
														"type": "Int64"
													}
												},
												{
													"source": {
														"name": "LF05O_ORIG",
														"type": "String"
													},
													"sink": {
														"name": "LF05O_ORIG",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "LF05O_PERC",
														"type": "Decimal"
													},
													"sink": {
														"name": "LF05O_PERC",
														"type": "Int64"
													}
												}
											]
										}
									},
									"inputs": [
										{
											"referenceName": "TRUX_MSAZ01_SQL_P12",
											"type": "DatasetReference",
											"parameters": {
												"schema": "dbo",
												"table": "LF05O",
												"database": "@item().sql_db_name",
												"server": "MSAZ01-SQL-P12"
											}
										}
									],
									"outputs": [
										{
											"referenceName": "LRS_Snowflake_Raw_V2_New",
											"type": "DatasetReference",
											"parameters": {
												"Snowflake_Sink_Table": "LF05O",
												"Snowflake_Schema": {
													"value": "@item().Snowflake_Schema_New",
													"type": "Expression"
												}
											}
										}
									]
								}
							]
						}
					},
					{
						"name": "Database Lookup",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SnowflakeV2Source",
								"query": "SELECT * FROM LRS_RAW.MASTER_DATA.SQL_DB_TO_SNOWFLAKE_SCHEMA;",
								"exportSettings": {
									"type": "SnowflakeExportCopyCommand"
								}
							},
							"dataset": {
								"referenceName": "LRS_Snowflake_Raw_V2_New",
								"type": "DatasetReference",
								"parameters": {
									"Snowflake_Sink_Table": "SQL_DB_TO_SNOWFLAKE_SCHEMA",
									"Snowflake_Schema": "MASTER_DATA"
								}
							},
							"firstRowOnly": false
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"Maximum_DIU": {
						"type": "int",
						"defaultValue": 2
					},
					"Degree_Copy_Parallelism": {
						"type": "int",
						"defaultValue": 8
					}
				},
				"folder": {
					"name": "Production/TRUX"
				},
				"annotations": [],
				"lastPublishTime": "2024-09-27T13:50:15Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/TRUX_FULL_LOAD_FACT_NEW_2')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Loop over databases",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Database Lookup",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Database Lookup').output.value",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "DM01P",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SqlServerSource",
											"additionalColumns": [
												{
													"name": "ADF_TIMESTAMP",
													"value": {
														"value": "@utcNow()",
														"type": "Expression"
													}
												}
											],
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"sink": {
											"type": "SnowflakeV2Sink",
											"preCopyScript": {
												"value": "@{concat('truncate table',' ',item().Snowflake_Schema_New,'.DM01P')}",
												"type": "Expression"
											},
											"importSettings": {
												"type": "SnowflakeImportCopyCommand",
												"additionalCopyOptions": {
													"ON_ERROR": "CONTINUE"
												}
											}
										},
										"enableStaging": true,
										"stagingSettings": {
											"linkedServiceName": {
												"referenceName": "MSAZ01_SQL_P12_Blob",
												"type": "LinkedServiceReference"
											},
											"path": "staging",
											"enableCompression": true
										},
										"parallelCopies": {
											"value": "@pipeline().parameters.Degree_Copy_Parallelism",
											"type": "Expression"
										},
										"enableSkipIncompatibleRow": true,
										"logSettings": {
											"enableCopyActivityLog": true,
											"copyActivityLogSettings": {
												"logLevel": "Warning",
												"enableReliableLogging": false
											},
											"logLocationSettings": {
												"linkedServiceName": {
													"referenceName": "MSAZ01_SQL_P12_Blob",
													"type": "LinkedServiceReference"
												}
											}
										},
										"dataIntegrationUnits": {
											"value": "@pipeline().parameters.Maximum_DIU",
											"type": "Expression"
										},
										"translator": {
											"type": "TabularTranslator",
											"mappings": [
												{
													"source": {
														"name": "DM01P_ID",
														"type": "Int32"
													},
													"sink": {
														"name": "DM01P_ID",
														"type": "Int64"
													}
												},
												{
													"source": {
														"name": "DM01P_LINK",
														"type": "Int32"
													},
													"sink": {
														"name": "DM01P_LINK",
														"type": "Int64"
													}
												},
												{
													"source": {
														"name": "DM01P_TYPE",
														"type": "String"
													},
													"sink": {
														"name": "DM01P_TYPE",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "DM01P_DATE",
														"type": "DateTime"
													},
													"sink": {
														"name": "DM01P_DATE",
														"type": "DateTime"
													}
												},
												{
													"source": {
														"name": "DM01P_REFN",
														"type": "String"
													},
													"sink": {
														"name": "DM01P_REFN",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "DM01P_AMNT",
														"type": "Decimal"
													},
													"sink": {
														"name": "DM01P_AMNT",
														"type": "Int64"
													}
												},
												{
													"source": {
														"name": "DM01P_ADJR",
														"type": "String"
													},
													"sink": {
														"name": "DM01P_ADJR",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "DM01P_PERIODCLOSEID",
														"type": "Int32"
													},
													"sink": {
														"name": "DM01P_PERIODCLOSEID",
														"type": "Int64"
													}
												},
												{
													"source": {
														"name": "DM01P_USER",
														"type": "String"
													},
													"sink": {
														"name": "DM01P_USER",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "DM01P_RDATE",
														"type": "DateTime"
													},
													"sink": {
														"name": "DM01P_RDATE",
														"type": "DateTime"
													}
												},
												{
													"source": {
														"name": "DM01P_BATCH",
														"type": "Int32"
													},
													"sink": {
														"name": "DM01P_BATCH",
														"type": "Int64"
													}
												},
												{
													"source": {
														"name": "DM01P_GLNU",
														"type": "String"
													},
													"sink": {
														"name": "DM01P_GLNU",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "DM01P_NOTEID",
														"type": "Int32"
													},
													"sink": {
														"name": "DM01P_NOTEID",
														"type": "Int64"
													}
												},
												{
													"source": {
														"name": "DM01P_LINKID",
														"type": "Int32"
													},
													"sink": {
														"name": "DM01P_LINKID",
														"type": "Int64"
													}
												},
												{
													"source": {
														"name": "DM01P_GROUP",
														"type": "Int32"
													},
													"sink": {
														"name": "DM01P_GROUP",
														"type": "Int64"
													}
												},
												{
													"source": {
														"name": "ADF_TIMESTAMP",
														"type": "String"
													},
													"sink": {
														"name": "ADF_TIMESTAMP",
														"type": "DateTime"
													}
												}
											]
										}
									},
									"inputs": [
										{
											"referenceName": "TRUX_MSAZ01_SQL_P12",
											"type": "DatasetReference",
											"parameters": {
												"schema": "dbo",
												"table": "DM01P",
												"database": {
													"value": "@item().sql_db_name",
													"type": "Expression"
												},
												"server": "MSAZ01-SQL-P12"
											}
										}
									],
									"outputs": [
										{
											"referenceName": "LRS_Snowflake_Raw_V2_New",
											"type": "DatasetReference",
											"parameters": {
												"Snowflake_Sink_Table": "DM01P",
												"Snowflake_Schema": {
													"value": "@item().Snowflake_Schema_New",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "RM07",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "DM01P",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SqlServerSource",
											"additionalColumns": [
												{
													"name": "ADF_TIMESTAMP",
													"value": {
														"value": "@utcNow()",
														"type": "Expression"
													}
												}
											],
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"sink": {
											"type": "SnowflakeV2Sink",
											"preCopyScript": {
												"value": "@{concat('truncate table',' ',item().Snowflake_Schema_New,'.RM07')}",
												"type": "Expression"
											},
											"importSettings": {
												"type": "SnowflakeImportCopyCommand",
												"additionalCopyOptions": {
													"ON_ERROR": "CONTINUE"
												}
											}
										},
										"enableStaging": true,
										"stagingSettings": {
											"linkedServiceName": {
												"referenceName": "MSAZ01_SQL_P12_Blob",
												"type": "LinkedServiceReference"
											},
											"path": "staging",
											"enableCompression": true
										},
										"parallelCopies": {
											"value": "@pipeline().parameters.Degree_Copy_Parallelism",
											"type": "Expression"
										},
										"enableSkipIncompatibleRow": true,
										"logSettings": {
											"enableCopyActivityLog": true,
											"copyActivityLogSettings": {
												"logLevel": "Warning",
												"enableReliableLogging": false
											},
											"logLocationSettings": {
												"linkedServiceName": {
													"referenceName": "MSAZ01_SQL_P12_Blob",
													"type": "LinkedServiceReference"
												}
											}
										},
										"dataIntegrationUnits": {
											"value": "@pipeline().parameters.Maximum_DIU",
											"type": "Expression"
										},
										"translator": {
											"type": "TabularTranslator",
											"mappings": [
												{
													"source": {
														"name": "RM07_RDTE",
														"type": "DateTime"
													},
													"sink": {
														"name": "RM07_RDTE",
														"type": "DateTime"
													}
												},
												{
													"source": {
														"name": "RM07_ROUT",
														"type": "Int32"
													},
													"sink": {
														"name": "RM07_ROUT",
														"type": "Int64"
													}
												},
												{
													"source": {
														"name": "RM07_REASON",
														"type": "String"
													},
													"sink": {
														"name": "RM07_REASON",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "RM07_TIME",
														"type": "Int32"
													},
													"sink": {
														"name": "RM07_TIME",
														"type": "Int64"
													}
												},
												{
													"source": {
														"name": "RM07_TRUK",
														"type": "Int32"
													},
													"sink": {
														"name": "RM07_TRUK",
														"type": "Int64"
													}
												},
												{
													"source": {
														"name": "RM07_ODOM",
														"type": "Int32"
													},
													"sink": {
														"name": "RM07_ODOM",
														"type": "Int64"
													}
												},
												{
													"source": {
														"name": "RM07_STIME",
														"type": "DateTime"
													},
													"sink": {
														"name": "RM07_STIME",
														"type": "DateTime"
													}
												},
												{
													"source": {
														"name": "RM07_ETIME",
														"type": "DateTime"
													},
													"sink": {
														"name": "RM07_ETIME",
														"type": "DateTime"
													}
												},
												{
													"source": {
														"name": "RM07_DRIV",
														"type": "Int32"
													},
													"sink": {
														"name": "RM07_DRIV",
														"type": "Int64"
													}
												},
												{
													"source": {
														"name": "ADF_TIMESTAMP",
														"type": "String"
													},
													"sink": {
														"name": "ADF_TIMESTAMP",
														"type": "DateTime"
													}
												}
											]
										}
									},
									"inputs": [
										{
											"referenceName": "TRUX_MSAZ01_SQL_P12",
											"type": "DatasetReference",
											"parameters": {
												"schema": "dbo",
												"table": "RM07",
												"database": {
													"value": "@item().sql_db_name",
													"type": "Expression"
												},
												"server": "MSAZ01-SQL-P12"
											}
										}
									],
									"outputs": [
										{
											"referenceName": "LRS_Snowflake_Raw_V2_New",
											"type": "DatasetReference",
											"parameters": {
												"Snowflake_Sink_Table": "RM07",
												"Snowflake_Schema": {
													"value": "@item().Snowflake_Schema_New",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "CCLOG",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "RM07",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SqlServerSource",
											"additionalColumns": [
												{
													"name": "ADF_TIMESTAMP",
													"value": {
														"value": "@utcNow()",
														"type": "Expression"
													}
												}
											],
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"sink": {
											"type": "SnowflakeV2Sink",
											"preCopyScript": {
												"value": "@{concat('truncate table',' ',item().Snowflake_Schema_New,'.CCLOG')}",
												"type": "Expression"
											},
											"importSettings": {
												"type": "SnowflakeImportCopyCommand",
												"additionalCopyOptions": {
													"ON_ERROR": "CONTINUE"
												}
											}
										},
										"enableStaging": true,
										"stagingSettings": {
											"linkedServiceName": {
												"referenceName": "MSAZ01_SQL_P12_Blob",
												"type": "LinkedServiceReference"
											},
											"path": "staging",
											"enableCompression": true
										},
										"parallelCopies": {
											"value": "@pipeline().parameters.Degree_Copy_Parallelism",
											"type": "Expression"
										},
										"enableSkipIncompatibleRow": true,
										"logSettings": {
											"enableCopyActivityLog": true,
											"copyActivityLogSettings": {
												"logLevel": "Warning",
												"enableReliableLogging": false
											},
											"logLocationSettings": {
												"linkedServiceName": {
													"referenceName": "MSAZ01_SQL_P12_Blob",
													"type": "LinkedServiceReference"
												}
											}
										},
										"dataIntegrationUnits": {
											"value": "@pipeline().parameters.Maximum_DIU",
											"type": "Expression"
										},
										"translator": {
											"type": "TabularTranslator",
											"mappings": [
												{
													"source": {
														"name": "CCLOG_ID",
														"type": "Int32"
													},
													"sink": {
														"name": "CCLOG_ID",
														"type": "Int64"
													}
												},
												{
													"source": {
														"name": "CCLOG_CUST",
														"type": "Int32"
													},
													"sink": {
														"name": "CCLOG_CUST",
														"type": "Int64"
													}
												},
												{
													"source": {
														"name": "CCLOG_SITE",
														"type": "Int32"
													},
													"sink": {
														"name": "CCLOG_SITE",
														"type": "Int64"
													}
												},
												{
													"source": {
														"name": "CCLOG_TDATE",
														"type": "DateTime"
													},
													"sink": {
														"name": "CCLOG_TDATE",
														"type": "DateTime"
													}
												},
												{
													"source": {
														"name": "CCLOG_PDATE",
														"type": "DateTime"
													},
													"sink": {
														"name": "CCLOG_PDATE",
														"type": "DateTime"
													}
												},
												{
													"source": {
														"name": "CCLOG_USER",
														"type": "String"
													},
													"sink": {
														"name": "CCLOG_USER",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "CCLOG_INVC",
														"type": "String"
													},
													"sink": {
														"name": "CCLOG_INVC",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "CCLOG_AMNT",
														"type": "Decimal"
													},
													"sink": {
														"name": "CCLOG_AMNT",
														"type": "Int64"
													}
												},
												{
													"source": {
														"name": "CCLOG_APPV",
														"type": "Boolean"
													},
													"sink": {
														"name": "CCLOG_APPV",
														"type": "Boolean"
													}
												},
												{
													"source": {
														"name": "CCLOG_TRANID",
														"type": "String"
													},
													"sink": {
														"name": "CCLOG_TRANID",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "CCLOG_ACODE",
														"type": "String"
													},
													"sink": {
														"name": "CCLOG_ACODE",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "CCLOG_RCODE",
														"type": "String"
													},
													"sink": {
														"name": "CCLOG_RCODE",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "CCLOG_RTEXT",
														"type": "String"
													},
													"sink": {
														"name": "CCLOG_RTEXT",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "CCLOG_RTRANID",
														"type": "String"
													},
													"sink": {
														"name": "CCLOG_RTRANID",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "CCLOG_CC02ID",
														"type": "Int32"
													},
													"sink": {
														"name": "CCLOG_CC02ID",
														"type": "Int64"
													}
												},
												{
													"source": {
														"name": "ADF_TIMESTAMP",
														"type": "String"
													},
													"sink": {
														"name": "ADF_TIMESTAMP",
														"type": "DateTime"
													}
												}
											]
										}
									},
									"inputs": [
										{
											"referenceName": "TRUX_MSAZ01_SQL_P12",
											"type": "DatasetReference",
											"parameters": {
												"schema": "dbo",
												"table": "CCLOG",
												"database": {
													"value": "@item().sql_db_name",
													"type": "Expression"
												},
												"server": "MSAZ01-SQL-P12"
											}
										}
									],
									"outputs": [
										{
											"referenceName": "LRS_Snowflake_Raw_V2_New",
											"type": "DatasetReference",
											"parameters": {
												"Snowflake_Sink_Table": "CCLOG",
												"Snowflake_Schema": {
													"value": "@item().Snowflake_Schema_New",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "EA01",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "CCLOG",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SqlServerSource",
											"additionalColumns": [
												{
													"name": "ADF_TIMESTAMP",
													"value": {
														"value": "@utcNow()",
														"type": "Expression"
													}
												}
											],
											"sqlReaderQuery": "SELECT [EA01_ID]\r\n     , [EA01_DM01ID]\r\n     , [EA01_EMAILTO]\r\n     , [EA01_USER]\r\n     , CAST ([EA01_SDTE ] AS smalldatetime) AS [EA01_SDTE]\r\n     , [EA01_STATUS]\r\n     , [EA01_MESSAGE]\r\n  FROM [dbo].[EA01]",
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"sink": {
											"type": "SnowflakeV2Sink",
											"preCopyScript": {
												"value": "@{concat('truncate table',' ',item().Snowflake_Schema_New,'.EA01')}",
												"type": "Expression"
											},
											"importSettings": {
												"type": "SnowflakeImportCopyCommand",
												"additionalCopyOptions": {
													"ON_ERROR": "CONTINUE"
												}
											}
										},
										"enableStaging": true,
										"stagingSettings": {
											"linkedServiceName": {
												"referenceName": "MSAZ01_SQL_P12_Blob",
												"type": "LinkedServiceReference"
											},
											"path": "staging",
											"enableCompression": true
										},
										"parallelCopies": {
											"value": "@pipeline().parameters.Degree_Copy_Parallelism",
											"type": "Expression"
										},
										"enableSkipIncompatibleRow": true,
										"logSettings": {
											"enableCopyActivityLog": true,
											"copyActivityLogSettings": {
												"logLevel": "Warning",
												"enableReliableLogging": false
											},
											"logLocationSettings": {
												"linkedServiceName": {
													"referenceName": "MSAZ01_SQL_P12_Blob",
													"type": "LinkedServiceReference"
												}
											}
										},
										"dataIntegrationUnits": {
											"value": "@pipeline().parameters.Maximum_DIU",
											"type": "Expression"
										},
										"translator": {
											"type": "TabularTranslator",
											"mappings": [
												{
													"source": {
														"name": "EA01_ID",
														"type": "Int32"
													},
													"sink": {
														"name": "EA01_ID",
														"type": "Int64"
													}
												},
												{
													"source": {
														"name": "EA01_DM01ID",
														"type": "Int32"
													},
													"sink": {
														"name": "EA01_DM01ID",
														"type": "Int64"
													}
												},
												{
													"source": {
														"name": "EA01_EMAILTO",
														"type": "String"
													},
													"sink": {
														"name": "EA01_EMAILTO",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "EA01_USER",
														"type": "String"
													},
													"sink": {
														"name": "EA01_USER",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "EA01_SDTE",
														"type": "DateTime"
													},
													"sink": {
														"name": "EA01_SDTE",
														"type": "DateTime"
													}
												},
												{
													"source": {
														"name": "EA01_STATUS",
														"type": "Boolean"
													},
													"sink": {
														"name": "EA01_STATUS",
														"type": "Boolean"
													}
												},
												{
													"source": {
														"name": "EA01_MESSAGE",
														"type": "String"
													},
													"sink": {
														"name": "EA01_MESSAGE",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "ADF_TIMESTAMP",
														"type": "String"
													},
													"sink": {
														"name": "ADF_TIMESTAMP",
														"type": "DateTime"
													}
												}
											]
										}
									},
									"inputs": [
										{
											"referenceName": "TRUX_MSAZ01_SQL_P12",
											"type": "DatasetReference",
											"parameters": {
												"schema": "dbo",
												"table": "EA01",
												"database": {
													"value": "@item().sql_db_name",
													"type": "Expression"
												},
												"server": "MSAZ01-SQL-P12"
											}
										}
									],
									"outputs": [
										{
											"referenceName": "LRS_Snowflake_Raw_V2_New",
											"type": "DatasetReference",
											"parameters": {
												"Snowflake_Sink_Table": "EA01",
												"Snowflake_Schema": {
													"value": "@item().Snowflake_Schema_New",
													"type": "Expression"
												}
											}
										}
									]
								}
							]
						}
					},
					{
						"name": "Database Lookup",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SnowflakeV2Source",
								"exportSettings": {
									"type": "SnowflakeExportCopyCommand"
								}
							},
							"dataset": {
								"referenceName": "LRS_Snowflake_Raw_V2_New",
								"type": "DatasetReference",
								"parameters": {
									"Snowflake_Sink_Table": "VW_TRUX_WATERMARK_PVT",
									"Snowflake_Schema": "MASTER_DATA"
								}
							},
							"firstRowOnly": false
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"Maximum_DIU": {
						"type": "int",
						"defaultValue": 2
					},
					"Degree_Copy_Parallelism": {
						"type": "int",
						"defaultValue": 8
					}
				},
				"folder": {
					"name": "Production/TRUX"
				},
				"annotations": [],
				"lastPublishTime": "2024-08-30T17:58:00Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/TRUX_INCREMENTAL_LOAD_FACT_NEW_2')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Trux ID Watermark Lookup",
						"description": "look up schema, database and table names from sqlsever and snowflake",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SnowflakeV2Source",
								"exportSettings": {
									"type": "SnowflakeExportCopyCommand"
								}
							},
							"dataset": {
								"referenceName": "LRS_Snowflake_Raw_V2_New",
								"type": "DatasetReference",
								"parameters": {
									"Snowflake_Sink_Table": "VW_TRUX_WATERMARK_PVT",
									"Snowflake_Schema": "MASTER_DATA"
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "Incremental Loop Over ID Watermark Tables",
						"description": "Activity to loop over tables that have primary keys with incremental IDs. This loops looks at our Watermark table in Snowflake and appends any IDs found in SQL server that are greater than the latest watermark in Snowflake.",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Trux ID Watermark Lookup",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Trux ID Watermark Lookup').output.value",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "DM01P",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SqlServerSource",
											"additionalColumns": [
												{
													"name": "ADF_TIMESTAMP",
													"value": {
														"value": "@utcNow()",
														"type": "Expression"
													}
												}
											],
											"sqlReaderQuery": {
												"value": "select * from DM01P\nwhere DM01P_ID > @{item().DM01P}",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"sink": {
											"type": "SnowflakeV2Sink",
											"importSettings": {
												"type": "SnowflakeImportCopyCommand",
												"additionalCopyOptions": {
													"ON_ERROR": "SKIP_FILE"
												}
											}
										},
										"enableStaging": true,
										"stagingSettings": {
											"linkedServiceName": {
												"referenceName": "MSAZ01_SQL_P12_Blob",
												"type": "LinkedServiceReference"
											},
											"path": "staging",
											"enableCompression": true
										},
										"parallelCopies": {
											"value": "@pipeline().parameters.Degree_Copy_Parallelism",
											"type": "Expression"
										},
										"enableSkipIncompatibleRow": true,
										"dataIntegrationUnits": {
											"value": "@pipeline().parameters.Maximum_DIU",
											"type": "Expression"
										},
										"translator": {
											"type": "TabularTranslator",
											"mappings": [
												{
													"source": {
														"name": "DM01P_ID",
														"type": "Int32"
													},
													"sink": {
														"name": "DM01P_ID",
														"type": "Int64"
													}
												},
												{
													"source": {
														"name": "DM01P_LINK",
														"type": "Int32"
													},
													"sink": {
														"name": "DM01P_LINK",
														"type": "Int64"
													}
												},
												{
													"source": {
														"name": "DM01P_TYPE",
														"type": "String"
													},
													"sink": {
														"name": "DM01P_TYPE",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "DM01P_DATE",
														"type": "DateTime"
													},
													"sink": {
														"name": "DM01P_DATE",
														"type": "DateTime"
													}
												},
												{
													"source": {
														"name": "DM01P_REFN",
														"type": "String"
													},
													"sink": {
														"name": "DM01P_REFN",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "DM01P_AMNT",
														"type": "Decimal"
													},
													"sink": {
														"name": "DM01P_AMNT",
														"type": "Int64"
													}
												},
												{
													"source": {
														"name": "DM01P_ADJR",
														"type": "String"
													},
													"sink": {
														"name": "DM01P_ADJR",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "DM01P_PERIODCLOSEID",
														"type": "Int32"
													},
													"sink": {
														"name": "DM01P_PERIODCLOSEID",
														"type": "Int64"
													}
												},
												{
													"source": {
														"name": "DM01P_USER",
														"type": "String"
													},
													"sink": {
														"name": "DM01P_USER",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "DM01P_RDATE",
														"type": "DateTime"
													},
													"sink": {
														"name": "DM01P_RDATE",
														"type": "DateTime"
													}
												},
												{
													"source": {
														"name": "DM01P_BATCH",
														"type": "Int32"
													},
													"sink": {
														"name": "DM01P_BATCH",
														"type": "Int64"
													}
												},
												{
													"source": {
														"name": "DM01P_GLNU",
														"type": "String"
													},
													"sink": {
														"name": "DM01P_GLNU",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "DM01P_NOTEID",
														"type": "Int32"
													},
													"sink": {
														"name": "DM01P_NOTEID",
														"type": "Int64"
													}
												},
												{
													"source": {
														"name": "DM01P_LINKID",
														"type": "Int32"
													},
													"sink": {
														"name": "DM01P_LINKID",
														"type": "Int64"
													}
												},
												{
													"source": {
														"name": "DM01P_GROUP",
														"type": "Int32"
													},
													"sink": {
														"name": "DM01P_GROUP",
														"type": "Int64"
													}
												},
												{
													"source": {
														"name": "ADF_TIMESTAMP",
														"type": "String"
													},
													"sink": {
														"name": "ADF_TIMESTAMP",
														"type": "DateTime"
													}
												}
											]
										}
									},
									"inputs": [
										{
											"referenceName": "TRUX_MSAZ01_SQL_P12",
											"type": "DatasetReference",
											"parameters": {
												"schema": "dbo",
												"table": "DM01P",
												"database": {
													"value": "@item().sql_db_name",
													"type": "Expression"
												},
												"server": "MSAZ01-SQL-P12"
											}
										}
									],
									"outputs": [
										{
											"referenceName": "LRS_Snowflake_Raw_V2_New",
											"type": "DatasetReference",
											"parameters": {
												"Snowflake_Sink_Table": "DM01P",
												"Snowflake_Schema": {
													"value": "@item().Snowflake_Schema_New",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "RM07",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "DM01P",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SqlServerSource",
											"additionalColumns": [
												{
													"name": "ADF_TIMESTAMP",
													"value": {
														"value": "@utcNow()",
														"type": "Expression"
													}
												}
											],
											"sqlReaderQuery": {
												"value": "select * from RM07\nwhere format(RM07_RDTE,'yyyyMMdd') > @{item().RM07}",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"sink": {
											"type": "SnowflakeV2Sink",
											"importSettings": {
												"type": "SnowflakeImportCopyCommand",
												"additionalCopyOptions": {
													"ON_ERROR": "SKIP_FILE"
												}
											}
										},
										"enableStaging": true,
										"stagingSettings": {
											"linkedServiceName": {
												"referenceName": "MSAZ01_SQL_P12_Blob",
												"type": "LinkedServiceReference"
											},
											"path": "staging",
											"enableCompression": true
										},
										"parallelCopies": {
											"value": "@pipeline().parameters.Degree_Copy_Parallelism",
											"type": "Expression"
										},
										"enableSkipIncompatibleRow": true,
										"dataIntegrationUnits": {
											"value": "@pipeline().parameters.Maximum_DIU",
											"type": "Expression"
										},
										"translator": {
											"type": "TabularTranslator",
											"mappings": [
												{
													"source": {
														"name": "RM07_RDTE",
														"type": "DateTime"
													},
													"sink": {
														"name": "RM07_RDTE",
														"type": "DateTime"
													}
												},
												{
													"source": {
														"name": "RM07_ROUT",
														"type": "Int32"
													},
													"sink": {
														"name": "RM07_ROUT",
														"type": "Int64"
													}
												},
												{
													"source": {
														"name": "RM07_REASON",
														"type": "String"
													},
													"sink": {
														"name": "RM07_REASON",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "RM07_TIME",
														"type": "Int32"
													},
													"sink": {
														"name": "RM07_TIME",
														"type": "Int64"
													}
												},
												{
													"source": {
														"name": "RM07_TRUK",
														"type": "Int32"
													},
													"sink": {
														"name": "RM07_TRUK",
														"type": "Int64"
													}
												},
												{
													"source": {
														"name": "RM07_ODOM",
														"type": "Int32"
													},
													"sink": {
														"name": "RM07_ODOM",
														"type": "Int64"
													}
												},
												{
													"source": {
														"name": "RM07_STIME",
														"type": "DateTime"
													},
													"sink": {
														"name": "RM07_STIME",
														"type": "DateTime"
													}
												},
												{
													"source": {
														"name": "RM07_ETIME",
														"type": "DateTime"
													},
													"sink": {
														"name": "RM07_ETIME",
														"type": "DateTime"
													}
												},
												{
													"source": {
														"name": "RM07_DRIV",
														"type": "Int32"
													},
													"sink": {
														"name": "RM07_DRIV",
														"type": "Int64"
													}
												},
												{
													"source": {
														"name": "ADF_TIMESTAMP",
														"type": "String"
													},
													"sink": {
														"name": "ADF_TIMESTAMP",
														"type": "DateTime"
													}
												}
											]
										}
									},
									"inputs": [
										{
											"referenceName": "TRUX_MSAZ01_SQL_P12",
											"type": "DatasetReference",
											"parameters": {
												"schema": "dbo",
												"table": "RM07",
												"database": "@item().sql_db_name",
												"server": "MSAZ01-SQL-P12"
											}
										}
									],
									"outputs": [
										{
											"referenceName": "LRS_Snowflake_Raw_V2_New",
											"type": "DatasetReference",
											"parameters": {
												"Snowflake_Sink_Table": "RM07",
												"Snowflake_Schema": "@item().Snowflake_Schema_New"
											}
										}
									]
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"Maximum_DIU": {
						"type": "int",
						"defaultValue": 2
					},
					"Degree_Copy_Parallelism": {
						"type": "int",
						"defaultValue": 8
					},
					"Incremental_Range": {
						"type": "string",
						"defaultValue": "14"
					}
				},
				"variables": {
					"tempArray": {
						"type": "Array"
					},
					"TempResult": {
						"type": "Array"
					},
					"ResultsArray": {
						"type": "Array"
					},
					"OutputArray": {
						"type": "Array"
					},
					"append": {
						"type": "Array"
					}
				},
				"folder": {
					"name": "Production/TRUX"
				},
				"annotations": [],
				"lastPublishTime": "2024-08-30T17:58:00Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/TRUX_LEGACY_DATA_LOAD_copy1')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Loop over databases",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Database Lookup",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Database Lookup').output.value",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Copy SL01",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SqlServerSource",
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"sink": {
											"type": "SnowflakeV2Sink",
											"preCopyScript": {
												"value": "@{concat('truncate table',' ',item().Snowflake_Name_New,'.SL01')}",
												"type": "Expression"
											},
											"importSettings": {
												"type": "SnowflakeImportCopyCommand",
												"additionalCopyOptions": {
													"ON_ERROR": "CONTINUE"
												}
											}
										},
										"enableStaging": true,
										"stagingSettings": {
											"linkedServiceName": {
												"referenceName": "msaz01_dm01_Azure_Blob",
												"type": "LinkedServiceReference"
											},
											"path": "staging",
											"enableCompression": true
										},
										"parallelCopies": {
											"value": "@pipeline().parameters.Degree_Copy_Parallelism",
											"type": "Expression"
										},
										"enableSkipIncompatibleRow": true,
										"logSettings": {
											"enableCopyActivityLog": true,
											"copyActivityLogSettings": {
												"logLevel": "Warning",
												"enableReliableLogging": false
											},
											"logLocationSettings": {
												"linkedServiceName": {
													"referenceName": "msaz01_dm01_Azure_Blob",
													"type": "LinkedServiceReference"
												}
											}
										},
										"dataIntegrationUnits": {
											"value": "@pipeline().parameters.Maximum_DIU",
											"type": "Expression"
										},
										"translator": {
											"type": "TabularTranslator",
											"mappings": [
												{
													"source": {
														"name": "SL01_ID",
														"type": "Int32"
													},
													"sink": {
														"name": "SL01_ID",
														"type": "Int64"
													}
												},
												{
													"source": {
														"name": "SL01_NAME",
														"type": "String"
													},
													"sink": {
														"name": "SL01_NAME",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "SL01_ADDS",
														"type": "String"
													},
													"sink": {
														"name": "SL01_ADDS",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "SL01_CITY",
														"type": "String"
													},
													"sink": {
														"name": "SL01_CITY",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "SL01_STAT",
														"type": "String"
													},
													"sink": {
														"name": "SL01_STAT",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "SL01_PZIP",
														"type": "String"
													},
													"sink": {
														"name": "SL01_PZIP",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "SL01_LATT",
														"type": "Decimal"
													},
													"sink": {
														"name": "SL01_LATT",
														"type": "Int64"
													}
												},
												{
													"source": {
														"name": "SL01_LONG",
														"type": "Decimal"
													},
													"sink": {
														"name": "SL01_LONG",
														"type": "Int64"
													}
												},
												{
													"source": {
														"name": "SL01_ACTIVE",
														"type": "Boolean"
													},
													"sink": {
														"name": "SL01_ACTIVE",
														"type": "String"
													}
												}
											]
										}
									},
									"inputs": [
										{
											"referenceName": "TRUX_LEGACY01",
											"type": "DatasetReference",
											"parameters": {
												"schema": "dbo",
												"table": "SL01",
												"database": {
													"value": "@item().sql_db_name",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "LRS_Snowflake_Raw_V2",
											"type": "DatasetReference",
											"parameters": {
												"Snowflake_Sink_Table": "SL01",
												"Snowflake_Schema": "@item().Snowflake_Name_New"
											}
										}
									]
								},
								{
									"name": "Copy SP03",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "Copy SL01",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SqlServerSource",
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"sink": {
											"type": "SnowflakeV2Sink",
											"preCopyScript": {
												"value": "@{concat('truncate table',' ',item().Snowflake_Name_New,'.SP03')}",
												"type": "Expression"
											},
											"importSettings": {
												"type": "SnowflakeImportCopyCommand",
												"additionalCopyOptions": {
													"ON_ERROR": "CONTINUE"
												}
											}
										},
										"enableStaging": true,
										"stagingSettings": {
											"linkedServiceName": {
												"referenceName": "msaz01_dm01_Azure_Blob",
												"type": "LinkedServiceReference"
											},
											"path": "staging",
											"enableCompression": true
										},
										"parallelCopies": {
											"value": "@pipeline().parameters.Degree_Copy_Parallelism",
											"type": "Expression"
										},
										"enableSkipIncompatibleRow": true,
										"logSettings": {
											"enableCopyActivityLog": true,
											"copyActivityLogSettings": {
												"logLevel": "Warning",
												"enableReliableLogging": false
											},
											"logLocationSettings": {
												"linkedServiceName": {
													"referenceName": "msaz01_dm01_Azure_Blob",
													"type": "LinkedServiceReference"
												}
											}
										},
										"dataIntegrationUnits": {
											"value": "@pipeline().parameters.Maximum_DIU",
											"type": "Expression"
										},
										"translator": {
											"type": "TabularTranslator",
											"mappings": [
												{
													"source": {
														"name": "SP03_ID",
														"type": "Int32"
													},
													"sink": {
														"name": "SP03_ID",
														"type": "Int64"
													}
												},
												{
													"source": {
														"name": "SP03_LINK",
														"type": "Int32"
													},
													"sink": {
														"name": "SP03_LINK",
														"type": "Int64"
													}
												},
												{
													"source": {
														"name": "SP03_CUST",
														"type": "Int32"
													},
													"sink": {
														"name": "SP03_CUST",
														"type": "Int64"
													}
												},
												{
													"source": {
														"name": "SP03_REFE",
														"type": "String"
													},
													"sink": {
														"name": "SP03_REFE",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "SP03_SITE",
														"type": "Int32"
													},
													"sink": {
														"name": "SP03_SITE",
														"type": "Int64"
													}
												}
											]
										}
									},
									"inputs": [
										{
											"referenceName": "TRUX_LEGACY01",
											"type": "DatasetReference",
											"parameters": {
												"schema": "dbo",
												"table": "SP03",
												"database": {
													"value": "@item().sql_db_name",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "LRS_Snowflake_Raw_V2",
											"type": "DatasetReference",
											"parameters": {
												"Snowflake_Sink_Table": "SP03",
												"Snowflake_Schema": "@item().Snowflake_Name_New"
											}
										}
									]
								},
								{
									"name": "Copy CC02",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "Copy SP03",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SqlServerSource",
											"sqlReaderQuery": "SELECT \n      [CC02_CUST]\n      ,[CC02_SITE]\n      ,[CC02_TYPE]\n      , NULL AS [CC02_NUMBER]\n      ,[CC02_EXPMO]\n      ,[CC02_EXPYE]\n      , NULL AS [CC02_CVV2]\n      ,[CC02_HFNAME]\n      ,[CC02_HLNAME]\n      ,[CC02_HADD]\n      ,[CC02_HCITY]\n      ,[CC02_HSTAT]\n      ,[CC02_HZIP]\n      ,[CC02_HCOUN]\n      ,[CC02_HPHON]\n      ,[CC02_HEMAIL]\n      ,[CC02_ACTIVE]\n      ,[CC02_CHRGTYPE]\n      ,[CC02_ID]\n      , NULL AS [CC02_ROUTNUM]\n      ,[CC02_ACCTYPE]\n      ,[CC02_BANKN]\n      ,[CC02_LICNUM]\n      ,[CC02_LICSTAT]\n      ,[CC02_DOB]\n      ,[CC02_ACCNAME]\n      ,[CC02_TOKEN]\n      ,[CC02_ACCOUNTTYPE]\nFROM \n      dbo.CC02",
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"sink": {
											"type": "SnowflakeV2Sink",
											"preCopyScript": {
												"value": "@{concat('truncate table',' ',item().Snowflake_Name_New,'.CC02')}",
												"type": "Expression"
											},
											"importSettings": {
												"type": "SnowflakeImportCopyCommand",
												"additionalCopyOptions": {
													"ON_ERROR": "CONTINUE"
												}
											}
										},
										"enableStaging": true,
										"stagingSettings": {
											"linkedServiceName": {
												"referenceName": "msaz01_dm01_Azure_Blob",
												"type": "LinkedServiceReference"
											},
											"path": "staging",
											"enableCompression": true
										},
										"parallelCopies": {
											"value": "@pipeline().parameters.Degree_Copy_Parallelism",
											"type": "Expression"
										},
										"enableSkipIncompatibleRow": true,
										"logSettings": {
											"enableCopyActivityLog": true,
											"copyActivityLogSettings": {
												"logLevel": "Warning",
												"enableReliableLogging": false
											},
											"logLocationSettings": {
												"linkedServiceName": {
													"referenceName": "msaz01_dm01_Azure_Blob",
													"type": "LinkedServiceReference"
												}
											}
										},
										"dataIntegrationUnits": {
											"value": "@pipeline().parameters.Maximum_DIU",
											"type": "Expression"
										},
										"translator": {
											"type": "TabularTranslator",
											"mappings": [
												{
													"source": {
														"name": "CC02_CUST",
														"type": "Int32"
													},
													"sink": {
														"name": "CC02_CUST",
														"type": "Int64"
													}
												},
												{
													"source": {
														"name": "CC02_SITE",
														"type": "Int32"
													},
													"sink": {
														"name": "CC02_SITE",
														"type": "Int64"
													}
												},
												{
													"source": {
														"name": "CC02_TYPE",
														"type": "String"
													},
													"sink": {
														"name": "CC02_TYPE",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "CC02_NUMBER",
														"type": "Int32"
													},
													"sink": {
														"name": "CC02_NUMBER",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "CC02_EXPMO",
														"type": "String"
													},
													"sink": {
														"name": "CC02_EXPMO",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "CC02_EXPYE",
														"type": "String"
													},
													"sink": {
														"name": "CC02_EXPYE",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "CC02_CVV2",
														"type": "Int32"
													},
													"sink": {
														"name": "CC02_CVV2",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "CC02_HFNAME",
														"type": "String"
													},
													"sink": {
														"name": "CC02_HFNAME",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "CC02_HLNAME",
														"type": "String"
													},
													"sink": {
														"name": "CC02_HLNAME",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "CC02_HADD",
														"type": "String"
													},
													"sink": {
														"name": "CC02_HADD",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "CC02_HCITY",
														"type": "String"
													},
													"sink": {
														"name": "CC02_HCITY",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "CC02_HSTAT",
														"type": "String"
													},
													"sink": {
														"name": "CC02_HSTAT",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "CC02_HZIP",
														"type": "String"
													},
													"sink": {
														"name": "CC02_HZIP",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "CC02_HCOUN",
														"type": "String"
													},
													"sink": {
														"name": "CC02_HCOUN",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "CC02_HPHON",
														"type": "String"
													},
													"sink": {
														"name": "CC02_HPHON",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "CC02_HEMAIL",
														"type": "String"
													},
													"sink": {
														"name": "CC02_HEMAIL",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "CC02_ACTIVE",
														"type": "Boolean"
													},
													"sink": {
														"name": "CC02_ACTIVE",
														"type": "Boolean"
													}
												},
												{
													"source": {
														"name": "CC02_CHRGTYPE",
														"type": "String"
													},
													"sink": {
														"name": "CC02_CHRGTYPE",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "CC02_ID",
														"type": "Int32"
													},
													"sink": {
														"name": "CC02_ID",
														"type": "Int64"
													}
												},
												{
													"source": {
														"name": "CC02_ROUTNUM",
														"type": "Int32"
													},
													"sink": {
														"name": "CC02_ROUTNUM",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "CC02_ACCTYPE",
														"type": "String"
													},
													"sink": {
														"name": "CC02_ACCTYPE",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "CC02_BANKN",
														"type": "String"
													},
													"sink": {
														"name": "CC02_BANKN",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "CC02_LICNUM",
														"type": "String"
													},
													"sink": {
														"name": "CC02_LICNUM",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "CC02_LICSTAT",
														"type": "String"
													},
													"sink": {
														"name": "CC02_LICSTAT",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "CC02_DOB",
														"type": "DateTime"
													},
													"sink": {
														"name": "CC02_DOB",
														"type": "DateTime"
													}
												},
												{
													"source": {
														"name": "CC02_ACCNAME",
														"type": "String"
													},
													"sink": {
														"name": "CC02_ACCNAME",
														"type": "String"
													}
												}
											]
										}
									},
									"inputs": [
										{
											"referenceName": "TRUX_LEGACY01",
											"type": "DatasetReference",
											"parameters": {
												"schema": "dbo",
												"table": "CC02",
												"database": {
													"value": "@item().sql_db_name",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "LRS_Snowflake_Raw_V2",
											"type": "DatasetReference",
											"parameters": {
												"Snowflake_Sink_Table": "CC02",
												"Snowflake_Schema": "@item().Snowflake_Name_New"
											}
										}
									]
								},
								{
									"name": "Copy LF05O",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "Copy CC02",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SqlServerSource",
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"sink": {
											"type": "SnowflakeV2Sink",
											"preCopyScript": {
												"value": "@{concat('truncate table',' ',item().Snowflake_Name_New,'.LF05O')}",
												"type": "Expression"
											},
											"importSettings": {
												"type": "SnowflakeImportCopyCommand",
												"additionalCopyOptions": {
													"ON_ERROR": "CONTINUE"
												}
											}
										},
										"enableStaging": true,
										"stagingSettings": {
											"linkedServiceName": {
												"referenceName": "msaz01_dm01_Azure_Blob",
												"type": "LinkedServiceReference"
											},
											"path": "staging",
											"enableCompression": true
										},
										"parallelCopies": {
											"value": "@pipeline().parameters.Degree_Copy_Parallelism",
											"type": "Expression"
										},
										"enableSkipIncompatibleRow": true,
										"logSettings": {
											"enableCopyActivityLog": true,
											"copyActivityLogSettings": {
												"logLevel": "Warning",
												"enableReliableLogging": false
											},
											"logLocationSettings": {
												"linkedServiceName": {
													"referenceName": "msaz01_dm01_Azure_Blob",
													"type": "LinkedServiceReference"
												}
											}
										},
										"dataIntegrationUnits": {
											"value": "@pipeline().parameters.Maximum_DIU",
											"type": "Expression"
										},
										"translator": {
											"type": "TabularTranslator",
											"mappings": [
												{
													"source": {
														"name": "LF05O_ID",
														"type": "Int32"
													},
													"sink": {
														"name": "LF05O_ID",
														"type": "Int64"
													}
												},
												{
													"source": {
														"name": "LF05O_LINK",
														"type": "Int32"
													},
													"sink": {
														"name": "LF05O_LINK",
														"type": "Int64"
													}
												},
												{
													"source": {
														"name": "LF05O_ORIG",
														"type": "String"
													},
													"sink": {
														"name": "LF05O_ORIG",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "LF05O_PERC",
														"type": "Decimal"
													},
													"sink": {
														"name": "LF05O_PERC",
														"type": "Int64"
													}
												}
											]
										}
									},
									"inputs": [
										{
											"referenceName": "TRUX_LEGACY01",
											"type": "DatasetReference",
											"parameters": {
												"schema": "dbo",
												"table": "LF05O",
												"database": {
													"value": "@item().sql_db_name",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "LRS_Snowflake_Raw_V2",
											"type": "DatasetReference",
											"parameters": {
												"Snowflake_Sink_Table": "LF05O",
												"Snowflake_Schema": "@item().Snowflake_Name_New"
											}
										}
									]
								}
							]
						}
					},
					{
						"name": "Database Lookup",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SnowflakeV2Source",
								"query": "SELECT * FROM LRS_RAW.MASTER_DATA.DATABASE_LOOKUP_TRUX_COMBINED\nWHERE SERVERNAME = 'LEGACY';",
								"exportSettings": {
									"type": "SnowflakeExportCopyCommand"
								}
							},
							"dataset": {
								"referenceName": "LRS_Snowflake_Raw_V2",
								"type": "DatasetReference",
								"parameters": {
									"Snowflake_Sink_Table": "DATABASE_LOOKUP_TRUX_COMBINED",
									"Snowflake_Schema": "MASTER_DATA"
								}
							},
							"firstRowOnly": false
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"Maximum_DIU": {
						"type": "int",
						"defaultValue": 2
					},
					"Degree_Copy_Parallelism": {
						"type": "int",
						"defaultValue": 8
					}
				},
				"folder": {
					"name": "Test"
				},
				"annotations": [],
				"lastPublishTime": "2024-09-27T13:51:14Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/TRUX_LEGACY_INCREMENTAL_LOAD_FACT_BKUP')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Trux Legacy Watermark Lookup",
						"description": "look up schema, database and table names from sqlsever and snowflake",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SnowflakeV2Source",
								"query": "//RM05\r\n\r\nselect\r\n'TRUX_CD_COMP' as Sql_db_name,\r\n'TRUX_CD_COMP_RAW' as Snowflake_schema,\r\n'RM05' as table_name,\r\ncast(max(rm05_date)as varchar) as latest_watermark\r\nfrom\r\n  lrs_raw.TRUX_CD_COMP_RAW.rm05\r\n\r\n\r\nunion all\r\n\r\nselect\r\n'TRUX_DC_COMP' as Sql_db_name,\r\n'TRUX_DC_COMP_RAW' as Snowflake_schema,\r\n'RM05' as table_name,\r\ncast(max(rm05_date)as varchar) as latest_watermark\r\nfrom\r\n  lrs_raw.TRUX_DC_COMP_RAW.rm05\r\n\r\n\r\nunion all\r\n\r\nselect\r\n'TRUX_ES_COMP' as Sql_db_name,\r\n'TRUX_ES_COMP_RAW' as Snowflake_schema,\r\n'RM05' as table_name,\r\ncast(max(rm05_date)as varchar) as latest_watermark\r\nfrom\r\n  lrs_raw.TRUX_ES_COMP_RAW.rm05\r\n\r\nunion all\r\n\r\nselect\r\n'TRUX_HR_COMP' as Sql_db_name,\r\n'TRUX_HR_COMP_RAW' as Snowflake_schema,\r\n'RM05' as table_name,\r\ncast(max(rm05_date)as varchar) as latest_watermark\r\nfrom\r\n  lrs_raw.TRUX_HR_COMP_RAW.rm05\r\n\r\nunion all\r\n\r\nselect\r\n'TRUX_LR_COMP' as Sql_db_name,\r\n'TRUX_LR_COMP_RAW' as Snowflake_schema,\r\n'RM05' as table_name,\r\ncast(max(rm05_date)as varchar) as latest_watermark\r\nfrom\r\n  lrs_raw.TRUX_LR_COMP_RAW.rm05\r\n\r\nunion all\r\n\r\nselect\r\n'TRUX_MC_COMP' as Sql_db_name,\r\n'TRUX_MC_COMP_RAW' as Snowflake_schema,\r\n'RM05' as table_name,\r\ncast(max(rm05_date)as varchar) as latest_watermark\r\nfrom\r\n  lrs_raw.TRUX_MC_COMP_RAW.rm05\r\n\r\n\r\nunion all\r\n\r\nselect\r\n'TRUX_MH_COMP' as Sql_db_name,\r\n'TRUX_MH_COMP_RAW' as Snowflake_schema,\r\n'RM05' as table_name,\r\ncast(max(rm05_date)as varchar) as latest_watermark\r\nfrom\r\n  lrs_raw.TRUX_MH_COMP_RAW.rm05\r\n\r\nunion all\r\n\r\nselect\r\n'TRUX_MO_COMP' as Sql_db_name,\r\n'TRUX_MO_COMP_RAW' as Snowflake_schema,\r\n'RM05' as table_name,\r\ncast(max(rm05_date)as varchar) as latest_watermark\r\nfrom\r\n  lrs_raw.TRUX_MO_COMP_RAW.rm05\r\n\r\nunion all\r\n\r\nselect\r\n'TRUX_MP_COMP' as Sql_db_name,\r\n'TRUX_MP_COMP_RAW' as Snowflake_schema,\r\n'RM05' as table_name,\r\ncast(max(rm05_date)as varchar) as latest_watermark\r\nfrom\r\n  lrs_raw.TRUX_MP_COMP_RAW.rm05\r\n\r\nunion all\r\n\r\nselect\r\n'TRUX_MW_COMP' as Sql_db_name,\r\n'TRUX_MW_COMP_RAW' as Snowflake_schema,\r\n'RM05' as table_name,\r\ncast(max(rm05_date)as varchar) as latest_watermark\r\nfrom\r\n  lrs_raw.TRUX_MW_COMP_RAW.rm05\r\n\r\nunion all\r\n\r\nselect\r\n'TRUX_NI_COMP' as Sql_db_name,\r\n'TRUX_NI_COMP_RAW' as Snowflake_schema,\r\n'RM05' as table_name,\r\ncast(max(rm05_date)as varchar) as latest_watermark\r\nfrom\r\n  lrs_raw.TRUX_NI_COMP_RAW.rm05\r\n\r\nunion all\r\n\r\nselect\r\n'TRUX_PS_COMP' as Sql_db_name,\r\n'TRUX_PS_COMP_RAW' as Snowflake_schema,\r\n'RM05' as table_name,\r\ncast(max(rm05_date)as varchar) as latest_watermark\r\nfrom\r\n  lrs_raw.TRUX_PS_COMP_RAW.rm05\r\n\r\nunion all\r\n\r\nselect\r\n'TRUX_RS_COMP' as Sql_db_name,\r\n'TRUX_RS_COMP_RAW' as Snowflake_schema,\r\n'RM05' as table_name,\r\ncast(max(rm05_date)as varchar) as latest_watermark\r\nfrom\r\n  lrs_raw.TRUX_RS_COMP_RAW.rm05\r\n\r\nunion all\r\n\r\nselect\r\n'TRUX_RT_COMP' as Sql_db_name,\r\n'TRUX_RT_COMP_RAW' as Snowflake_schema,\r\n'RM05' as table_name,\r\ncast(max(rm05_date)as varchar) as latest_watermark\r\nfrom\r\n  lrs_raw.TRUX_RT_COMP_RAW.rm05\r\n\r\nunion all\r\n\r\nselect\r\n'TRUX_RZ_COMP' as Sql_db_name,\r\n'TRUX_RZ_COMP_RAW' as Snowflake_schema,\r\n'RM05' as table_name,\r\ncast(max(rm05_date)as varchar) as latest_watermark\r\nfrom\r\n  lrs_raw.TRUX_RZ_COMP_RAW.rm05\r\n\r\nunion all\r\n\r\nselect\r\n'TRUX_SH_COMP' as Sql_db_name,\r\n'TRUX_SH_COMP_RAW' as Snowflake_schema,\r\n'RM05' as table_name,\r\ncast(max(rm05_date)as varchar) as latest_watermark\r\nfrom\r\n  lrs_raw.TRUX_SH_COMP_RAW.rm05\r\n\r\nunion all\r\n\r\nselect\r\n'TRUX_SW_COMP' as Sql_db_name,\r\n'TRUX_SW_COMP_RAW' as Snowflake_schema,\r\n'RM05' as table_name,\r\ncast(max(rm05_date)as varchar) as latest_watermark\r\nfrom\r\n  lrs_raw.TRUX_SW_COMP_RAW.rm05\r\n\r\nunion all\r\n\r\nselect\r\n'TRUX_TP_COMP' as Sql_db_name,\r\n'TRUX_TP_COMP_RAW' as Snowflake_schema,\r\n'RM05' as table_name,\r\ncast(max(rm05_date)as varchar) as latest_watermark\r\nfrom\r\n  lrs_raw.TRUX_TP_COMP_RAW.rm05\r\n\r\nunion all\r\n\r\nselect\r\n'TRUX_WA_COMP' as Sql_db_name,\r\n'TRUX_WA_COMP_RAW' as Snowflake_schema,\r\n'RM05' as table_name,\r\ncast(max(rm05_date)as varchar) as latest_watermark\r\nfrom\r\n  lrs_raw.TRUX_WA_COMP_RAW.rm05\r\n-------------------------------------------------------------------------------------------\r\n\r\n  union all\r\n\r\n//sm01\r\n\r\nselect\r\n'TRUX_CD_COMP' as Sql_db_name,\r\n'TRUX_CD_COMP_RAW' as Snowflake_schema,\r\n'SM01' as table_name,\r\ncast(max(sm01_date)as varchar) as latest_watermark\r\nfrom\r\n  lrs_raw.TRUX_CD_COMP_RAW.sm01\r\n\r\n\r\nunion all\r\n\r\nselect\r\n'TRUX_DC_COMP' as Sql_db_name,\r\n'TRUX_DC_COMP_RAW' as Snowflake_schema,\r\n'SM01' as table_name,\r\ncast(max(sm01_date)as varchar) as latest_watermark\r\nfrom\r\n  lrs_raw.TRUX_DC_COMP_RAW.sm01\r\n\r\n\r\nunion all\r\n\r\nselect\r\n'TRUX_ES_COMP' as Sql_db_name,\r\n'TRUX_ES_COMP_RAW' as Snowflake_schema,\r\n'SM01' as table_name,\r\ncast(max(sm01_date)as varchar) as latest_watermark\r\nfrom\r\n  lrs_raw.TRUX_ES_COMP_RAW.sm01\r\n\r\nunion all\r\n\r\nselect\r\n'TRUX_HR_COMP' as Sql_db_name,\r\n'TRUX_HR_COMP_RAW' as Snowflake_schema,\r\n'SM01' as table_name,\r\ncast(max(sm01_date)as varchar) as latest_watermark\r\nfrom\r\n  lrs_raw.TRUX_HR_COMP_RAW.sm01\r\n\r\nunion all\r\n\r\nselect\r\n'TRUX_LR_COMP' as Sql_db_name,\r\n'TRUX_LR_COMP_RAW' as Snowflake_schema,\r\n'SM01' as table_name,\r\ncast(max(sm01_date)as varchar) as latest_watermark\r\nfrom\r\n  lrs_raw.TRUX_LR_COMP_RAW.sm01\r\n\r\nunion all\r\n\r\nselect\r\n'TRUX_MC_COMP' as Sql_db_name,\r\n'TRUX_MC_COMP_RAW' as Snowflake_schema,\r\n'SM01' as table_name,\r\ncast(max(sm01_date)as varchar) as latest_watermark\r\nfrom\r\n  lrs_raw.TRUX_MC_COMP_RAW.sm01\r\n\r\n\r\nunion all\r\n\r\nselect\r\n'TRUX_MH_COMP' as Sql_db_name,\r\n'TRUX_MH_COMP_RAW' as Snowflake_schema,\r\n'SM01' as table_name,\r\ncast(max(sm01_date)as varchar) as latest_watermark\r\nfrom\r\n  lrs_raw.TRUX_MH_COMP_RAW.sm01\r\n\r\nunion all\r\n\r\nselect\r\n'TRUX_MO_COMP' as Sql_db_name,\r\n'TRUX_MO_COMP_RAW' as Snowflake_schema,\r\n'SM01' as table_name,\r\ncast(max(sm01_date)as varchar) as latest_watermark\r\nfrom\r\n  lrs_raw.TRUX_MO_COMP_RAW.sm01\r\n\r\nunion all\r\n\r\nselect\r\n'TRUX_MP_COMP' as Sql_db_name,\r\n'TRUX_MP_COMP_RAW' as Snowflake_schema,\r\n'SM01' as table_name,\r\ncast(max(sm01_date)as varchar) as latest_watermark\r\nfrom\r\n  lrs_raw.TRUX_MP_COMP_RAW.sm01\r\n\r\nunion all\r\n\r\nselect\r\n'TRUX_MW_COMP' as Sql_db_name,\r\n'TRUX_MW_COMP_RAW' as Snowflake_schema,\r\n'SM01' as table_name,\r\ncast(max(sm01_date)as varchar) as latest_watermark\r\nfrom\r\n  lrs_raw.TRUX_MW_COMP_RAW.sm01\r\n\r\nunion all\r\n\r\nselect\r\n'TRUX_NI_COMP' as Sql_db_name,\r\n'TRUX_NI_COMP_RAW' as Snowflake_schema,\r\n'SM01' as table_name,\r\ncast(max(sm01_date)as varchar) as latest_watermark\r\nfrom\r\n  lrs_raw.TRUX_NI_COMP_RAW.sm01\r\n\r\nunion all\r\n\r\nselect\r\n'TRUX_PS_COMP' as Sql_db_name,\r\n'TRUX_PS_COMP_RAW' as Snowflake_schema,\r\n'SM01' as table_name,\r\ncast(max(sm01_date)as varchar) as latest_watermark\r\nfrom\r\n  lrs_raw.TRUX_PS_COMP_RAW.sm01\r\n\r\nunion all\r\n\r\nselect\r\n'TRUX_RS_COMP' as Sql_db_name,\r\n'TRUX_RS_COMP_RAW' as Snowflake_schema,\r\n'SM01' as table_name,\r\ncast(max(sm01_date)as varchar) as latest_watermark\r\nfrom\r\n  lrs_raw.TRUX_RS_COMP_RAW.sm01\r\n\r\nunion all\r\n\r\nselect\r\n'TRUX_RT_COMP' as Sql_db_name,\r\n'TRUX_RT_COMP_RAW' as Snowflake_schema,\r\n'SM01' as table_name,\r\ncast(max(sm01_date)as varchar) as latest_watermark\r\nfrom\r\n  lrs_raw.TRUX_RT_COMP_RAW.sm01\r\n\r\nunion all\r\n\r\nselect\r\n'TRUX_RZ_COMP' as Sql_db_name,\r\n'TRUX_RZ_COMP_RAW' as Snowflake_schema,\r\n'SM01' as table_name,\r\ncast(max(sm01_date)as varchar) as latest_watermark\r\nfrom\r\n  lrs_raw.TRUX_RZ_COMP_RAW.sm01\r\n\r\nunion all\r\n\r\nselect\r\n'TRUX_SH_COMP' as Sql_db_name,\r\n'TRUX_SH_COMP_RAW' as Snowflake_schema,\r\n'SM01' as table_name,\r\ncast(max(sm01_date)as varchar) as latest_watermark\r\nfrom\r\n  lrs_raw.TRUX_SH_COMP_RAW.sm01\r\n\r\nunion all\r\n\r\nselect\r\n'TRUX_SW_COMP' as Sql_db_name,\r\n'TRUX_SW_COMP_RAW' as Snowflake_schema,\r\n'SM01' as table_name,\r\ncast(max(sm01_date)as varchar) as latest_watermark\r\nfrom\r\n  lrs_raw.TRUX_SW_COMP_RAW.sm01\r\n\r\nunion all\r\n\r\nselect\r\n'TRUX_TP_COMP' as Sql_db_name,\r\n'TRUX_TP_COMP_RAW' as Snowflake_schema,\r\n'SM01' as table_name,\r\ncast(max(sm01_date)as varchar) as latest_watermark\r\nfrom\r\n  lrs_raw.TRUX_TP_COMP_RAW.sm01\r\n\r\nunion all\r\n\r\nselect\r\n'TRUX_WA_COMP' as Sql_db_name,\r\n'TRUX_WA_COMP_RAW' as Snowflake_schema,\r\n'SM01' as table_name,\r\ncast(max(sm01_date)as varchar) as latest_watermark\r\nfrom\r\n  lrs_raw.TRUX_WA_COMP_RAW.sm01\r\nsm01\r\n------------------------------------------------------------\r\n//DM01\r\nunion all\r\n\r\nselect\r\n'TRUX_CD_COMP' as Sql_db_name,\r\n'TRUX_CD_COMP_RAW' as Snowflake_schema,\r\n'DM01' as table_name,\r\ncast(max(dm01_id)as varchar) as latest_watermark\r\nfrom\r\n  lrs_raw.TRUX_CD_COMP_RAW.dm01\r\n\r\n\r\nunion all\r\n\r\nselect\r\n'TRUX_DC_COMP' as Sql_db_name,\r\n'TRUX_DC_COMP_RAW' as Snowflake_schema,\r\n'DM01' as table_name,\r\ncast(max(dm01_id)as varchar) as latest_watermark\r\nfrom\r\n  lrs_raw.TRUX_DC_COMP_RAW.dm01\r\n\r\n\r\nunion all\r\n\r\nselect\r\n'TRUX_ES_COMP' as Sql_db_name,\r\n'TRUX_ES_COMP_RAW' as Snowflake_schema,\r\n'DM01' as table_name,\r\ncast(max(dm01_id)as varchar) as latest_watermark\r\nfrom\r\n  lrs_raw.TRUX_ES_COMP_RAW.dm01\r\n\r\nunion all\r\n\r\nselect\r\n'TRUX_HR_COMP' as Sql_db_name,\r\n'TRUX_HR_COMP_RAW' as Snowflake_schema,\r\n'DM01' as table_name,\r\ncast(max(dm01_id)as varchar) as latest_watermark\r\nfrom\r\n  lrs_raw.TRUX_HR_COMP_RAW.dm01\r\n\r\nunion all\r\n\r\nselect\r\n'TRUX_LR_COMP' as Sql_db_name,\r\n'TRUX_LR_COMP_RAW' as Snowflake_schema,\r\n'DM01' as table_name,\r\ncast(max(dm01_id)as varchar) as latest_watermark\r\nfrom\r\n  lrs_raw.TRUX_LR_COMP_RAW.dm01\r\n\r\nunion all\r\n\r\nselect\r\n'TRUX_MC_COMP' as Sql_db_name,\r\n'TRUX_MC_COMP_RAW' as Snowflake_schema,\r\n'DM01' as table_name,\r\ncast(max(dm01_id)as varchar) as latest_watermark\r\nfrom\r\n  lrs_raw.TRUX_MC_COMP_RAW.dm01\r\n\r\n\r\nunion all\r\n\r\nselect\r\n'TRUX_MH_COMP' as Sql_db_name,\r\n'TRUX_MH_COMP_RAW' as Snowflake_schema,\r\n'DM01' as table_name,\r\ncast(max(dm01_id)as varchar) as latest_watermark\r\nfrom\r\n  lrs_raw.TRUX_MH_COMP_RAW.dm01\r\n\r\nunion all\r\n\r\nselect\r\n'TRUX_MO_COMP' as Sql_db_name,\r\n'TRUX_MO_COMP_RAW' as Snowflake_schema,\r\n'DM01' as table_name,\r\ncast(max(dm01_id)as varchar) as latest_watermark\r\nfrom\r\n  lrs_raw.TRUX_MO_COMP_RAW.dm01\r\n\r\nunion all\r\n\r\nselect\r\n'TRUX_MP_COMP' as Sql_db_name,\r\n'TRUX_MP_COMP_RAW' as Snowflake_schema,\r\n'DM01' as table_name,\r\ncast(max(dm01_id)as varchar) as latest_watermark\r\nfrom\r\n  lrs_raw.TRUX_MP_COMP_RAW.dm01\r\n\r\nunion all\r\n\r\nselect\r\n'TRUX_MW_COMP' as Sql_db_name,\r\n'TRUX_MW_COMP_RAW' as Snowflake_schema,\r\n'DM01' as table_name,\r\ncast(max(dm01_id)as varchar) as latest_watermark\r\nfrom\r\n  lrs_raw.TRUX_MW_COMP_RAW.dm01\r\n\r\nunion all\r\n\r\nselect\r\n'TRUX_NI_COMP' as Sql_db_name,\r\n'TRUX_NI_COMP_RAW' as Snowflake_schema,\r\n'DM01' as table_name,\r\ncast(max(dm01_id)as varchar) as latest_watermark\r\nfrom\r\n  lrs_raw.TRUX_NI_COMP_RAW.dm01\r\n\r\nunion all\r\n\r\nselect\r\n'TRUX_PS_COMP' as Sql_db_name,\r\n'TRUX_PS_COMP_RAW' as Snowflake_schema,\r\n'DM01' as table_name,\r\ncast(max(dm01_id)as varchar) as latest_watermark\r\nfrom\r\n  lrs_raw.TRUX_PS_COMP_RAW.dm01\r\n\r\nunion all\r\n\r\nselect\r\n'TRUX_RS_COMP' as Sql_db_name,\r\n'TRUX_RS_COMP_RAW' as Snowflake_schema,\r\n'DM01' as table_name,\r\ncast(max(dm01_id)as varchar) as latest_watermark\r\nfrom\r\n  lrs_raw.TRUX_RS_COMP_RAW.dm01\r\n\r\nunion all\r\n\r\nselect\r\n'TRUX_RT_COMP' as Sql_db_name,\r\n'TRUX_RT_COMP_RAW' as Snowflake_schema,\r\n'DM01' as table_name,\r\ncast(max(dm01_id)as varchar) as latest_watermark\r\nfrom\r\n  lrs_raw.TRUX_RT_COMP_RAW.dm01\r\n\r\nunion all\r\n\r\nselect\r\n'TRUX_RZ_COMP' as Sql_db_name,\r\n'TRUX_RZ_COMP_RAW' as Snowflake_schema,\r\n'DM01' as table_name,\r\ncast(max(dm01_id)as varchar) as latest_watermark\r\nfrom\r\n  lrs_raw.TRUX_RZ_COMP_RAW.dm01\r\n\r\nunion all\r\n\r\nselect\r\n'TRUX_SH_COMP' as Sql_db_name,\r\n'TRUX_SH_COMP_RAW' as Snowflake_schema,\r\n'DM01' as table_name,\r\ncast(max(dm01_id)as varchar) as latest_watermark\r\nfrom\r\n  lrs_raw.TRUX_SH_COMP_RAW.dm01\r\n\r\nunion all\r\n\r\nselect\r\n'TRUX_SW_COMP' as Sql_db_name,\r\n'TRUX_SW_COMP_RAW' as Snowflake_schema,\r\n'DM01' as table_name,\r\ncast(max(dm01_id)as varchar) as latest_watermark\r\nfrom\r\n  lrs_raw.TRUX_SW_COMP_RAW.dm01\r\n\r\nunion all\r\n\r\nselect\r\n'TRUX_TP_COMP' as Sql_db_name,\r\n'TRUX_TP_COMP_RAW' as Snowflake_schema,\r\n'DM01' as table_name,\r\ncast(max(dm01_id)as varchar) as latest_watermark\r\nfrom\r\n  lrs_raw.TRUX_TP_COMP_RAW.dm01\r\n\r\nunion all\r\n\r\nselect\r\n'TRUX_WA_COMP' as Sql_db_name,\r\n'TRUX_WA_COMP_RAW' as Snowflake_schema,\r\n'DM01' as table_name,\r\ncast(max(dm01_id)as varchar) as latest_watermark\r\nfrom\r\n  lrs_raw.TRUX_WA_COMP_RAW.dm01\r\n\r\n------------------------------------------------------------------\r\nunion all\r\n\r\n//DM01P\r\n\r\nselect\r\n'TRUX_CD_COMP' as Sql_db_name,\r\n'TRUX_CD_COMP_RAW' as Snowflake_schema,\r\n'DM01P' as table_name,\r\ncast(max(dm01p_id)as varchar) as latest_watermark\r\nfrom\r\n  lrs_raw.TRUX_CD_COMP_RAW.dm01p\r\n\r\n\r\nunion all\r\n\r\nselect\r\n'TRUX_DC_COMP' as Sql_db_name,\r\n'TRUX_DC_COMP_RAW' as Snowflake_schema,\r\n'DM01P' as table_name,\r\ncast(max(dm01p_id)as varchar) as latest_watermark\r\nfrom\r\n  lrs_raw.TRUX_DC_COMP_RAW.dm01p\r\n\r\n\r\nunion all\r\n\r\nselect\r\n'TRUX_ES_COMP' as Sql_db_name,\r\n'TRUX_ES_COMP_RAW' as Snowflake_schema,\r\n'DM01P' as table_name,\r\ncast(max(dm01p_id)as varchar) as latest_watermark\r\nfrom\r\n  lrs_raw.TRUX_ES_COMP_RAW.dm01p\r\n\r\nunion all\r\n\r\nselect\r\n'TRUX_HR_COMP' as Sql_db_name,\r\n'TRUX_HR_COMP_RAW' as Snowflake_schema,\r\n'DM01P' as table_name,\r\ncast(max(dm01p_id)as varchar) as latest_watermark\r\nfrom\r\n  lrs_raw.TRUX_HR_COMP_RAW.dm01p\r\n\r\nunion all\r\n\r\nselect\r\n'TRUX_LR_COMP' as Sql_db_name,\r\n'TRUX_LR_COMP_RAW' as Snowflake_schema,\r\n'DM01P' as table_name,\r\ncast(max(dm01p_id)as varchar) as latest_watermark\r\nfrom\r\n  lrs_raw.TRUX_LR_COMP_RAW.dm01p\r\n\r\nunion all\r\n\r\nselect\r\n'TRUX_MC_COMP' as Sql_db_name,\r\n'TRUX_MC_COMP_RAW' as Snowflake_schema,\r\n'DM01P' as table_name,\r\ncast(max(dm01p_id)as varchar) as latest_watermark\r\nfrom\r\n  lrs_raw.TRUX_MC_COMP_RAW.dm01p\r\n\r\n\r\nunion all\r\n\r\nselect\r\n'TRUX_MH_COMP' as Sql_db_name,\r\n'TRUX_MH_COMP_RAW' as Snowflake_schema,\r\n'DM01P' as table_name,\r\ncast(max(dm01p_id)as varchar) as latest_watermark\r\nfrom\r\n  lrs_raw.TRUX_MH_COMP_RAW.dm01p\r\n\r\nunion all\r\n\r\nselect\r\n'TRUX_MO_COMP' as Sql_db_name,\r\n'TRUX_MO_COMP_RAW' as Snowflake_schema,\r\n'DM01P' as table_name,\r\ncast(max(dm01p_id)as varchar) as latest_watermark\r\nfrom\r\n  lrs_raw.TRUX_MO_COMP_RAW.dm01p\r\n\r\nunion all\r\n\r\nselect\r\n'TRUX_MP_COMP' as Sql_db_name,\r\n'TRUX_MP_COMP_RAW' as Snowflake_schema,\r\n'DM01P' as table_name,\r\ncast(max(dm01p_id)as varchar) as latest_watermark\r\nfrom\r\n  lrs_raw.TRUX_MP_COMP_RAW.dm01p\r\n\r\nunion all\r\n\r\nselect\r\n'TRUX_MW_COMP' as Sql_db_name,\r\n'TRUX_MW_COMP_RAW' as Snowflake_schema,\r\n'DM01P' as table_name,\r\ncast(max(dm01p_id)as varchar) as latest_watermark\r\nfrom\r\n  lrs_raw.TRUX_MW_COMP_RAW.dm01p\r\n\r\nunion all\r\n\r\nselect\r\n'TRUX_NI_COMP' as Sql_db_name,\r\n'TRUX_NI_COMP_RAW' as Snowflake_schema,\r\n'DM01P' as table_name,\r\ncast(max(dm01p_id)as varchar) as latest_watermark\r\nfrom\r\n  lrs_raw.TRUX_NI_COMP_RAW.dm01p\r\n\r\nunion all\r\n\r\nselect\r\n'TRUX_PS_COMP' as Sql_db_name,\r\n'TRUX_PS_COMP_RAW' as Snowflake_schema,\r\n'DM01P' as table_name,\r\ncast(max(dm01p_id)as varchar) as latest_watermark\r\nfrom\r\n  lrs_raw.TRUX_PS_COMP_RAW.dm01p\r\n\r\nunion all\r\n\r\nselect\r\n'TRUX_RS_COMP' as Sql_db_name,\r\n'TRUX_RS_COMP_RAW' as Snowflake_schema,\r\n'DM01P' as table_name,\r\ncast(max(dm01p_id)as varchar) as latest_watermark\r\nfrom\r\n  lrs_raw.TRUX_RS_COMP_RAW.dm01p\r\n\r\nunion all\r\n\r\nselect\r\n'TRUX_RT_COMP' as Sql_db_name,\r\n'TRUX_RT_COMP_RAW' as Snowflake_schema,\r\n'DM01P' as table_name,\r\ncast(max(dm01p_id)as varchar) as latest_watermark\r\nfrom\r\n  lrs_raw.TRUX_RT_COMP_RAW.dm01p\r\n\r\nunion all\r\n\r\nselect\r\n'TRUX_RZ_COMP' as Sql_db_name,\r\n'TRUX_RZ_COMP_RAW' as Snowflake_schema,\r\n'DM01P' as table_name,\r\ncast(max(dm01p_id)as varchar) as latest_watermark\r\nfrom\r\n  lrs_raw.TRUX_RZ_COMP_RAW.dm01p\r\n\r\nunion all\r\n\r\nselect\r\n'TRUX_SH_COMP' as Sql_db_name,\r\n'TRUX_SH_COMP_RAW' as Snowflake_schema,\r\n'DM01P' as table_name,\r\ncast(max(dm01p_id)as varchar) as latest_watermark\r\nfrom\r\n  lrs_raw.TRUX_SH_COMP_RAW.dm01p\r\n\r\nunion all\r\n\r\nselect\r\n'TRUX_SW_COMP' as Sql_db_name,\r\n'TRUX_SW_COMP_RAW' as Snowflake_schema,\r\n'DM01P' as table_name,\r\ncast(max(dm01p_id)as varchar) as latest_watermark\r\nfrom\r\n  lrs_raw.TRUX_SW_COMP_RAW.dm01p\r\n\r\nunion all\r\n\r\nselect\r\n'TRUX_TP_COMP' as Sql_db_name,\r\n'TRUX_TP_COMP_RAW' as Snowflake_schema,\r\n'DM01P' as table_name,\r\ncast(max(dm01p_id)as varchar) as latest_watermark\r\nfrom\r\n  lrs_raw.TRUX_TP_COMP_RAW.dm01p\r\n\r\nunion all\r\n\r\nselect\r\n'TRUX_WA_COMP' as Sql_db_name,\r\n'TRUX_WA_COMP_RAW' as Snowflake_schema,\r\n'DM01P' as table_name,\r\ncast(max(dm01p_id)as varchar) as latest_watermark\r\nfrom\r\n  lrs_raw.TRUX_WA_COMP_RAW.dm01p\r\n\r\n---------------------------------------\r\nunion all\r\n//DM05A\r\n\r\nselect\r\n'TRUX_CD_COMP' as Sql_db_name,\r\n'TRUX_CD_COMP_RAW' as Snowflake_schema,\r\n'DM05A' as table_name,\r\ncast(max(DM05A_ID)as varchar) as latest_watermark\r\nfrom\r\n  lrs_raw.TRUX_CD_COMP_RAW.dm05a\r\n\r\n\r\nunion all\r\n\r\nselect\r\n'TRUX_DC_COMP' as Sql_db_name,\r\n'TRUX_DC_COMP_RAW' as Snowflake_schema,\r\n'DM05A' as table_name,\r\ncast(max(DM05A_ID)as varchar) as latest_watermark\r\nfrom\r\n  lrs_raw.TRUX_DC_COMP_RAW.dm05a\r\n\r\n\r\nunion all\r\n\r\nselect\r\n'TRUX_ES_COMP' as Sql_db_name,\r\n'TRUX_ES_COMP_RAW' as Snowflake_schema,\r\n'DM05A' as table_name,\r\ncast(max(DM05A_ID)as varchar) as latest_watermark\r\nfrom\r\n  lrs_raw.TRUX_ES_COMP_RAW.dm05a\r\n\r\nunion all\r\n\r\nselect\r\n'TRUX_HR_COMP' as Sql_db_name,\r\n'TRUX_HR_COMP_RAW' as Snowflake_schema,\r\n'DM05A' as table_name,\r\ncast(max(DM05A_ID)as varchar) as latest_watermark\r\nfrom\r\n  lrs_raw.TRUX_HR_COMP_RAW.dm05a\r\n\r\nunion all\r\n\r\nselect\r\n'TRUX_LR_COMP' as Sql_db_name,\r\n'TRUX_LR_COMP_RAW' as Snowflake_schema,\r\n'DM05A' as table_name,\r\ncast(max(DM05A_ID)as varchar) as latest_watermark\r\nfrom\r\n  lrs_raw.TRUX_LR_COMP_RAW.dm05a\r\n\r\nunion all\r\n\r\nselect\r\n'TRUX_MC_COMP' as Sql_db_name,\r\n'TRUX_MC_COMP_RAW' as Snowflake_schema,\r\n'DM05A' as table_name,\r\ncast(max(DM05A_ID)as varchar) as latest_watermark\r\nfrom\r\n  lrs_raw.TRUX_MC_COMP_RAW.dm05a\r\n\r\n\r\nunion all\r\n\r\nselect\r\n'TRUX_MH_COMP' as Sql_db_name,\r\n'TRUX_MH_COMP_RAW' as Snowflake_schema,\r\n'DM05A' as table_name,\r\ncast(max(DM05A_ID)as varchar) as latest_watermark\r\nfrom\r\n  lrs_raw.TRUX_MH_COMP_RAW.dm05a\r\n\r\nunion all\r\n\r\nselect\r\n'TRUX_MO_COMP' as Sql_db_name,\r\n'TRUX_MO_COMP_RAW' as Snowflake_schema,\r\n'DM05A' as table_name,\r\ncast(max(DM05A_ID)as varchar) as latest_watermark\r\nfrom\r\n  lrs_raw.TRUX_MO_COMP_RAW.dm05a\r\n\r\nunion all\r\n\r\nselect\r\n'TRUX_MP_COMP' as Sql_db_name,\r\n'TRUX_MP_COMP_RAW' as Snowflake_schema,\r\n'DM05A' as table_name,\r\ncast(max(DM05A_ID)as varchar) as latest_watermark\r\nfrom\r\n  lrs_raw.TRUX_MP_COMP_RAW.dm05a\r\n\r\nunion all\r\n\r\nselect\r\n'TRUX_MW_COMP' as Sql_db_name,\r\n'TRUX_MW_COMP_RAW' as Snowflake_schema,\r\n'DM05A' as table_name,\r\ncast(max(DM05A_ID)as varchar) as latest_watermark\r\nfrom\r\n  lrs_raw.TRUX_MW_COMP_RAW.dm05a\r\n\r\nunion all\r\n\r\nselect\r\n'TRUX_NI_COMP' as Sql_db_name,\r\n'TRUX_NI_COMP_RAW' as Snowflake_schema,\r\n'DM05A' as table_name,\r\ncast(max(DM05A_ID)as varchar) as latest_watermark\r\nfrom\r\n  lrs_raw.TRUX_NI_COMP_RAW.dm05a\r\n\r\nunion all\r\n\r\nselect\r\n'TRUX_PS_COMP' as Sql_db_name,\r\n'TRUX_PS_COMP_RAW' as Snowflake_schema,\r\n'DM05A' as table_name,\r\ncast(max(DM05A_ID)as varchar) as latest_watermark\r\nfrom\r\n  lrs_raw.TRUX_PS_COMP_RAW.dm05a\r\n\r\nunion all\r\n\r\nselect\r\n'TRUX_RS_COMP' as Sql_db_name,\r\n'TRUX_RS_COMP_RAW' as Snowflake_schema,\r\n'DM05A' as table_name,\r\ncast(max(DM05A_ID)as varchar) as latest_watermark\r\nfrom\r\n  lrs_raw.TRUX_RS_COMP_RAW.dm05a\r\n\r\nunion all\r\n\r\nselect\r\n'TRUX_RT_COMP' as Sql_db_name,\r\n'TRUX_RT_COMP_RAW' as Snowflake_schema,\r\n'DM05A' as table_name,\r\ncast(max(DM05A_ID)as varchar) as latest_watermark\r\nfrom\r\n  lrs_raw.TRUX_RT_COMP_RAW.dm05a\r\n\r\nunion all\r\n\r\nselect\r\n'TRUX_RZ_COMP' as Sql_db_name,\r\n'TRUX_RZ_COMP_RAW' as Snowflake_schema,\r\n'DM05A' as table_name,\r\ncast(max(DM05A_ID)as varchar) as latest_watermark\r\nfrom\r\n  lrs_raw.TRUX_RZ_COMP_RAW.dm05a\r\n\r\nunion all\r\n\r\nselect\r\n'TRUX_SH_COMP' as Sql_db_name,\r\n'TRUX_SH_COMP_RAW' as Snowflake_schema,\r\n'DM05A' as table_name,\r\ncast(max(DM05A_ID)as varchar) as latest_watermark\r\nfrom\r\n  lrs_raw.TRUX_SH_COMP_RAW.dm05a\r\n\r\nunion all\r\n\r\nselect\r\n'TRUX_SW_COMP' as Sql_db_name,\r\n'TRUX_SW_COMP_RAW' as Snowflake_schema,\r\n'DM05A' as table_name,\r\ncast(max(DM05A_ID)as varchar) as latest_watermark\r\nfrom\r\n  lrs_raw.TRUX_SW_COMP_RAW.dm05a\r\n\r\nunion all\r\n\r\nselect\r\n'TRUX_TP_COMP' as Sql_db_name,\r\n'TRUX_TP_COMP_RAW' as Snowflake_schema,\r\n'DM05A' as table_name,\r\ncast(max(DM05A_ID)as varchar) as latest_watermark\r\nfrom\r\n  lrs_raw.TRUX_TP_COMP_RAW.dm05a\r\n\r\nunion all\r\n\r\nselect\r\n'TRUX_WA_COMP' as Sql_db_name,\r\n'TRUX_WA_COMP_RAW' as Snowflake_schema,\r\n'DM05A' as table_name,\r\ncast(max(DM05A_ID)as varchar) as latest_watermark\r\nfrom\r\n  lrs_raw.TRUX_WA_COMP_RAW.dm05a\r\n--------------------------------------------------\r\nunion all\r\n\r\n//DM05B\r\n\r\nselect\r\n'TRUX_CD_COMP' as Sql_db_name,\r\n'TRUX_CD_COMP_RAW' as Snowflake_schema,\r\n'DM05B' as table_name,\r\ncast(max(DM05B_ID)as varchar) as latest_watermark\r\nfrom\r\n  lrs_raw.TRUX_CD_COMP_RAW.DM05b\r\n\r\n\r\nunion all\r\n\r\nselect\r\n'TRUX_DC_COMP' as Sql_db_name,\r\n'TRUX_DC_COMP_RAW' as Snowflake_schema,\r\n'DM05B' as table_name,\r\ncast(max(DM05B_ID)as varchar) as latest_watermark\r\nfrom\r\n  lrs_raw.TRUX_DC_COMP_RAW.DM05b\r\n\r\n\r\nunion all\r\n\r\nselect\r\n'TRUX_ES_COMP' as Sql_db_name,\r\n'TRUX_ES_COMP_RAW' as Snowflake_schema,\r\n'DM05B' as table_name,\r\ncast(max(DM05B_ID)as varchar) as latest_watermark\r\nfrom\r\n  lrs_raw.TRUX_ES_COMP_RAW.DM05b\r\n\r\nunion all\r\n\r\nselect\r\n'TRUX_HR_COMP' as Sql_db_name,\r\n'TRUX_HR_COMP_RAW' as Snowflake_schema,\r\n'DM05B' as table_name,\r\ncast(max(DM05B_ID)as varchar) as latest_watermark\r\nfrom\r\n  lrs_raw.TRUX_HR_COMP_RAW.DM05b\r\n\r\nunion all\r\n\r\nselect\r\n'TRUX_LR_COMP' as Sql_db_name,\r\n'TRUX_LR_COMP_RAW' as Snowflake_schema,\r\n'DM05B' as table_name,\r\ncast(max(DM05B_ID)as varchar) as latest_watermark\r\nfrom\r\n  lrs_raw.TRUX_LR_COMP_RAW.DM05b\r\n\r\nunion all\r\n\r\nselect\r\n'TRUX_MC_COMP' as Sql_db_name,\r\n'TRUX_MC_COMP_RAW' as Snowflake_schema,\r\n'DM05B' as table_name,\r\ncast(max(DM05B_ID)as varchar) as latest_watermark\r\nfrom\r\n  lrs_raw.TRUX_MC_COMP_RAW.DM05b\r\n\r\n\r\nunion all\r\n\r\nselect\r\n'TRUX_MH_COMP' as Sql_db_name,\r\n'TRUX_MH_COMP_RAW' as Snowflake_schema,\r\n'DM05B' as table_name,\r\ncast(max(DM05B_ID)as varchar) as latest_watermark\r\nfrom\r\n  lrs_raw.TRUX_MH_COMP_RAW.DM05b\r\n\r\nunion all\r\n\r\nselect\r\n'TRUX_MO_COMP' as Sql_db_name,\r\n'TRUX_MO_COMP_RAW' as Snowflake_schema,\r\n'DM05B' as table_name,\r\ncast(max(DM05B_ID)as varchar) as latest_watermark\r\nfrom\r\n  lrs_raw.TRUX_MO_COMP_RAW.DM05b\r\n\r\nunion all\r\n\r\nselect\r\n'TRUX_MP_COMP' as Sql_db_name,\r\n'TRUX_MP_COMP_RAW' as Snowflake_schema,\r\n'DM05B' as table_name,\r\ncast(max(DM05B_ID)as varchar) as latest_watermark\r\nfrom\r\n  lrs_raw.TRUX_MP_COMP_RAW.DM05b\r\n\r\nunion all\r\n\r\nselect\r\n'TRUX_MW_COMP' as Sql_db_name,\r\n'TRUX_MW_COMP_RAW' as Snowflake_schema,\r\n'DM05B' as table_name,\r\ncast(max(DM05B_ID)as varchar) as latest_watermark\r\nfrom\r\n  lrs_raw.TRUX_MW_COMP_RAW.DM05b\r\n\r\nunion all\r\n\r\nselect\r\n'TRUX_NI_COMP' as Sql_db_name,\r\n'TRUX_NI_COMP_RAW' as Snowflake_schema,\r\n'DM05B' as table_name,\r\ncast(max(DM05B_ID)as varchar) as latest_watermark\r\nfrom\r\n  lrs_raw.TRUX_NI_COMP_RAW.DM05b\r\n\r\nunion all\r\n\r\nselect\r\n'TRUX_PS_COMP' as Sql_db_name,\r\n'TRUX_PS_COMP_RAW' as Snowflake_schema,\r\n'DM05B' as table_name,\r\ncast(max(DM05B_ID)as varchar) as latest_watermark\r\nfrom\r\n  lrs_raw.TRUX_PS_COMP_RAW.DM05b\r\n\r\nunion all\r\n\r\nselect\r\n'TRUX_RS_COMP' as Sql_db_name,\r\n'TRUX_RS_COMP_RAW' as Snowflake_schema,\r\n'DM05B' as table_name,\r\ncast(max(DM05B_ID)as varchar) as latest_watermark\r\nfrom\r\n  lrs_raw.TRUX_RS_COMP_RAW.DM05b\r\n\r\nunion all\r\n\r\nselect\r\n'TRUX_RT_COMP' as Sql_db_name,\r\n'TRUX_RT_COMP_RAW' as Snowflake_schema,\r\n'DM05B' as table_name,\r\ncast(max(DM05B_ID)as varchar) as latest_watermark\r\nfrom\r\n  lrs_raw.TRUX_RT_COMP_RAW.DM05b\r\n\r\nunion all\r\n\r\nselect\r\n'TRUX_RZ_COMP' as Sql_db_name,\r\n'TRUX_RZ_COMP_RAW' as Snowflake_schema,\r\n'DM05B' as table_name,\r\ncast(max(DM05B_ID)as varchar) as latest_watermark\r\nfrom\r\n  lrs_raw.TRUX_RZ_COMP_RAW.DM05b\r\n\r\nunion all\r\n\r\nselect\r\n'TRUX_SH_COMP' as Sql_db_name,\r\n'TRUX_SH_COMP_RAW' as Snowflake_schema,\r\n'DM05B' as table_name,\r\ncast(max(DM05B_ID)as varchar) as latest_watermark\r\nfrom\r\n  lrs_raw.TRUX_SH_COMP_RAW.DM05b\r\n\r\nunion all\r\n\r\nselect\r\n'TRUX_SW_COMP' as Sql_db_name,\r\n'TRUX_SW_COMP_RAW' as Snowflake_schema,\r\n'DM05B' as table_name,\r\ncast(max(DM05B_ID)as varchar) as latest_watermark\r\nfrom\r\n  lrs_raw.TRUX_SW_COMP_RAW.DM05b\r\n\r\nunion all\r\n\r\nselect\r\n'TRUX_TP_COMP' as Sql_db_name,\r\n'TRUX_TP_COMP_RAW' as Snowflake_schema,\r\n'DM05B' as table_name,\r\ncast(max(DM05B_ID)as varchar) as latest_watermark\r\nfrom\r\n  lrs_raw.TRUX_TP_COMP_RAW.DM05b\r\n\r\nunion all\r\n\r\nselect\r\n'TRUX_WA_COMP' as Sql_db_name,\r\n'TRUX_WA_COMP_RAW' as Snowflake_schema,\r\n'DM05B' as table_name,\r\ncast(max(DM05B_ID)as varchar) as latest_watermark\r\nfrom\r\n  lrs_raw.TRUX_WA_COMP_RAW.DM05b\r\n---------------------------------------------------------------------\r\nunion all\r\n//DM05FT\r\n\r\nselect\r\n'TRUX_CD_COMP' as Sql_db_name,\r\n'TRUX_CD_COMP_RAW' as Snowflake_schema,\r\n'DM05FT' as table_name,\r\ncast(max(DM05FT_ID)as varchar) as latest_watermark\r\nfrom\r\n  lrs_raw.TRUX_CD_COMP_RAW.DM05ft\r\n\r\n\r\nunion all\r\n\r\nselect\r\n'TRUX_DC_COMP' as Sql_db_name,\r\n'TRUX_DC_COMP_RAW' as Snowflake_schema,\r\n'DM05FT' as table_name,\r\ncast(max(DM05FT_ID)as varchar) as latest_watermark\r\nfrom\r\n  lrs_raw.TRUX_DC_COMP_RAW.DM05ft\r\n\r\n\r\nunion all\r\n\r\nselect\r\n'TRUX_ES_COMP' as Sql_db_name,\r\n'TRUX_ES_COMP_RAW' as Snowflake_schema,\r\n'DM05FT' as table_name,\r\ncast(max(DM05FT_ID)as varchar) as latest_watermark\r\nfrom\r\n  lrs_raw.TRUX_CD_COMP_RAW.DM05ft\r\n\r\nunion all\r\n\r\nselect\r\n'TRUX_HR_COMP' as Sql_db_name,\r\n'TRUX_HR_COMP_RAW' as Snowflake_schema,\r\n'DM05FT' as table_name,\r\ncast(max(DM05FT_ID)as varchar) as latest_watermark\r\nfrom\r\n  lrs_raw.TRUX_HR_COMP_RAW.DM05ft\r\n\r\nunion all\r\n\r\nselect\r\n'TRUX_LR_COMP' as Sql_db_name,\r\n'TRUX_LR_COMP_RAW' as Snowflake_schema,\r\n'DM05FT' as table_name,\r\ncast(max(DM05FT_ID)as varchar) as latest_watermark\r\nfrom\r\n  lrs_raw.TRUX_LR_COMP_RAW.DM05ft\r\n\r\nunion all\r\n\r\nselect\r\n'TRUX_MC_COMP' as Sql_db_name,\r\n'TRUX_MC_COMP_RAW' as Snowflake_schema,\r\n'DM05FT' as table_name,\r\ncast(max(DM05FT_ID)as varchar) as latest_watermark\r\nfrom\r\n  lrs_raw.TRUX_MC_COMP_RAW.DM05ft\r\n\r\n\r\nunion all\r\n\r\nselect\r\n'TRUX_MH_COMP' as Sql_db_name,\r\n'TRUX_MH_COMP_RAW' as Snowflake_schema,\r\n'DM05FT' as table_name,\r\ncast(max(DM05FT_ID)as varchar) as latest_watermark\r\nfrom\r\n  lrs_raw.TRUX_MH_COMP_RAW.DM05ft\r\n\r\nunion all\r\n\r\nselect\r\n'TRUX_MO_COMP' as Sql_db_name,\r\n'TRUX_MO_COMP_RAW' as Snowflake_schema,\r\n'DM05FT' as table_name,\r\ncast(max(DM05FT_ID)as varchar) as latest_watermark\r\nfrom\r\n  lrs_raw.TRUX_MO_COMP_RAW.DM05ft\r\n\r\nunion all\r\n\r\nselect\r\n'TRUX_MP_COMP' as Sql_db_name,\r\n'TRUX_MP_COMP_RAW' as Snowflake_schema,\r\n'DM05FT' as table_name,\r\ncast(max(DM05FT_ID)as varchar) as latest_watermark\r\nfrom\r\n  lrs_raw.TRUX_MP_COMP_RAW.DM05ft\r\n\r\nunion all\r\n\r\nselect\r\n'TRUX_MW_COMP' as Sql_db_name,\r\n'TRUX_MW_COMP_RAW' as Snowflake_schema,\r\n'DM05FT' as table_name,\r\ncast(max(DM05FT_ID)as varchar) as latest_watermark\r\nfrom\r\n  lrs_raw.TRUX_MW_COMP_RAW.DM05ft\r\n\r\nunion all\r\n\r\nselect\r\n'TRUX_NI_COMP' as Sql_db_name,\r\n'TRUX_NI_COMP_RAW' as Snowflake_schema,\r\n'DM05FT' as table_name,\r\ncast(max(DM05FT_ID)as varchar) as latest_watermark\r\nfrom\r\n  lrs_raw.TRUX_NI_COMP_RAW.DM05ft\r\n\r\nunion all\r\n\r\nselect\r\n'TRUX_PS_COMP' as Sql_db_name,\r\n'TRUX_PS_COMP_RAW' as Snowflake_schema,\r\n'DM05FT' as table_name,\r\ncast(max(DM05FT_ID)as varchar) as latest_watermark\r\nfrom\r\n  lrs_raw.TRUX_PS_COMP_RAW.DM05ft\r\n\r\nunion all\r\n\r\nselect\r\n'TRUX_RS_COMP' as Sql_db_name,\r\n'TRUX_RS_COMP_RAW' as Snowflake_schema,\r\n'DM05FT' as table_name,\r\ncast(max(DM05FT_ID)as varchar) as latest_watermark\r\nfrom\r\n  lrs_raw.TRUX_RS_COMP_RAW.DM05ft\r\n\r\nunion all\r\n\r\nselect\r\n'TRUX_RT_COMP' as Sql_db_name,\r\n'TRUX_RT_COMP_RAW' as Snowflake_schema,\r\n'DM05FT' as table_name,\r\ncast(max(DM05FT_ID)as varchar) as latest_watermark\r\nfrom\r\n  lrs_raw.TRUX_RT_COMP_RAW.DM05ft\r\n\r\nunion all\r\n\r\nselect\r\n'TRUX_RZ_COMP' as Sql_db_name,\r\n'TRUX_RZ_COMP_RAW' as Snowflake_schema,\r\n'DM05FT' as table_name,\r\ncast(max(DM05FT_ID)as varchar) as latest_watermark\r\nfrom\r\n  lrs_raw.TRUX_RZ_COMP_RAW.DM05ft\r\n\r\nunion all\r\n\r\nselect\r\n'TRUX_SH_COMP' as Sql_db_name,\r\n'TRUX_SH_COMP_RAW' as Snowflake_schema,\r\n'DM05FT' as table_name,\r\ncast(max(DM05FT_ID)as varchar) as latest_watermark\r\nfrom\r\n  lrs_raw.TRUX_SH_COMP_RAW.DM05ft\r\n\r\nunion all\r\n\r\nselect\r\n'TRUX_SW_COMP' as Sql_db_name,\r\n'TRUX_SW_COMP_RAW' as Snowflake_schema,\r\n'DM05FT' as table_name,\r\ncast(max(DM05FT_ID)as varchar) as latest_watermark\r\nfrom\r\n  lrs_raw.TRUX_SW_COMP_RAW.DM05ft\r\n\r\nunion all\r\n\r\nselect\r\n'TRUX_TP_COMP' as Sql_db_name,\r\n'TRUX_TP_COMP_RAW' as Snowflake_schema,\r\n'DM05FT' as table_name,\r\ncast(max(DM05FT_ID)as varchar) as latest_watermark\r\nfrom\r\n  lrs_raw.TRUX_TP_COMP_RAW.DM05ft\r\n\r\nunion all\r\n\r\nselect\r\n'TRUX_WA_COMP' as Sql_db_name,\r\n'TRUX_WA_COMP_RAW' as Snowflake_schema,\r\n'DM05FT' as table_name,\r\ncast(max(DM05FT_ID)as varchar) as latest_watermark\r\nfrom\r\n  lrs_raw.TRUX_WA_COMP_RAW.DM05ft\r\n---------------------------------------------------------\r\nunion all\r\n//DM05Z\r\n\r\nselect\r\n'TRUX_CD_COMP' as Sql_db_name,\r\n'TRUX_CD_COMP_RAW' as Snowflake_schema,\r\n'DM05Z' as table_name,\r\ncast(max(DM05Z_ID)as varchar) as latest_watermark\r\nfrom\r\n  lrs_raw.TRUX_CD_COMP_RAW.Dm05z\r\n\r\n\r\nunion all\r\n\r\nselect\r\n'TRUX_DC_COMP' as Sql_db_name,\r\n'TRUX_DC_COMP_RAW' as Snowflake_schema,\r\n'DM05Z' as table_name,\r\ncast(max(DM05Z_ID)as varchar) as latest_watermark\r\nfrom\r\n  lrs_raw.TRUX_DC_COMP_RAW.Dm05z\r\n\r\n\r\nunion all\r\n\r\nselect\r\n'TRUX_ES_COMP' as Sql_db_name,\r\n'TRUX_ES_COMP_RAW' as Snowflake_schema,\r\n'DM05Z' as table_name,\r\ncast(max(DM05Z_ID)as varchar) as latest_watermark\r\nfrom\r\n  lrs_raw.TRUX_ES_COMP_RAW.Dm05z\r\n\r\nunion all\r\n\r\nselect\r\n'TRUX_HR_COMP' as Sql_db_name,\r\n'TRUX_HR_COMP_RAW' as Snowflake_schema,\r\n'DM05Z' as table_name,\r\ncast(max(DM05Z_ID)as varchar) as latest_watermark\r\nfrom\r\n  lrs_raw.TRUX_HR_COMP_RAW.Dm05z\r\n\r\nunion all\r\n\r\nselect\r\n'TRUX_LR_COMP' as Sql_db_name,\r\n'TRUX_LR_COMP_RAW' as Snowflake_schema,\r\n'DM05Z' as table_name,\r\ncast(max(DM05Z_ID)as varchar) as latest_watermark\r\nfrom\r\n  lrs_raw.TRUX_LR_COMP_RAW.Dm05z\r\n\r\nunion all\r\n\r\nselect\r\n'TRUX_MC_COMP' as Sql_db_name,\r\n'TRUX_MC_COMP_RAW' as Snowflake_schema,\r\n'DM05Z' as table_name,\r\ncast(max(DM05Z_ID)as varchar) as latest_watermark\r\nfrom\r\n  lrs_raw.TRUX_MC_COMP_RAW.Dm05z\r\n\r\n\r\nunion all\r\n\r\nselect\r\n'TRUX_MH_COMP' as Sql_db_name,\r\n'TRUX_MH_COMP_RAW' as Snowflake_schema,\r\n'DM05Z' as table_name,\r\ncast(max(DM05Z_ID)as varchar) as latest_watermark\r\nfrom\r\n  lrs_raw.TRUX_MH_COMP_RAW.Dm05z\r\n\r\nunion all\r\n\r\nselect\r\n'TRUX_MO_COMP' as Sql_db_name,\r\n'TRUX_MO_COMP_RAW' as Snowflake_schema,\r\n'DM05Z' as table_name,\r\ncast(max(DM05Z_ID)as varchar) as latest_watermark\r\nfrom\r\n  lrs_raw.TRUX_MO_COMP_RAW.Dm05z\r\n\r\nunion all\r\n\r\nselect\r\n'TRUX_MP_COMP' as Sql_db_name,\r\n'TRUX_MP_COMP_RAW' as Snowflake_schema,\r\n'DM05Z' as table_name,\r\ncast(max(DM05Z_ID)as varchar) as latest_watermark\r\nfrom\r\n  lrs_raw.TRUX_MP_COMP_RAW.Dm05z\r\n\r\nunion all\r\n\r\nselect\r\n'TRUX_MW_COMP' as Sql_db_name,\r\n'TRUX_MW_COMP_RAW' as Snowflake_schema,\r\n'DM05Z' as table_name,\r\ncast(max(DM05Z_ID)as varchar) as latest_watermark\r\nfrom\r\n  lrs_raw.TRUX_MW_COMP_RAW.Dm05z\r\n\r\nunion all\r\n\r\nselect\r\n'TRUX_NI_COMP' as Sql_db_name,\r\n'TRUX_NI_COMP_RAW' as Snowflake_schema,\r\n'DM05Z' as table_name,\r\ncast(max(DM05Z_ID)as varchar) as latest_watermark\r\nfrom\r\n  lrs_raw.TRUX_NI_COMP_RAW.Dm05z\r\n\r\nunion all\r\n\r\nselect\r\n'TRUX_PS_COMP' as Sql_db_name,\r\n'TRUX_PS_COMP_RAW' as Snowflake_schema,\r\n'DM05Z' as table_name,\r\ncast(max(DM05Z_ID)as varchar) as latest_watermark\r\nfrom\r\n  lrs_raw.TRUX_PS_COMP_RAW.Dm05z\r\n\r\nunion all\r\n\r\nselect\r\n'TRUX_RS_COMP' as Sql_db_name,\r\n'TRUX_RS_COMP_RAW' as Snowflake_schema,\r\n'DM05Z' as table_name,\r\ncast(max(DM05Z_ID)as varchar) as latest_watermark\r\nfrom\r\n  lrs_raw.TRUX_RS_COMP_RAW.Dm05z\r\n\r\nunion all\r\n\r\nselect\r\n'TRUX_RT_COMP' as Sql_db_name,\r\n'TRUX_RT_COMP_RAW' as Snowflake_schema,\r\n'DM05Z' as table_name,\r\ncast(max(DM05Z_ID)as varchar) as latest_watermark\r\nfrom\r\n  lrs_raw.TRUX_RT_COMP_RAW.Dm05z\r\n\r\nunion all\r\n\r\nselect\r\n'TRUX_RZ_COMP' as Sql_db_name,\r\n'TRUX_RZ_COMP_RAW' as Snowflake_schema,\r\n'DM05Z' as table_name,\r\ncast(max(DM05Z_ID)as varchar) as latest_watermark\r\nfrom\r\n  lrs_raw.TRUX_RZ_COMP_RAW.Dm05z\r\n\r\nunion all\r\n\r\nselect\r\n'TRUX_SH_COMP' as Sql_db_name,\r\n'TRUX_SH_COMP_RAW' as Snowflake_schema,\r\n'DM05Z' as table_name,\r\ncast(max(DM05Z_ID)as varchar) as latest_watermark\r\nfrom\r\n  lrs_raw.TRUX_SH_COMP_RAW.Dm05z\r\n\r\nunion all\r\n\r\nselect\r\n'TRUX_SW_COMP' as Sql_db_name,\r\n'TRUX_SW_COMP_RAW' as Snowflake_schema,\r\n'DM05Z' as table_name,\r\ncast(max(DM05Z_ID)as varchar) as latest_watermark\r\nfrom\r\n  lrs_raw.TRUX_SW_COMP_RAW.Dm05z\r\n\r\nunion all\r\n\r\nselect\r\n'TRUX_TP_COMP' as Sql_db_name,\r\n'TRUX_TP_COMP_RAW' as Snowflake_schema,\r\n'DM05Z' as table_name,\r\ncast(max(DM05Z_ID)as varchar) as latest_watermark\r\nfrom\r\n  lrs_raw.TRUX_TP_COMP_RAW.Dm05z\r\n\r\nunion all\r\n\r\nselect\r\n'TRUX_WA_COMP' as Sql_db_name,\r\n'TRUX_WA_COMP_RAW' as Snowflake_schema,\r\n'DM05Z' as table_name,\r\ncast(max(DM05Z_ID)as varchar) as latest_watermark\r\nfrom\r\n  lrs_raw.TRUX_WA_COMP_RAW.Dm05z\r\n\r\n--------------------------------------------------------\r\nunion all\r\n//LM02\r\n\r\nselect\r\n'TRUX_CD_COMP' as Sql_db_name,\r\n'TRUX_CD_COMP_RAW' as Snowflake_schema,\r\n'LM02' as table_name,\r\ncast(max(lm02_id)as varchar) as latest_watermark\r\nfrom\r\n  lrs_raw.TRUX_CD_COMP_RAW.Lm02\r\n\r\n\r\nunion all\r\n\r\nselect\r\n'TRUX_DC_COMP' as Sql_db_name,\r\n'TRUX_DC_COMP_RAW' as Snowflake_schema,\r\n'LM02' as table_name,\r\ncast(max(lm02_id)as varchar) as latest_watermark\r\nfrom\r\n  lrs_raw.TRUX_DC_COMP_RAW.Lm02\r\n\r\n\r\nunion all\r\n\r\nselect\r\n'TRUX_ES_COMP' as Sql_db_name,\r\n'TRUX_ES_COMP_RAW' as Snowflake_schema,\r\n'LM02' as table_name,\r\ncast(max(lm02_id)as varchar) as latest_watermark\r\nfrom\r\n  lrs_raw.TRUX_ES_COMP_RAW.Lm02\r\n\r\nunion all\r\n\r\nselect\r\n'TRUX_HR_COMP' as Sql_db_name,\r\n'TRUX_HR_COMP_RAW' as Snowflake_schema,\r\n'LM02' as table_name,\r\ncast(max(lm02_id)as varchar) as latest_watermark\r\nfrom\r\n  lrs_raw.TRUX_HR_COMP_RAW.Lm02\r\n\r\nunion all\r\n\r\nselect\r\n'TRUX_LR_COMP' as Sql_db_name,\r\n'TRUX_LR_COMP_RAW' as Snowflake_schema,\r\n'LM02' as table_name,\r\ncast(max(lm02_id)as varchar) as latest_watermark\r\nfrom\r\n  lrs_raw.TRUX_LR_COMP_RAW.Lm02\r\n\r\nunion all\r\n\r\nselect\r\n'TRUX_MC_COMP' as Sql_db_name,\r\n'TRUX_MC_COMP_RAW' as Snowflake_schema,\r\n'LM02' as table_name,\r\ncast(max(lm02_id)as varchar) as latest_watermark\r\nfrom\r\n  lrs_raw.TRUX_MC_COMP_RAW.Lm02\r\n\r\n\r\nunion all\r\n\r\nselect\r\n'TRUX_MH_COMP' as Sql_db_name,\r\n'TRUX_MH_COMP_RAW' as Snowflake_schema,\r\n'LM02' as table_name,\r\ncast(max(lm02_id)as varchar) as latest_watermark\r\nfrom\r\n  lrs_raw.TRUX_MH_COMP_RAW.Lm02\r\n\r\nunion all\r\n\r\nselect\r\n'TRUX_MO_COMP' as Sql_db_name,\r\n'TRUX_MO_COMP_RAW' as Snowflake_schema,\r\n'LM02' as table_name,\r\ncast(max(lm02_id)as varchar) as latest_watermark\r\nfrom\r\n  lrs_raw.TRUX_MO_COMP_RAW.Lm02\r\n\r\nunion all\r\n\r\nselect\r\n'TRUX_MP_COMP' as Sql_db_name,\r\n'TRUX_MP_COMP_RAW' as Snowflake_schema,\r\n'LM02' as table_name,\r\ncast(max(lm02_id)as varchar) as latest_watermark\r\nfrom\r\n  lrs_raw.TRUX_MP_COMP_RAW.Lm02\r\n\r\nunion all\r\n\r\nselect\r\n'TRUX_MW_COMP' as Sql_db_name,\r\n'TRUX_MW_COMP_RAW' as Snowflake_schema,\r\n'LM02' as table_name,\r\ncast(max(lm02_id)as varchar) as latest_watermark\r\nfrom\r\n  lrs_raw.TRUX_MW_COMP_RAW.Lm02\r\n\r\nunion all\r\n\r\nselect\r\n'TRUX_NI_COMP' as Sql_db_name,\r\n'TRUX_NI_COMP_RAW' as Snowflake_schema,\r\n'LM02' as table_name,\r\ncast(max(lm02_id)as varchar) as latest_watermark\r\nfrom\r\n  lrs_raw.TRUX_NI_COMP_RAW.Lm02\r\n\r\nunion all\r\n\r\nselect\r\n'TRUX_PS_COMP' as Sql_db_name,\r\n'TRUX_PS_COMP_RAW' as Snowflake_schema,\r\n'LM02' as table_name,\r\ncast(max(lm02_id)as varchar) as latest_watermark\r\nfrom\r\n  lrs_raw.TRUX_PS_COMP_RAW.Lm02\r\n\r\nunion all\r\n\r\nselect\r\n'TRUX_RS_COMP' as Sql_db_name,\r\n'TRUX_RS_COMP_RAW' as Snowflake_schema,\r\n'LM02' as table_name,\r\ncast(max(lm02_id)as varchar) as latest_watermark\r\nfrom\r\n  lrs_raw.TRUX_RS_COMP_RAW.Lm02\r\n\r\nunion all\r\n\r\nselect\r\n'TRUX_RT_COMP' as Sql_db_name,\r\n'TRUX_RT_COMP_RAW' as Snowflake_schema,\r\n'LM02' as table_name,\r\ncast(max(lm02_id)as varchar) as latest_watermark\r\nfrom\r\n  lrs_raw.TRUX_RT_COMP_RAW.Lm02\r\n\r\nunion all\r\n\r\nselect\r\n'TRUX_RZ_COMP' as Sql_db_name,\r\n'TRUX_RZ_COMP_RAW' as Snowflake_schema,\r\n'LM02' as table_name,\r\ncast(max(lm02_id)as varchar) as latest_watermark\r\nfrom\r\n  lrs_raw.TRUX_RZ_COMP_RAW.Lm02\r\n\r\nunion all\r\n\r\nselect\r\n'TRUX_SH_COMP' as Sql_db_name,\r\n'TRUX_SH_COMP_RAW' as Snowflake_schema,\r\n'LM02' as table_name,\r\ncast(max(lm02_id)as varchar) as latest_watermark\r\nfrom\r\n  lrs_raw.TRUX_SH_COMP_RAW.Lm02\r\n\r\nunion all\r\n\r\nselect\r\n'TRUX_SW_COMP' as Sql_db_name,\r\n'TRUX_SW_COMP_RAW' as Snowflake_schema,\r\n'LM02' as table_name,\r\ncast(max(lm02_id)as varchar) as latest_watermark\r\nfrom\r\n  lrs_raw.TRUX_SW_COMP_RAW.Lm02\r\n\r\nunion all\r\n\r\nselect\r\n'TRUX_TP_COMP' as Sql_db_name,\r\n'TRUX_TP_COMP_RAW' as Snowflake_schema,\r\n'LM02' as table_name,\r\ncast(max(lm02_id)as varchar) as latest_watermark\r\nfrom\r\n  lrs_raw.TRUX_TP_COMP_RAW.Lm02\r\n\r\nunion all\r\n\r\nselect\r\n'TRUX_WA_COMP' as Sql_db_name,\r\n'TRUX_WA_COMP_RAW' as Snowflake_schema,\r\n'LM02' as table_name,\r\ncast(max(lm02_id)as varchar) as latest_watermark\r\nfrom\r\n  lrs_raw.TRUX_WA_COMP_RAW.Lm02\r\n  \r\n------------------------------------------------------------\r\nunion all\r\n\r\n//MT02\r\n\r\nselect \r\n'TRUX_CD_COMP' as Sql_db_name,\r\n'TRUX_CD_COMP_RAW' as Snowflake_schema,\r\n'MT02' as table_name,\r\ncast(Max(mt02_lmdate) as varchar) as latest_watermark\r\nfrom\r\n  lrs_raw.TRUX_CD_COMP_RAW.MT02\r\n\r\nunion all\r\n\r\nselect \r\n'TRUX_DC_COMP' as Sql_db_name,\r\n'TRUX_DC_COMP_RAW' as Snowflake_schema,\r\n'MT02' as table_name,\r\ncast(Max(mt02_lmdate) as varchar) as latest_watermark\r\nfrom\r\n  lrs_raw.TRUX_DC_COMP_RAW.MT02\r\n\r\nunion all\r\n\r\nselect \r\n'TRUX_ES_COMP' as Sql_db_name,\r\n'TRUX_ES_COMP_RAW' as Snowflake_schema,\r\n'MT02' as table_name,\r\ncast(Max(mt02_lmdate) as varchar) as latest_watermark\r\nfrom\r\n  lrs_raw.TRUX_ES_COMP_RAW.MT02\r\n\r\nunion all\r\n\r\nselect \r\n'TRUX_HR_COMP' as Sql_db_name,\r\n'TRUX_HR_COMP_RAW' as Snowflake_schema,\r\n'MT02' as table_name,\r\ncast(Max(mt02_lmdate) as varchar) as latest_watermark\r\nfrom\r\n  lrs_raw.TRUX_HR_COMP_RAW.MT02\r\n\r\nunion all\r\n\r\nselect \r\n'TRUX_LR_COMP' as Sql_db_name,\r\n'TRUX_LR_COMP_RAW' as Snowflake_schema,\r\n'MT02' as table_name,\r\ncast(Max(mt02_lmdate) as varchar) as latest_watermark\r\nfrom\r\n  lrs_raw.TRUX_LR_COMP_RAW.MT02\r\n\r\nunion all\r\n\r\nselect \r\n'TRUX_MC_COMP' as Sql_db_name,\r\n'TRUX_MC_COMP_RAW' as Snowflake_schema,\r\n'MT02' as table_name,\r\ncast(Max(mt02_lmdate) as varchar) as latest_watermark\r\nfrom\r\n  lrs_raw.TRUX_MC_COMP_RAW.MT02\r\n\r\nunion all\r\n\r\nselect \r\n'TRUX_MH_COMP' as Sql_db_name,\r\n'TRUX_MH_COMP_RAW' as Snowflake_schema,\r\n'MT02' as table_name,\r\ncast(Max(mt02_lmdate) as varchar)as latest_watermark\r\nfrom\r\n  lrs_raw.TRUX_MH_COMP_RAW.MT02\r\n\r\nunion all\r\n\r\nselect \r\n'TRUX_MO_COMP' as Sql_db_name,\r\n'TRUX_MO_COMP_RAW' as Snowflake_schema,\r\n'MT02' as table_name,\r\ncast(Max(mt02_lmdate) as varchar) as latest_watermark\r\nfrom\r\n  lrs_raw.TRUX_MO_COMP_RAW.MT02\r\n\r\nunion all\r\n\r\nselect \r\n'TRUX_MP_COMP' as Sql_db_name,\r\n'TRUX_MP_COMP_RAW' as Snowflake_schema,\r\n'MT02' as table_name,\r\ncast(Max(mt02_lmdate) as varchar) as latest_watermark\r\nfrom\r\n  lrs_raw.TRUX_MP_COMP_RAW.MT02\r\n\r\nunion all\r\n\r\nselect \r\n'TRUX_MW_COMP' as Sql_db_name,\r\n'TRUX_MW_COMP_RAW' as Snowflake_schema,\r\n'MT02' as table_name,\r\ncast(Max(mt02_lmdate) as varchar) as latest_watermark\r\nfrom\r\n  lrs_raw.TRUX_MW_COMP_RAW.MT02\r\n\r\nunion all\r\n\r\nselect \r\n'TRUX_NI_COMP' as Sql_db_name,\r\n'TRUX_NI_COMP_RAW' as Snowflake_schema,\r\n'MT02' as table_name,\r\ncast(Max(mt02_lmdate) as varchar)  as latest_watermark\r\nfrom\r\n  lrs_raw.TRUX_NI_COMP_RAW.MT02\r\n\r\nunion all\r\n\r\nselect \r\n'TRUX_PS_COMP' as Sql_db_name,\r\n'TRUX_PS_COMP_RAW' as Snowflake_schema,\r\n'MT02' as table_name,\r\nCast(Max(mt02_lmdate) as varchar) as latest_watermark\r\nfrom\r\n  lrs_raw.TRUX_PS_COMP_RAW.MT02\r\nunion all\r\n\r\nselect \r\n'TRUX_RS_COMP' as Sql_db_name,\r\n'TRUX_RS_COMP_RAW' as Snowflake_schema,\r\n'MT02' as table_name,\r\nCast(Max(mt02_lmdate) as varchar) as latest_watermark\r\nfrom\r\n  lrs_raw.TRUX_RS_COMP_RAW.MT02\r\n\r\nunion all\r\n\r\nselect \r\n'TRUX_RT_COMP' as Sql_db_name,\r\n'TRUX_RT_COMP_RAW' as Snowflake_schema,\r\n'MT02' as table_name,\r\nCast(Max(mt02_lmdate) as varchar) as latest_watermark\r\nfrom\r\n  lrs_raw.TRUX_RT_COMP_RAW.MT02\r\n\r\nunion all\r\n\r\nselect \r\n'TRUX_RZ_COMP' as Sql_db_name,\r\n'TRUX_RZ_COMP_RAW' as Snowflake_schema,\r\n'MT02' as table_name,\r\nCast(Max(mt02_lmdate) as varchar) as latest_watermark\r\nfrom\r\n  lrs_raw.TRUX_RZ_COMP_RAW.MT02\r\n\r\nunion all\r\n\r\nselect \r\n'TRUX_SH_COMP' as Sql_db_name,\r\n'TRUX_SH_COMP_RAW' as Snowflake_schema,\r\n'MT02' as table_name,\r\nCast(Max(mt02_lmdate) as varchar) as latest_watermark\r\nfrom\r\n  lrs_raw.TRUX_SH_COMP_RAW.MT02\r\n\r\nunion all\r\n\r\nselect \r\n'TRUX_SW_COMP' as Sql_db_name,\r\n'TRUX_SW_COMP_RAW' as Snowflake_schema,\r\n'MT02' as table_name,\r\nCast(Max(mt02_lmdate) as varchar) as latest_watermark\r\nfrom\r\n  lrs_raw.TRUX_SW_COMP_RAW.MT02\r\n\r\nunion all\r\n\r\nselect \r\n'TRUX_TP_COMP' as Sql_db_name,\r\n'TRUX_TP_COMP_RAW' as Snowflake_schema,\r\n'MT02' as table_name,\r\nCast(Max(mt02_lmdate) as varchar) as latest_watermark\r\nfrom\r\n  lrs_raw.TRUX_TP_COMP_RAW.MT02\r\n\r\nunion all\r\n\r\nselect \r\n'TRUX_WA_COMP' as Sql_db_name,\r\n'TRUX_WA_COMP_RAW' as Snowflake_schema,\r\n'MT02' as table_name,\r\nCast(Max(mt02_lmdate) as varchar) as latest_watermark\r\nfrom\r\n  lrs_raw.TRUX_WA_COMP_RAW.MT02\r\n\r\n\r\n-----------------------------------------------------------------------------\r\nunion all\r\n\r\n//RM03U\r\n\r\nselect\r\n'TRUX_CD_COMP' as Sql_db_name,\r\n'TRUX_CD_COMP_RAW' as Snowflake_schema,\r\n'RM03U' as table_name,\r\ncast(max(RM03U_ID)as varchar) as latest_watermark\r\nfrom\r\n  lrs_raw.TRUX_CD_COMP_RAW.Rm03u\r\n\r\n\r\nunion all\r\n\r\nselect\r\n'TRUX_DC_COMP' as Sql_db_name,\r\n'TRUX_DC_COMP_RAW' as Snowflake_schema,\r\n'RM03U' as table_name,\r\ncast(max(RM03U_ID)as varchar) as latest_watermark\r\nfrom\r\n  lrs_raw.TRUX_DC_COMP_RAW.Rm03u\r\n\r\n\r\nunion all\r\n\r\nselect\r\n'TRUX_ES_COMP' as Sql_db_name,\r\n'TRUX_ES_COMP_RAW' as Snowflake_schema,\r\n'RM03U' as table_name,\r\ncast(max(RM03U_ID)as varchar) as latest_watermark\r\nfrom\r\n  lrs_raw.TRUX_ES_COMP_RAW.Rm03u\r\n\r\nunion all\r\n\r\nselect\r\n'TRUX_HR_COMP' as Sql_db_name,\r\n'TRUX_HR_COMP_RAW' as Snowflake_schema,\r\n'RM03U' as table_name,\r\ncast(max(RM03U_ID)as varchar) as latest_watermark\r\nfrom\r\n  lrs_raw.TRUX_HR_COMP_RAW.Rm03u\r\n\r\nunion all\r\n\r\nselect\r\n'TRUX_LR_COMP' as Sql_db_name,\r\n'TRUX_LR_COMP_RAW' as Snowflake_schema,\r\n'RM03U' as table_name,\r\ncast(max(RM03U_ID)as varchar) as latest_watermark\r\nfrom\r\n  lrs_raw.TRUX_LR_COMP_RAW.Rm03u\r\n\r\nunion all\r\n\r\nselect\r\n'TRUX_MC_COMP' as Sql_db_name,\r\n'TRUX_MC_COMP_RAW' as Snowflake_schema,\r\n'RM03U' as table_name,\r\ncast(max(RM03U_ID)as varchar) as latest_watermark\r\nfrom\r\n  lrs_raw.TRUX_MC_COMP_RAW.Rm03u\r\n\r\n\r\nunion all\r\n\r\nselect\r\n'TRUX_MH_COMP' as Sql_db_name,\r\n'TRUX_MH_COMP_RAW' as Snowflake_schema,\r\n'RM03U' as table_name,\r\ncast(max(RM03U_ID)as varchar) as latest_watermark\r\nfrom\r\n  lrs_raw.TRUX_MH_COMP_RAW.Rm03u\r\n\r\nunion all\r\n\r\nselect\r\n'TRUX_MO_COMP' as Sql_db_name,\r\n'TRUX_MO_COMP_RAW' as Snowflake_schema,\r\n'RM03U' as table_name,\r\ncast(max(RM03U_ID)as varchar) as latest_watermark\r\nfrom\r\n  lrs_raw.TRUX_MO_COMP_RAW.Rm03u\r\n\r\nunion all\r\n\r\nselect\r\n'TRUX_MP_COMP' as Sql_db_name,\r\n'TRUX_MP_COMP_RAW' as Snowflake_schema,\r\n'RM03U' as table_name,\r\ncast(max(RM03U_ID)as varchar) as latest_watermark\r\nfrom\r\n  lrs_raw.TRUX_MP_COMP_RAW.Rm03u\r\n\r\nunion all\r\n\r\nselect\r\n'TRUX_MW_COMP' as Sql_db_name,\r\n'TRUX_MW_COMP_RAW' as Snowflake_schema,\r\n'RM03U' as table_name,\r\ncast(max(RM03U_ID)as varchar) as latest_watermark\r\nfrom\r\n  lrs_raw.TRUX_MW_COMP_RAW.Rm03u\r\n\r\nunion all\r\n\r\nselect\r\n'TRUX_NI_COMP' as Sql_db_name,\r\n'TRUX_NI_COMP_RAW' as Snowflake_schema,\r\n'RM03U' as table_name,\r\ncast(max(RM03U_ID)as varchar) as latest_watermark\r\nfrom\r\n  lrs_raw.TRUX_NI_COMP_RAW.Rm03u\r\n\r\nunion all\r\n\r\nselect\r\n'TRUX_PS_COMP' as Sql_db_name,\r\n'TRUX_PS_COMP_RAW' as Snowflake_schema,\r\n'RM03U' as table_name,\r\ncast(max(RM03U_ID)as varchar) as latest_watermark\r\nfrom\r\n  lrs_raw.TRUX_PS_COMP_RAW.Rm03u\r\n\r\nunion all\r\n\r\nselect\r\n'TRUX_RS_COMP' as Sql_db_name,\r\n'TRUX_RS_COMP_RAW' as Snowflake_schema,\r\n'RM03U' as table_name,\r\ncast(max(RM03U_ID)as varchar) as latest_watermark\r\nfrom\r\n  lrs_raw.TRUX_RS_COMP_RAW.Rm03u\r\n\r\nunion all\r\n\r\nselect\r\n'TRUX_RT_COMP' as Sql_db_name,\r\n'TRUX_RT_COMP_RAW' as Snowflake_schema,\r\n'RM03U' as table_name,\r\ncast(max(RM03U_ID)as varchar) as latest_watermark\r\nfrom\r\n  lrs_raw.TRUX_RT_COMP_RAW.Rm03u\r\n\r\nunion all\r\n\r\nselect\r\n'TRUX_RZ_COMP' as Sql_db_name,\r\n'TRUX_RZ_COMP_RAW' as Snowflake_schema,\r\n'RM03U' as table_name,\r\ncast(max(RM03U_ID)as varchar) as latest_watermark\r\nfrom\r\n  lrs_raw.TRUX_RZ_COMP_RAW.Rm03u\r\n\r\nunion all\r\n\r\nselect\r\n'TRUX_SH_COMP' as Sql_db_name,\r\n'TRUX_SH_COMP_RAW' as Snowflake_schema,\r\n'RM03U' as table_name,\r\ncast(max(RM03U_ID)as varchar) as latest_watermark\r\nfrom\r\n  lrs_raw.TRUX_SH_COMP_RAW.Rm03u\r\n\r\nunion all\r\n\r\nselect\r\n'TRUX_SW_COMP' as Sql_db_name,\r\n'TRUX_SW_COMP_RAW' as Snowflake_schema,\r\n'RM03U' as table_name,\r\ncast(max(RM03U_ID)as varchar) as latest_watermark\r\nfrom\r\n  lrs_raw.TRUX_SW_COMP_RAW.Rm03u\r\n\r\nunion all\r\n\r\nselect\r\n'TRUX_TP_COMP' as Sql_db_name,\r\n'TRUX_TP_COMP_RAW' as Snowflake_schema,\r\n'RM03U' as table_name,\r\ncast(max(RM03U_ID)as varchar) as latest_watermark\r\nfrom\r\n  lrs_raw.TRUX_TP_COMP_RAW.Rm03u\r\n\r\nunion all\r\n\r\nselect\r\n'TRUX_WA_COMP' as Sql_db_name,\r\n'TRUX_WA_COMP_RAW' as Snowflake_schema,\r\n'RM03U' as table_name,\r\ncast(max(RM03U_ID)as varchar) as latest_watermark\r\nfrom\r\n  lrs_raw.TRUX_WA_COMP_RAW.Rm03u\r\n\r\n---------------------------------------------------------",
								"exportSettings": {
									"type": "SnowflakeExportCopyCommand"
								}
							},
							"dataset": {
								"referenceName": "LRS_Snowflake_Raw_V2",
								"type": "DatasetReference",
								"parameters": {
									"Snowflake_Sink_Table": "DATABASE_LKPWATERMARK_TRUX_LEGACY",
									"Snowflake_Schema": "MASTER_DATA"
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "Loop Over Tables",
						"description": "activity to loop over our array of results which are the tables",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Trux Legacy Watermark Lookup",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Trux Legacy Watermark Lookup').output.value",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "RM05 Incremental Delta Load to Staging",
									"description": "Copying delta rows from sql server to the staging tables created for each instance in snowflake (these tables will be dropped after all activities are completed)",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "Snowflake Create Staging Tables",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SqlServerSource",
											"sqlReaderQuery": {
												"value": "select * from RM05\nwhere RM05_DATE > DATEADD(day, -7, GETDATE())",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"sink": {
											"type": "SnowflakeV2Sink",
											"importSettings": {
												"type": "SnowflakeImportCopyCommand"
											}
										},
										"enableStaging": true,
										"stagingSettings": {
											"linkedServiceName": {
												"referenceName": "msaz01_dm01_Azure_Blob",
												"type": "LinkedServiceReference"
											},
											"path": "staging"
										}
									},
									"inputs": [
										{
											"referenceName": "MSAZ01",
											"type": "DatasetReference",
											"parameters": {
												"schema": "dbo",
												"table": "rm05",
												"database": {
													"value": "@item().sql_db_name",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "LRS_Snowflake_Raw_V2",
											"type": "DatasetReference",
											"parameters": {
												"Snowflake_Sink_Table": {
													"value": "@concat(item().table_name,'_STAGING')",
													"type": "Expression"
												},
												"Snowflake_Schema": {
													"value": "@item().snowflake_schema",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "Snowflake Create Staging Tables",
									"description": "create staging table used to store the delta incremental load. In this staging table, we perform a merge to the main raw table.",
									"type": "Script",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "LRS_Snowflake_V2",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"type": "Query",
												"text": {
													"value": "@{concat('Create or replace table ', item().Snowflake_schema,'.',item().table_name,'_staging\n    as \n    select * from ', item().Snowflake_schema,'.',item().table_name,\n    ' where 1=0')}\n",
													"type": "Expression"
												}
											}
										],
										"scriptBlockExecutionTimeout": "02:00:00"
									}
								},
								{
									"name": "RM05 Snowflake Merge Operation",
									"description": "merge statement to the raw tables. this helps avoids any duplication and upsert the rows needed.",
									"type": "Script",
									"dependsOn": [
										{
											"activity": "RM05 Incremental Delta Load to Staging",
											"dependencyConditions": [
												"Succeeded",
												"Skipped"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "LRS_Snowflake_V2",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"type": "Query",
												"text": {
													"value": "@{concat('merge into ', item().Snowflake_schema,'.','RM05 t \nusing ', \n    item().Snowflake_schema,'.','RM05_STAGING s \non concat(t.rm05_rout, t.rm05_seq1,t.rm05_seq2,t.rm05_date) = concat(s.rm05_rout, s.rm05_seq1,s.rm05_seq2,s.rm05_date) \nwhen matched then update set \n    t.rm05_date = s.rm05_date,\n\tt.rm05_rout = s.rm05_rout,\n\tt.rm05_seq1 = s.rm05_seq1, \n\tt.rm05_seq2 = s.rm05_seq2, \n\tt.rm05_truk = s.rm05_truk,\n\tt.rm05_driv = s.rm05_driv,\n\tt.rm05_help = s.rm05_help,\n\tt.rm05_fuel = s.rm05_fuel,\n\tt.rm05_fuom = s.rm05_fuom,\n\tt.rm05_tim1 = s.rm05_tim1,\n\tt.rm05_tim2 = s.rm05_tim2,\n\tt.rm05_odm1 = s.rm05_odm1,\n\tt.rm05_odm2 = s.rm05_odm2,\n\tt.rm05_ouom = s.rm05_ouom,\n\tt.rm05_note = s.rm05_note,\n\tt.rm05_starthour = s.rm05_starthour,\n\tt.rm05_endhour = s.rm05_endhour,\n\tt.rm05_oil = s.rm05_oil,\n\tt.rm05_oil_uom = s.rm05_oil_uom,\n\tt.rm05_deptime = s.rm05_deptime,\n\tt.rm05_rettime = s.rm05_rettime,\n\tt.rm05_starttime= s.rm05_starttime \nwhen not matched then insert \n\t(\n\tt.rm05_date,\n\tt.rm05_rout,\n\tt.rm05_seq1,\n\tt.rm05_seq2,\n\tt.rm05_truk,\n\tt.rm05_driv,\n\tt.rm05_help,\n\tt.rm05_fuel,\n\tt.rm05_fuom,\n\tt.rm05_tim1,\n\tt.rm05_tim2,\n\tt.rm05_odm1,\n\tt.rm05_odm2,\n\tt.rm05_ouom,\n\tt.rm05_note,\n\tt.rm05_starthour,\n\tt.rm05_endhour,\n\tt.rm05_oil,\n\tt.rm05_oil_uom,\n\tt.rm05_deptime,\n\tt.rm05_rettime,\n\tt.rm05_starttime \n\t)\nvalues \n\t(\n\ts.rm05_date,\n\ts.rm05_rout,\n\ts.rm05_seq1, \n\ts.rm05_seq2, \n\ts.rm05_truk,\n\ts.rm05_driv,\n\ts.rm05_help,\n\ts.rm05_fuel,\n\ts.rm05_fuom,\n\ts.rm05_tim1,\n\ts.rm05_tim2,\n\ts.rm05_odm1,\n\ts.rm05_odm2,\n\ts.rm05_ouom,\n\ts.rm05_note,\n\ts.rm05_starthour,\n\ts.rm05_endhour,\n\ts.rm05_oil,\n\ts.rm05_oil_uom,\n\ts.rm05_deptime,\n\ts.rm05_rettime,\n\ts.rm05_starttime)'\n\t)}\n",
													"type": "Expression"
												}
											}
										],
										"scriptBlockExecutionTimeout": "02:00:00"
									}
								},
								{
									"name": "Snowflake Drop Staging Tables",
									"description": "after all activities are completed, we perform the drop operation to clean up the snowflake environment",
									"type": "Script",
									"dependsOn": [
										{
											"activity": "RM05 Snowflake Merge Operation",
											"dependencyConditions": [
												"Succeeded"
											]
										},
										{
											"activity": "SM01 Snowflake Merge Operation_copy1",
											"dependencyConditions": [
												"Succeeded"
											]
										},
										{
											"activity": "MT02 Snowflake Merge Operation_copy1_copy1",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "LRS_Snowflake_V2",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"type": "Query",
												"text": {
													"value": "@{concat('drop table if exists ', item().Snowflake_schema,'.',item().table_name,'_STAGING')}\n",
													"type": "Expression"
												}
											}
										],
										"scriptBlockExecutionTimeout": "02:00:00"
									}
								},
								{
									"name": "DM01 Incremental Delta Load",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SqlServerSource",
											"sqlReaderQuery": {
												"value": "select * from DM01\nwhere DM01_ID > cast('@{item().LATEST_WATERMARK}' as int)",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"sink": {
											"type": "SnowflakeV2Sink",
											"importSettings": {
												"type": "SnowflakeImportCopyCommand",
												"additionalCopyOptions": {
													"ON_ERROR": "SKIP_FILE"
												}
											}
										},
										"enableStaging": true,
										"stagingSettings": {
											"linkedServiceName": {
												"referenceName": "msaz01_dm01_Azure_Blob",
												"type": "LinkedServiceReference"
											},
											"path": "staging"
										},
										"parallelCopies": {
											"value": "@pipeline().parameters.Degree_Copy_Parallelism",
											"type": "Expression"
										},
										"enableSkipIncompatibleRow": true,
										"logSettings": {
											"enableCopyActivityLog": true,
											"copyActivityLogSettings": {
												"logLevel": "Warning",
												"enableReliableLogging": false
											},
											"logLocationSettings": {
												"linkedServiceName": {
													"referenceName": "msaz01_dm01_Azure_Blob",
													"type": "LinkedServiceReference"
												},
												"path": "trux"
											}
										},
										"dataIntegrationUnits": {
											"value": "@pipeline().parameters.Maximum_DIU",
											"type": "Expression"
										},
										"translator": {
											"type": "TabularTranslator",
											"mappings": [
												{
													"source": {
														"name": "DM01_ID",
														"type": "Int32"
													},
													"sink": {
														"name": "DM01_ID",
														"type": "Int64"
													}
												},
												{
													"source": {
														"name": "DM01_CUST",
														"type": "Int32"
													},
													"sink": {
														"name": "DM01_CUST",
														"type": "Int64"
													}
												},
												{
													"source": {
														"name": "DM01_SITE",
														"type": "Int32"
													},
													"sink": {
														"name": "DM01_SITE",
														"type": "Int64"
													}
												},
												{
													"source": {
														"name": "DM01_INVC",
														"type": "String"
													},
													"sink": {
														"name": "DM01_INVC",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "DM01_DATE",
														"type": "DateTime"
													},
													"sink": {
														"name": "DM01_DATE",
														"type": "DateTime"
													}
												},
												{
													"source": {
														"name": "DM01_SSIT",
														"type": "Int32"
													},
													"sink": {
														"name": "DM01_SSIT",
														"type": "Int64"
													}
												},
												{
													"source": {
														"name": "DM01_PBLE",
														"type": "String"
													},
													"sink": {
														"name": "DM01_PBLE",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "DM01_BILLINDV",
														"type": "String"
													},
													"sink": {
														"name": "DM01_BILLINDV",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "DM01_CONTRACT",
														"type": "Int32"
													},
													"sink": {
														"name": "DM01_CONTRACT",
														"type": "Int64"
													}
												},
												{
													"source": {
														"name": "DM01_AMOUNT",
														"type": "Decimal"
													},
													"sink": {
														"name": "DM01_AMOUNT",
														"type": "Int64"
													}
												},
												{
													"source": {
														"name": "DM01_ORIGINVID",
														"type": "Int32"
													},
													"sink": {
														"name": "DM01_ORIGINVID",
														"type": "Int64"
													}
												},
												{
													"source": {
														"name": "DM01_FCTY",
														"type": "String"
													},
													"sink": {
														"name": "DM01_FCTY",
														"type": "String"
													}
												}
											]
										}
									},
									"inputs": [
										{
											"referenceName": "MSAZ01",
											"type": "DatasetReference",
											"parameters": {
												"schema": "dbo",
												"table": "dm01",
												"database": {
													"value": "@item().sql_db_name",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "LRS_Snowflake_Raw_V2",
											"type": "DatasetReference",
											"parameters": {
												"Snowflake_Sink_Table": "DM01",
												"Snowflake_Schema": {
													"value": "@item().Snowflake_schema",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "DM01p Incremental Delta Load",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "DM01 Incremental Delta Load",
											"dependencyConditions": [
												"Completed"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SqlServerSource",
											"sqlReaderQuery": {
												"value": "select * from DM01P\nwhere DM01P_ID > cast('@{item().LATEST_WATERMARK}' as int)",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"sink": {
											"type": "SnowflakeV2Sink",
											"importSettings": {
												"type": "SnowflakeImportCopyCommand",
												"additionalCopyOptions": {
													"ON_ERROR": "SKIP_FILE"
												}
											}
										},
										"enableStaging": true,
										"stagingSettings": {
											"linkedServiceName": {
												"referenceName": "msaz01_dm01_Azure_Blob",
												"type": "LinkedServiceReference"
											},
											"path": "staging"
										},
										"parallelCopies": {
											"value": "@pipeline().parameters.Degree_Copy_Parallelism",
											"type": "Expression"
										},
										"enableSkipIncompatibleRow": true,
										"logSettings": {
											"enableCopyActivityLog": true,
											"copyActivityLogSettings": {
												"logLevel": "Warning",
												"enableReliableLogging": false
											},
											"logLocationSettings": {
												"linkedServiceName": {
													"referenceName": "msaz01_dm01_Azure_Blob",
													"type": "LinkedServiceReference"
												},
												"path": "trux"
											}
										},
										"dataIntegrationUnits": {
											"value": "@pipeline().parameters.Maximum_DIU",
											"type": "Expression"
										},
										"translator": {
											"type": "TabularTranslator",
											"mappings": [
												{
													"source": {
														"name": "DM01P_ID",
														"type": "Int32"
													},
													"sink": {
														"name": "DM01P_ID",
														"type": "Int64"
													}
												},
												{
													"source": {
														"name": "DM01P_LINK",
														"type": "Int32"
													},
													"sink": {
														"name": "DM01P_LINK",
														"type": "Int64"
													}
												},
												{
													"source": {
														"name": "DM01P_TYPE",
														"type": "String"
													},
													"sink": {
														"name": "DM01P_TYPE",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "DM01P_DATE",
														"type": "DateTime"
													},
													"sink": {
														"name": "DM01P_DATE",
														"type": "DateTime"
													}
												},
												{
													"source": {
														"name": "DM01P_REFN",
														"type": "String"
													},
													"sink": {
														"name": "DM01P_REFN",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "DM01P_AMNT",
														"type": "Decimal"
													},
													"sink": {
														"name": "DM01P_AMNT",
														"type": "Int64"
													}
												},
												{
													"source": {
														"name": "DM01P_ADJR",
														"type": "String"
													},
													"sink": {
														"name": "DM01P_ADJR",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "DM01P_PERIODCLOSEID",
														"type": "Int32"
													},
													"sink": {
														"name": "DM01P_PERIODCLOSEID",
														"type": "Int64"
													}
												},
												{
													"source": {
														"name": "DM01P_USER",
														"type": "String"
													},
													"sink": {
														"name": "DM01P_USER",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "DM01P_RDATE",
														"type": "DateTime"
													},
													"sink": {
														"name": "DM01P_RDATE",
														"type": "DateTime"
													}
												},
												{
													"source": {
														"name": "DM01P_BATCH",
														"type": "Int32"
													},
													"sink": {
														"name": "DM01P_BATCH",
														"type": "Int64"
													}
												},
												{
													"source": {
														"name": "DM01P_GLNU",
														"type": "String"
													},
													"sink": {
														"name": "DM01P_GLNU",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "DM01P_NOTEID",
														"type": "Int32"
													},
													"sink": {
														"name": "DM01P_NOTEID",
														"type": "Int64"
													}
												},
												{
													"source": {
														"name": "DM01P_LINKID",
														"type": "Int32"
													},
													"sink": {
														"name": "DM01P_LINKID",
														"type": "Int64"
													}
												},
												{
													"source": {
														"name": "DM01P_GROUP",
														"type": "Int32"
													},
													"sink": {
														"name": "DM01P_GROUP",
														"type": "Int64"
													}
												}
											]
										}
									},
									"inputs": [
										{
											"referenceName": "MSAZ01",
											"type": "DatasetReference",
											"parameters": {
												"schema": "dbo",
												"table": "dm01p",
												"database": {
													"value": "@item().sql_db_name",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "LRS_Snowflake_Raw_V2",
											"type": "DatasetReference",
											"parameters": {
												"Snowflake_Sink_Table": "DM01P",
												"Snowflake_Schema": {
													"value": "@item().Snowflake_schema",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "DM05A Incremental Delta Load",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "DM01p Incremental Delta Load",
											"dependencyConditions": [
												"Completed"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SqlServerSource",
											"sqlReaderQuery": {
												"value": "select * from DM05A\nwhere DM05A_ID > cast('@{item().LATEST_WATERMARK}' as int)",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"sink": {
											"type": "SnowflakeV2Sink",
											"importSettings": {
												"type": "SnowflakeImportCopyCommand",
												"additionalCopyOptions": {
													"ON_ERROR": "SKIP_FILE"
												}
											}
										},
										"enableStaging": true,
										"stagingSettings": {
											"linkedServiceName": {
												"referenceName": "msaz01_dm01_Azure_Blob",
												"type": "LinkedServiceReference"
											},
											"path": "staging"
										},
										"parallelCopies": {
											"value": "@pipeline().parameters.Degree_Copy_Parallelism",
											"type": "Expression"
										},
										"enableSkipIncompatibleRow": true,
										"logSettings": {
											"enableCopyActivityLog": true,
											"copyActivityLogSettings": {
												"logLevel": "Warning",
												"enableReliableLogging": false
											},
											"logLocationSettings": {
												"linkedServiceName": {
													"referenceName": "msaz01_dm01_Azure_Blob",
													"type": "LinkedServiceReference"
												},
												"path": "trux"
											}
										},
										"dataIntegrationUnits": {
											"value": "@pipeline().parameters.Maximum_DIU",
											"type": "Expression"
										},
										"translator": {
											"type": "TabularTranslator",
											"mappings": [
												{
													"source": {
														"name": "DM05A_ID",
														"type": "Int32"
													},
													"sink": {
														"name": "DM05A_ID",
														"type": "Int64"
													}
												},
												{
													"source": {
														"name": "DM05A_LINK",
														"type": "Int32"
													},
													"sink": {
														"name": "DM05A_LINK",
														"type": "Int64"
													}
												},
												{
													"source": {
														"name": "DM05A_TDTE",
														"type": "DateTime"
													},
													"sink": {
														"name": "DM05A_TDTE",
														"type": "DateTime"
													}
												},
												{
													"source": {
														"name": "DM05A_AMNT",
														"type": "Decimal"
													},
													"sink": {
														"name": "DM05A_AMNT",
														"type": "Int64"
													}
												},
												{
													"source": {
														"name": "DM05A_QTY",
														"type": "Decimal"
													},
													"sink": {
														"name": "DM05A_QTY",
														"type": "Int64"
													}
												},
												{
													"source": {
														"name": "DM05A_ROUT",
														"type": "Int32"
													},
													"sink": {
														"name": "DM05A_ROUT",
														"type": "Int64"
													}
												},
												{
													"source": {
														"name": "DM05A_SEQU",
														"type": "Decimal"
													},
													"sink": {
														"name": "DM05A_SEQU",
														"type": "Int64"
													}
												},
												{
													"source": {
														"name": "DM05A_PERIODCLOSEID",
														"type": "Int32"
													},
													"sink": {
														"name": "DM05A_PERIODCLOSEID",
														"type": "Int64"
													}
												},
												{
													"source": {
														"name": "DM05A_USER",
														"type": "String"
													},
													"sink": {
														"name": "DM05A_USER",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "DM05A_RTYPE",
														"type": "String"
													},
													"sink": {
														"name": "DM05A_RTYPE",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "DM05A_RDATE",
														"type": "DateTime"
													},
													"sink": {
														"name": "DM05A_RDATE",
														"type": "DateTime"
													}
												},
												{
													"source": {
														"name": "DM05A_ADJR",
														"type": "String"
													},
													"sink": {
														"name": "DM05A_ADJR",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "DM05A_CODE",
														"type": "String"
													},
													"sink": {
														"name": "DM05A_CODE",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "DM05A_NOTEID",
														"type": "Int32"
													},
													"sink": {
														"name": "DM05A_NOTEID",
														"type": "Int64"
													}
												}
											]
										}
									},
									"inputs": [
										{
											"referenceName": "MSAZ01",
											"type": "DatasetReference",
											"parameters": {
												"schema": "dm05a",
												"table": "dbo",
												"database": {
													"value": "@item().sql_db_name",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "LRS_Snowflake_Raw_V2",
											"type": "DatasetReference",
											"parameters": {
												"Snowflake_Sink_Table": "DM05A",
												"Snowflake_Schema": {
													"value": "@item().Snowflake_schema",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "DM05B Incremental Delta Load",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "DM05A Incremental Delta Load",
											"dependencyConditions": [
												"Completed"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SqlServerSource",
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"sink": {
											"type": "SnowflakeV2Sink",
											"importSettings": {
												"type": "SnowflakeImportCopyCommand",
												"additionalCopyOptions": {
													"ON_ERROR": "SKIP_FILE"
												}
											}
										},
										"enableStaging": true,
										"stagingSettings": {
											"linkedServiceName": {
												"referenceName": "msaz01_dm01_Azure_Blob",
												"type": "LinkedServiceReference"
											},
											"path": "staging"
										},
										"parallelCopies": {
											"value": "@pipeline().parameters.Degree_Copy_Parallelism",
											"type": "Expression"
										},
										"enableSkipIncompatibleRow": true,
										"logSettings": {
											"enableCopyActivityLog": true,
											"copyActivityLogSettings": {
												"logLevel": "Warning",
												"enableReliableLogging": false
											},
											"logLocationSettings": {
												"linkedServiceName": {
													"referenceName": "msaz01_dm01_Azure_Blob",
													"type": "LinkedServiceReference"
												},
												"path": "trux"
											}
										},
										"dataIntegrationUnits": {
											"value": "@pipeline().parameters.Maximum_DIU",
											"type": "Expression"
										},
										"translator": {
											"type": "TabularTranslator",
											"mappings": [
												{
													"source": {
														"name": "DM05B_ID",
														"type": "Int32"
													},
													"sink": {
														"name": "DM05B_ID",
														"type": "Int64"
													}
												},
												{
													"source": {
														"name": "DM05B_LINK",
														"type": "Int32"
													},
													"sink": {
														"name": "DM05B_LINK",
														"type": "Int64"
													}
												},
												{
													"source": {
														"name": "DM05B_TDTE",
														"type": "DateTime"
													},
													"sink": {
														"name": "DM05B_TDTE",
														"type": "DateTime"
													}
												},
												{
													"source": {
														"name": "DM05B_AMNT",
														"type": "Decimal"
													},
													"sink": {
														"name": "DM05B_AMNT",
														"type": "Int64"
													}
												},
												{
													"source": {
														"name": "DM05B_QTY",
														"type": "Decimal"
													},
													"sink": {
														"name": "DM05B_QTY",
														"type": "Int64"
													}
												},
												{
													"source": {
														"name": "DM05B_BILLF",
														"type": "DateTime"
													},
													"sink": {
														"name": "DM05B_BILLF",
														"type": "DateTime"
													}
												},
												{
													"source": {
														"name": "DM05B_BILLT",
														"type": "DateTime"
													},
													"sink": {
														"name": "DM05B_BILLT",
														"type": "DateTime"
													}
												},
												{
													"source": {
														"name": "DM05B_ARATEID",
														"type": "Int32"
													},
													"sink": {
														"name": "DM05B_ARATEID",
														"type": "Int64"
													}
												},
												{
													"source": {
														"name": "DM05B_PERIODCLOSEID",
														"type": "Int32"
													},
													"sink": {
														"name": "DM05B_PERIODCLOSEID",
														"type": "Int64"
													}
												},
												{
													"source": {
														"name": "DM05B_USER",
														"type": "String"
													},
													"sink": {
														"name": "DM05B_USER",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "DM05B_RTYPE",
														"type": "String"
													},
													"sink": {
														"name": "DM05B_RTYPE",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "DM05B_RDATE",
														"type": "DateTime"
													},
													"sink": {
														"name": "DM05B_RDATE",
														"type": "DateTime"
													}
												},
												{
													"source": {
														"name": "DM05B_ADJR",
														"type": "String"
													},
													"sink": {
														"name": "DM05B_ADJR",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "DM05B_CODE",
														"type": "String"
													},
													"sink": {
														"name": "DM05B_CODE",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "DM05B_NOTEID",
														"type": "Int32"
													},
													"sink": {
														"name": "DM05B_NOTEID",
														"type": "Int64"
													}
												}
											]
										}
									},
									"inputs": [
										{
											"referenceName": "MSAZ01",
											"type": "DatasetReference",
											"parameters": {
												"schema": "dbo",
												"table": "DM05B",
												"database": {
													"value": "@item().sql_db_name",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "LRS_Snowflake_Raw_V2",
											"type": "DatasetReference",
											"parameters": {
												"Snowflake_Sink_Table": "DM05B",
												"Snowflake_Schema": {
													"value": "@item().Snowflake_schema",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "DM05FT Incremental Delta Load",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "DM05B Incremental Delta Load",
											"dependencyConditions": [
												"Completed"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SqlServerSource",
											"sqlReaderQuery": {
												"value": "select * from DM05FT\nwhere DM05FT_ID > cast('@{item().LATEST_WATERMARK}' as int)",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"sink": {
											"type": "SnowflakeV2Sink",
											"importSettings": {
												"type": "SnowflakeImportCopyCommand",
												"additionalCopyOptions": {
													"ON_ERROR": "SKIP_FILE"
												}
											}
										},
										"enableStaging": true,
										"stagingSettings": {
											"linkedServiceName": {
												"referenceName": "msaz01_dm01_Azure_Blob",
												"type": "LinkedServiceReference"
											},
											"path": "staging"
										},
										"parallelCopies": {
											"value": "@pipeline().parameters.Degree_Copy_Parallelism",
											"type": "Expression"
										},
										"enableSkipIncompatibleRow": true,
										"logSettings": {
											"enableCopyActivityLog": true,
											"copyActivityLogSettings": {
												"logLevel": "Warning",
												"enableReliableLogging": false
											},
											"logLocationSettings": {
												"linkedServiceName": {
													"referenceName": "msaz01_dm01_Azure_Blob",
													"type": "LinkedServiceReference"
												},
												"path": "trux"
											}
										},
										"dataIntegrationUnits": {
											"value": "@pipeline().parameters.Maximum_DIU",
											"type": "Expression"
										},
										"translator": {
											"type": "TabularTranslator",
											"mappings": [
												{
													"source": {
														"name": "DM05FT_ID",
														"type": "Int32"
													},
													"sink": {
														"name": "DM05FT_ID",
														"type": "Int64"
													}
												},
												{
													"source": {
														"name": "DM05FT_LINK",
														"type": "Int32"
													},
													"sink": {
														"name": "DM05FT_LINK",
														"type": "Int64"
													}
												},
												{
													"source": {
														"name": "DM05FT_TDTE",
														"type": "DateTime"
													},
													"sink": {
														"name": "DM05FT_TDTE",
														"type": "DateTime"
													}
												},
												{
													"source": {
														"name": "DM05FT_AMNT",
														"type": "Decimal"
													},
													"sink": {
														"name": "DM05FT_AMNT",
														"type": "Int64"
													}
												},
												{
													"source": {
														"name": "DM05FT_QTY",
														"type": "Decimal"
													},
													"sink": {
														"name": "DM05FT_QTY",
														"type": "Int64"
													}
												},
												{
													"source": {
														"name": "DM05FT_SSIT",
														"type": "Int32"
													},
													"sink": {
														"name": "DM05FT_SSIT",
														"type": "Int64"
													}
												},
												{
													"source": {
														"name": "DM05FT_SERV",
														"type": "Int32"
													},
													"sink": {
														"name": "DM05FT_SERV",
														"type": "Int64"
													}
												},
												{
													"source": {
														"name": "DM05FT_CODE",
														"type": "String"
													},
													"sink": {
														"name": "DM05FT_CODE",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "DM05FT_DESC",
														"type": "String"
													},
													"sink": {
														"name": "DM05FT_DESC",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "DM05FT_PERIODCLOSEID",
														"type": "Int32"
													},
													"sink": {
														"name": "DM05FT_PERIODCLOSEID",
														"type": "Int64"
													}
												},
												{
													"source": {
														"name": "DM05FT_USER",
														"type": "String"
													},
													"sink": {
														"name": "DM05FT_USER",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "DM05FT_RTYPE",
														"type": "String"
													},
													"sink": {
														"name": "DM05FT_RTYPE",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "DM05FT_RDATE",
														"type": "DateTime"
													},
													"sink": {
														"name": "DM05FT_RDATE",
														"type": "DateTime"
													}
												},
												{
													"source": {
														"name": "DM05FT_ADJR",
														"type": "String"
													},
													"sink": {
														"name": "DM05FT_ADJR",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "DM05FT_NOTEID",
														"type": "Int32"
													},
													"sink": {
														"name": "DM05FT_NOTEID",
														"type": "Int64"
													}
												}
											]
										}
									},
									"inputs": [
										{
											"referenceName": "MSAZ01",
											"type": "DatasetReference",
											"parameters": {
												"schema": "dbo",
												"table": "dm05ft",
												"database": {
													"value": "@item().sql_db_name",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "LRS_Snowflake_Raw_V2",
											"type": "DatasetReference",
											"parameters": {
												"Snowflake_Sink_Table": "DM05FT",
												"Snowflake_Schema": {
													"value": "@item().Snowflake_schema",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "DM05Z Incremental Delta Load",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "DM05FT Incremental Delta Load",
											"dependencyConditions": [
												"Completed"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SqlServerSource",
											"sqlReaderQuery": {
												"value": "select * from DM05Z\nwhere DM05Z_ID > cast('@{item().LATEST_WATERMARK}' as int)",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"sink": {
											"type": "SnowflakeV2Sink",
											"importSettings": {
												"type": "SnowflakeImportCopyCommand",
												"additionalCopyOptions": {
													"ON_ERROR": "SKIP_FILE"
												}
											}
										},
										"enableStaging": true,
										"stagingSettings": {
											"linkedServiceName": {
												"referenceName": "msaz01_dm01_Azure_Blob",
												"type": "LinkedServiceReference"
											},
											"path": "staging"
										},
										"parallelCopies": {
											"value": "@pipeline().parameters.Degree_Copy_Parallelism",
											"type": "Expression"
										},
										"enableSkipIncompatibleRow": true,
										"logSettings": {
											"enableCopyActivityLog": true,
											"copyActivityLogSettings": {
												"logLevel": "Warning",
												"enableReliableLogging": false
											},
											"logLocationSettings": {
												"linkedServiceName": {
													"referenceName": "msaz01_dm01_Azure_Blob",
													"type": "LinkedServiceReference"
												},
												"path": "trux"
											}
										},
										"dataIntegrationUnits": {
											"value": "@pipeline().parameters.Maximum_DIU",
											"type": "Expression"
										},
										"translator": {
											"type": "TabularTranslator",
											"mappings": [
												{
													"source": {
														"name": "DM05Z_ID",
														"type": "Int32"
													},
													"sink": {
														"name": "DM05Z_ID",
														"type": "Int64"
													}
												},
												{
													"source": {
														"name": "DM05Z_LINK",
														"type": "Int32"
													},
													"sink": {
														"name": "DM05Z_LINK",
														"type": "Int64"
													}
												},
												{
													"source": {
														"name": "DM05Z_TDTE",
														"type": "DateTime"
													},
													"sink": {
														"name": "DM05Z_TDTE",
														"type": "DateTime"
													}
												},
												{
													"source": {
														"name": "DM05Z_AMNT",
														"type": "Decimal"
													},
													"sink": {
														"name": "DM05Z_AMNT",
														"type": "Int64"
													}
												},
												{
													"source": {
														"name": "DM05Z_QTY",
														"type": "Decimal"
													},
													"sink": {
														"name": "DM05Z_QTY",
														"type": "Int64"
													}
												},
												{
													"source": {
														"name": "DM05Z_REFN",
														"type": "String"
													},
													"sink": {
														"name": "DM05Z_REFN",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "DM05Z_PERIODCLOSEID",
														"type": "Int32"
													},
													"sink": {
														"name": "DM05Z_PERIODCLOSEID",
														"type": "Int64"
													}
												},
												{
													"source": {
														"name": "DM05Z_USER",
														"type": "String"
													},
													"sink": {
														"name": "DM05Z_USER",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "DM05Z_RTYPE",
														"type": "String"
													},
													"sink": {
														"name": "DM05Z_RTYPE",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "DM05Z_RDATE",
														"type": "DateTime"
													},
													"sink": {
														"name": "DM05Z_RDATE",
														"type": "DateTime"
													}
												},
												{
													"source": {
														"name": "DM05Z_ADJR",
														"type": "String"
													},
													"sink": {
														"name": "DM05Z_ADJR",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "DM05Z_CODE",
														"type": "String"
													},
													"sink": {
														"name": "DM05Z_CODE",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "DM05Z_NOTEID",
														"type": "Int32"
													},
													"sink": {
														"name": "DM05Z_NOTEID",
														"type": "Int64"
													}
												}
											]
										}
									},
									"inputs": [
										{
											"referenceName": "MSAZ01",
											"type": "DatasetReference",
											"parameters": {
												"schema": "dbo",
												"table": "dm05z",
												"database": {
													"value": "@item().sql_db_name",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "LRS_Snowflake_Raw_V2",
											"type": "DatasetReference",
											"parameters": {
												"Snowflake_Sink_Table": "DM05Z",
												"Snowflake_Schema": {
													"value": "@item().Snowflake_schema",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "LM02 Incremental Delta Load",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "DM05Z Incremental Delta Load",
											"dependencyConditions": [
												"Completed"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SqlServerSource",
											"sqlReaderQuery": {
												"value": "select * from LM02\nwhere LM02_ID > cast('@{item().LATEST_WATERMARK}' as int)",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"sink": {
											"type": "SnowflakeV2Sink",
											"importSettings": {
												"type": "SnowflakeImportCopyCommand",
												"additionalCopyOptions": {
													"ON_ERROR": "SKIP_FILE"
												}
											}
										},
										"enableStaging": true,
										"stagingSettings": {
											"linkedServiceName": {
												"referenceName": "msaz01_dm01_Azure_Blob",
												"type": "LinkedServiceReference"
											},
											"path": "staging"
										},
										"parallelCopies": {
											"value": "@pipeline().parameters.Degree_Copy_Parallelism",
											"type": "Expression"
										},
										"enableSkipIncompatibleRow": true,
										"logSettings": {
											"enableCopyActivityLog": true,
											"copyActivityLogSettings": {
												"logLevel": "Warning",
												"enableReliableLogging": false
											},
											"logLocationSettings": {
												"linkedServiceName": {
													"referenceName": "msaz01_dm01_Azure_Blob",
													"type": "LinkedServiceReference"
												},
												"path": "trux"
											}
										},
										"dataIntegrationUnits": {
											"value": "@pipeline().parameters.Maximum_DIU",
											"type": "Expression"
										},
										"translator": {
											"type": "TabularTranslator",
											"mappings": [
												{
													"source": {
														"name": "LM02_DSTE",
														"type": "String"
													},
													"sink": {
														"name": "LM02_DSTE",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "LM02_NUMB",
														"type": "String"
													},
													"sink": {
														"name": "LM02_NUMB",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "LM02_INOT",
														"type": "Boolean"
													},
													"sink": {
														"name": "LM02_INOT",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "LM02_DATE",
														"type": "DateTime"
													},
													"sink": {
														"name": "LM02_DATE",
														"type": "DateTime"
													}
												},
												{
													"source": {
														"name": "LM02_DQTY",
														"type": "Decimal"
													},
													"sink": {
														"name": "LM02_DQTY",
														"type": "Int64"
													}
												},
												{
													"source": {
														"name": "LM02_DUOM",
														"type": "String"
													},
													"sink": {
														"name": "LM02_DUOM",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "LM02_DAMT",
														"type": "Decimal"
													},
													"sink": {
														"name": "LM02_DAMT",
														"type": "Int64"
													}
												},
												{
													"source": {
														"name": "LM02_CUST",
														"type": "Int32"
													},
													"sink": {
														"name": "LM02_CUST",
														"type": "Int64"
													}
												},
												{
													"source": {
														"name": "LM02_SITE",
														"type": "Int32"
													},
													"sink": {
														"name": "LM02_SITE",
														"type": "Int64"
													}
												},
												{
													"source": {
														"name": "LM02_SERV",
														"type": "Int32"
													},
													"sink": {
														"name": "LM02_SERV",
														"type": "Int64"
													}
												},
												{
													"source": {
														"name": "LM02_ROUT",
														"type": "Int32"
													},
													"sink": {
														"name": "LM02_ROUT",
														"type": "Int64"
													}
												},
												{
													"source": {
														"name": "LM02_BQTY",
														"type": "Decimal"
													},
													"sink": {
														"name": "LM02_BQTY",
														"type": "Int64"
													}
												},
												{
													"source": {
														"name": "LM02_BUOM",
														"type": "String"
													},
													"sink": {
														"name": "LM02_BUOM",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "LM02_BAMT",
														"type": "Decimal"
													},
													"sink": {
														"name": "LM02_BAMT",
														"type": "Int64"
													}
												},
												{
													"source": {
														"name": "LM02_MATL",
														"type": "String"
													},
													"sink": {
														"name": "LM02_MATL",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "LM02_BLAD",
														"type": "String"
													},
													"sink": {
														"name": "LM02_BLAD",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "LM02_PORD",
														"type": "String"
													},
													"sink": {
														"name": "LM02_PORD",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "LM02_CARR",
														"type": "String"
													},
													"sink": {
														"name": "LM02_CARR",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "LM02_NOT1",
														"type": "String"
													},
													"sink": {
														"name": "LM02_NOT1",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "LM02_NOT2",
														"type": "String"
													},
													"sink": {
														"name": "LM02_NOT2",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "LM02_IDTE",
														"type": "DateTime"
													},
													"sink": {
														"name": "LM02_IDTE",
														"type": "DateTime"
													}
												},
												{
													"source": {
														"name": "LM02_UCHG",
														"type": "Decimal"
													},
													"sink": {
														"name": "LM02_UCHG",
														"type": "Int64"
													}
												},
												{
													"source": {
														"name": "LM02_MIN",
														"type": "String"
													},
													"sink": {
														"name": "LM02_MIN",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "LM02_ID",
														"type": "Int32"
													},
													"sink": {
														"name": "LM02_ID",
														"type": "Int64"
													}
												},
												{
													"source": {
														"name": "LM02_SEQ1",
														"type": "Decimal"
													},
													"sink": {
														"name": "LM02_SEQ1",
														"type": "Int64"
													}
												},
												{
													"source": {
														"name": "LM02_SEQ2",
														"type": "Decimal"
													},
													"sink": {
														"name": "LM02_SEQ2",
														"type": "Int64"
													}
												},
												{
													"source": {
														"name": "LM02_RDATE",
														"type": "DateTime"
													},
													"sink": {
														"name": "LM02_RDATE",
														"type": "DateTime"
													}
												},
												{
													"source": {
														"name": "LM02_FQTY",
														"type": "Decimal"
													},
													"sink": {
														"name": "LM02_FQTY",
														"type": "Int64"
													}
												},
												{
													"source": {
														"name": "LM02_FUOM",
														"type": "String"
													},
													"sink": {
														"name": "LM02_FUOM",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "LM02_DRATE",
														"type": "Decimal"
													},
													"sink": {
														"name": "LM02_DRATE",
														"type": "Int64"
													}
												},
												{
													"source": {
														"name": "LM02_OWN",
														"type": "String"
													},
													"sink": {
														"name": "LM02_OWN",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "LM02_LF05ID",
														"type": "Int32"
													},
													"sink": {
														"name": "LM02_LF05ID",
														"type": "Int64"
													}
												},
												{
													"source": {
														"name": "LM02_UCHGUOM",
														"type": "String"
													},
													"sink": {
														"name": "LM02_UCHGUOM",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "LM02_DRATEUOM",
														"type": "String"
													},
													"sink": {
														"name": "LM02_DRATEUOM",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "LM02_FINV",
														"type": "String"
													},
													"sink": {
														"name": "LM02_FINV",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "LM02_FDAT",
														"type": "DateTime"
													},
													"sink": {
														"name": "LM02_FDAT",
														"type": "DateTime"
													}
												},
												{
													"source": {
														"name": "LM02_FUSE",
														"type": "String"
													},
													"sink": {
														"name": "LM02_FUSE",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "LM02_FRDT",
														"type": "DateTime"
													},
													"sink": {
														"name": "LM02_FRDT",
														"type": "DateTime"
													}
												},
												{
													"source": {
														"name": "LM02_CDATE",
														"type": "DateTime"
													},
													"sink": {
														"name": "LM02_CDATE",
														"type": "DateTime"
													}
												},
												{
													"source": {
														"name": "LM02_TIN",
														"type": "DateTime"
													},
													"sink": {
														"name": "LM02_TIN",
														"type": "DateTime"
													}
												},
												{
													"source": {
														"name": "LM02_TOUT",
														"type": "DateTime"
													},
													"sink": {
														"name": "LM02_TOUT",
														"type": "DateTime"
													}
												},
												{
													"source": {
														"name": "LM02_CM09ID",
														"type": "Int32"
													},
													"sink": {
														"name": "LM02_CM09ID",
														"type": "Int64"
													}
												},
												{
													"source": {
														"name": "LM02_LM05ID",
														"type": "Int32"
													},
													"sink": {
														"name": "LM02_LM05ID",
														"type": "Int64"
													}
												},
												{
													"source": {
														"name": "LM02_LEED",
														"type": "Boolean"
													},
													"sink": {
														"name": "LM02_LEED",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "LM02_LEEDWEIGHT",
														"type": "Decimal"
													},
													"sink": {
														"name": "LM02_LEEDWEIGHT",
														"type": "Int64"
													}
												},
												{
													"source": {
														"name": "LM02_LEEDWEIGHTUOM",
														"type": "String"
													},
													"sink": {
														"name": "LM02_LEEDWEIGHTUOM",
														"type": "String"
													}
												}
											]
										}
									},
									"inputs": [
										{
											"referenceName": "MSAZ01",
											"type": "DatasetReference",
											"parameters": {
												"schema": "dbo",
												"table": "lm02",
												"database": {
													"value": "@item().sql_db_name",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "LRS_Snowflake_Raw_V2",
											"type": "DatasetReference",
											"parameters": {
												"Snowflake_Sink_Table": "LM02",
												"Snowflake_Schema": {
													"value": "@item().Snowflake_schema",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "RM03U Incremental Delta Load",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "LM02 Incremental Delta Load",
											"dependencyConditions": [
												"Completed"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SqlServerSource",
											"sqlReaderQuery": {
												"value": "select * from RM03U\nwhere RM03U_ID > cast('@{item().LATEST_WATERMARK}' as int)",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"sink": {
											"type": "SnowflakeV2Sink",
											"importSettings": {
												"type": "SnowflakeImportCopyCommand",
												"additionalCopyOptions": {
													"ON_ERROR": "SKIP_FILE"
												}
											}
										},
										"enableStaging": true,
										"stagingSettings": {
											"linkedServiceName": {
												"referenceName": "msaz01_dm01_Azure_Blob",
												"type": "LinkedServiceReference"
											},
											"path": "staging"
										},
										"parallelCopies": {
											"value": "@pipeline().parameters.Degree_Copy_Parallelism",
											"type": "Expression"
										},
										"enableSkipIncompatibleRow": true,
										"logSettings": {
											"enableCopyActivityLog": true,
											"copyActivityLogSettings": {
												"logLevel": "Warning",
												"enableReliableLogging": false
											},
											"logLocationSettings": {
												"linkedServiceName": {
													"referenceName": "msaz01_dm01_Azure_Blob",
													"type": "LinkedServiceReference"
												},
												"path": "trux"
											}
										},
										"dataIntegrationUnits": {
											"value": "@pipeline().parameters.Maximum_DIU",
											"type": "Expression"
										},
										"translator": {
											"type": "TabularTranslator",
											"mappings": [
												{
													"source": {
														"name": "RM03U_ID",
														"type": "Int32"
													},
													"sink": {
														"name": "RM03U_ID",
														"type": "Int64"
													}
												},
												{
													"source": {
														"name": "RM03U_DATE",
														"type": "DateTime"
													},
													"sink": {
														"name": "RM03U_DATE",
														"type": "DateTime"
													}
												},
												{
													"source": {
														"name": "RM03U_CUST",
														"type": "Int32"
													},
													"sink": {
														"name": "RM03U_CUST",
														"type": "Int64"
													}
												},
												{
													"source": {
														"name": "RM03U_SITE",
														"type": "Int32"
													},
													"sink": {
														"name": "RM03U_SITE",
														"type": "Int64"
													}
												},
												{
													"source": {
														"name": "RM03U_SERV",
														"type": "Int32"
													},
													"sink": {
														"name": "RM03U_SERV",
														"type": "Int64"
													}
												},
												{
													"source": {
														"name": "RM03U_QTY",
														"type": "Decimal"
													},
													"sink": {
														"name": "RM03U_QTY",
														"type": "Int64"
													}
												},
												{
													"source": {
														"name": "RM03U_ACTV",
														"type": "String"
													},
													"sink": {
														"name": "RM03U_ACTV",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "RM03U_REFN",
														"type": "String"
													},
													"sink": {
														"name": "RM03U_REFN",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "RM03U_TIME",
														"type": "DateTime"
													},
													"sink": {
														"name": "RM03U_TIME",
														"type": "DateTime"
													}
												},
												{
													"source": {
														"name": "RM03U_WONU",
														"type": "Int32"
													},
													"sink": {
														"name": "RM03U_WONU",
														"type": "Int64"
													}
												},
												{
													"source": {
														"name": "RM03U_DATA",
														"type": "String"
													},
													"sink": {
														"name": "RM03U_DATA",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "RM03U_TTKN",
														"type": "DateTime"
													},
													"sink": {
														"name": "RM03U_TTKN",
														"type": "DateTime"
													}
												},
												{
													"source": {
														"name": "RM03U_UTKN",
														"type": "String"
													},
													"sink": {
														"name": "RM03U_UTKN",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "RM03U_LOGID",
														"type": "Int32"
													},
													"sink": {
														"name": "RM03U_LOGID",
														"type": "Int64"
													}
												},
												{
													"source": {
														"name": "RM03U_CHG",
														"type": "Decimal"
													},
													"sink": {
														"name": "RM03U_CHG",
														"type": "Int64"
													}
												},
												{
													"source": {
														"name": "RM03U_TIM2",
														"type": "DateTime"
													},
													"sink": {
														"name": "RM03U_TIM2",
														"type": "DateTime"
													}
												},
												{
													"source": {
														"name": "RM03U_CALLID",
														"type": "Int32"
													},
													"sink": {
														"name": "RM03U_CALLID",
														"type": "Int64"
													}
												},
												{
													"source": {
														"name": "RM03U_STORIG",
														"type": "Int32"
													},
													"sink": {
														"name": "RM03U_STORIG",
														"type": "Int64"
													}
												},
												{
													"source": {
														"name": "RM03U_STPREV",
														"type": "Int32"
													},
													"sink": {
														"name": "RM03U_STPREV",
														"type": "Int64"
													}
												},
												{
													"source": {
														"name": "RM03U_STNEXT",
														"type": "Int32"
													},
													"sink": {
														"name": "RM03U_STNEXT",
														"type": "Int64"
													}
												}
											]
										}
									},
									"inputs": [
										{
											"referenceName": "MSAZ01",
											"type": "DatasetReference",
											"parameters": {
												"schema": "dbo",
												"table": "rm03u",
												"database": {
													"value": "@item().sql_db_name",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "LRS_Snowflake_Raw_V2",
											"type": "DatasetReference",
											"parameters": {
												"Snowflake_Sink_Table": "RM03U",
												"Snowflake_Schema": {
													"value": "@item().Snowflake_schema",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "SM01 Snowflake Merge Operation_copy1",
									"description": "merge statement to the raw tables. this helps avoids any duplication and upsert the rows needed.",
									"type": "Script",
									"dependsOn": [
										{
											"activity": "SM01 Incremental Delta Load to Staging",
											"dependencyConditions": [
												"Succeeded",
												"Skipped"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "LRS_Snowflake_V2",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"type": "Query",
												"text": {
													"value": "@{concat('merge into ', item().snowflake_schema,'.','SM01 t \nusing ', \n    item().snowflake_schema,'.','sm01_staging s \non concat(t.sm01_rout, t.sm01_sequ, t.sm01_date) = concat(s.sm01_rout, s.sm01_sequ, s.sm01_date) \nwhen matched then update set \n\tt.sm01_date= s.sm01_date ,\n\tt.sm01_rout= s.sm01_rout ,\n\tt.sm01_sequ= s.sm01_sequ ,\n\tt.sm01_cust= s.sm01_cust ,\n\tt.sm01_site= s.sm01_site ,\n\tt.sm01_serv= s.sm01_serv ,\n\tt.sm01_qty= s.sm01_qty ,\n\tt.sm01_actv= s.sm01_actv ,\n\tt.sm01_amnt= s.sm01_amnt ,\n\tt.sm01_idte= s.sm01_idte ,\n\tt.sm01_refn= s.sm01_refn ,\n\tt.sm01_time= s.sm01_time ,\n\tt.sm01_wonu = s.sm01_wonu,\n\tt.sm01_data= s.sm01_data ,\n\tt.sm01_logid = s.sm01_logid,\n\tt.sm01_arateid = s.sm01_arateid,\n\tt.sm01_callid = s.sm01_callid,\n\tt.sm01_user= s.sm01_user ,\n\tt.sm01_cdte= s.sm01_cdte ,\n\tt.sm01_tim2= s.sm01_tim2 ,\n\tt.sm01_callnumber= s.sm01_callnumber ,\n\tt.sm01_storig = s.sm01_storig,\n\tt.sm01_stprev =s.sm01_stprev,\n\tt.sm01_stnext = s.sm01_stnext ,\n\tt.sm01_pchg= s.sm01_pchg ,\n\tt.sm01_orig_sequ = s.sm01_orig_sequ \n\nwhen not matched then insert \n\t(\n\tt.sm01_date ,\n\tt.sm01_rout ,\n\tt.sm01_sequ ,\n\tt.sm01_cust ,\n\tt.sm01_site ,\n\tt.sm01_serv ,\n\tt.sm01_qty ,\n\tt.sm01_actv ,\n\tt.sm01_amnt ,\n\tt.sm01_idte ,\n\tt.sm01_refn ,\n\tt.sm01_time ,\n\tt.sm01_wonu,\n\tt.sm01_data ,\n\tt.sm01_logid ,\n\tt.sm01_arateid ,\n\tt.sm01_callid ,\n\tt.sm01_user ,\n\tt.sm01_cdte ,\n\tt.sm01_tim2 ,\n\tt.sm01_callnumber ,\n\tt.sm01_storig, \n\tt.sm01_stprev ,\n\tt.sm01_stnext ,\n\tt.sm01_pchg ,\n\tt.sm01_orig_sequ \n\t)\nvalues \n\t(\n\ts.sm01_date ,\n\ts.sm01_rout ,\n\ts.sm01_sequ ,\n\ts.sm01_cust ,\n\ts.sm01_site ,\n\ts.sm01_serv ,\n\ts.sm01_qty ,\n\ts.sm01_actv ,\n\ts.sm01_amnt ,\n\ts.sm01_idte ,\n\ts.sm01_refn ,\n\ts.sm01_time ,\n\ts.sm01_wonu, \n\ts.sm01_data ,\n\ts.sm01_logid ,\n\ts.sm01_arateid ,\n\ts.sm01_callid ,\n\ts.sm01_user ,\n\ts.sm01_cdte ,\n\ts.sm01_tim2 ,\n\ts.sm01_callnumber ,\n\ts.sm01_storig ,\n\ts.sm01_stprev, \n\ts.sm01_stnext ,\n\ts.sm01_pchg ,\n\ts.sm01_orig_sequ)'\n\t)}",
													"type": "Expression"
												}
											}
										],
										"scriptBlockExecutionTimeout": "02:00:00"
									}
								},
								{
									"name": "MT02 Snowflake Merge Operation_copy1_copy1",
									"description": "merge statement to the raw tables. this helps avoids any duplication and upsert the rows needed.",
									"type": "Script",
									"dependsOn": [
										{
											"activity": "MT02 Incremental Delta Load to Staging",
											"dependencyConditions": [
												"Succeeded",
												"Skipped"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "LRS_Snowflake_V2",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"type": "Query",
												"text": {
													"value": "@{concat('merge into ', item().snowflake_schema,'.','mt02 t \nusing ', \n    item().snowflake_schema,'.','mt02_staging s \non concat(t.mt02_refr, t.mt02_lmdate) = concat(s.mt02_refr, s.mt02_lmdate) \nwhen matched then update set \n\tt.mt02_refr= s.mt02_refr ,\n\tt.mt02_cust= s.mt02_cust ,\n\tt.mt02_site= s.mt02_site ,\n\tt.mt02_serv= s.mt02_serv ,\n\tt.mt02_date =s.mt02_date ,\n\tt.mt02_code= s.mt02_code ,\n\tt.mt02_amnt= s.mt02_amnt ,\n\tt.mt02_desc= s.mt02_desc ,\n\tt.mt02_qty= s.mt02_qty ,\n\tt.mt02_idte= s.mt02_idte ,\n\tt.mt02_rout= s.mt02_rout ,\n\tt.mt02_sequ= s.mt02_sequ ,\n\tt.mt02_rate= s.mt02_rate ,\n\tt.mt02_lmuser= s.mt02_lmuser ,\n\tt.mt02_lmdate= s.mt02_lmdate ,\n\tt.mt02_desc0= s.mt02_desc0 ,\n\tt.mt02_desc1= s.mt02_desc1 ,\n\tt.mt02_desc2= s.mt02_desc2 ,\n\tt.mt02_desc3= s.mt02_desc3 ,\n\tt.mt02_lf05id= s.mt02_lf05id ,\n\tt.mt02_own= s.mt02_own ,\n\tt.mt02_schid= s.mt02_schid,\n\tt.mt02_schidw= s.mt02_schidw ,\n\tt.mt02_fcty= s.mt02_fcty \n\nwhen not matched then insert \n\t(\n\tt.mt02_refr ,\n\tt.mt02_cust ,\n\tt.mt02_site ,\n\tt.mt02_serv ,\n\tt.mt02_date ,\n\tt.mt02_code ,\n\tt.mt02_amnt ,\n\tt.mt02_desc ,\n\tt.mt02_qty ,\n\tt.mt02_idte ,\n\tt.mt02_rout ,\n\tt.mt02_sequ ,\n\tt.mt02_rate ,\n\tt.mt02_lmuser ,\n\tt.mt02_lmdate ,\n\tt.mt02_desc0 ,\n\tt.mt02_desc1 ,\n\tt.mt02_desc2 ,\n\tt.mt02_desc3 ,\n\tt.mt02_lf05id ,\n\tt.mt02_own ,\n\tt.mt02_schid ,\n\tt.mt02_schidw ,\n\tt.mt02_fcty \n\t)\nvalues \n\t(\ns.mt02_refr ,\n\ts.mt02_cust ,\n\ts.mt02_site ,\n\ts.mt02_serv ,\n\ts.mt02_date ,\n\ts.mt02_code ,\n\ts.mt02_amnt ,\n\ts.mt02_desc ,\n\ts.mt02_qty ,\n\ts.mt02_idte ,\n\ts.mt02_rout ,\n\ts.mt02_sequ ,\n\ts.mt02_rate ,\n\ts.mt02_lmuser ,\n\ts.mt02_lmdate ,\n\ts.mt02_desc0 ,\n\ts.mt02_desc1 ,\n\ts.mt02_desc2 ,\n\ts.mt02_desc3 ,\n\ts.mt02_lf05id ,\n\ts.mt02_own ,\n\ts.mt02_schid ,\n\ts.mt02_schidw ,\n\ts.mt02_fcty )'\n\t)}\n",
													"type": "Expression"
												}
											}
										],
										"scriptBlockExecutionTimeout": "02:00:00"
									}
								},
								{
									"name": "SM01 Incremental Delta Load to Staging",
									"description": "Copying delta rows from sql server to the staging tables created for each instance in snowflake (these tables will be dropped after all activities are completed)",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "Snowflake Create Staging Tables",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SqlServerSource",
											"sqlReaderQuery": {
												"value": "select * from SM01\nwhere SM01_DATE > DATEADD(day, -7, GETDATE())",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"sink": {
											"type": "SnowflakeV2Sink",
											"importSettings": {
												"type": "SnowflakeImportCopyCommand"
											}
										},
										"enableStaging": true,
										"stagingSettings": {
											"linkedServiceName": {
												"referenceName": "msaz01_dm01_Azure_Blob",
												"type": "LinkedServiceReference"
											},
											"path": "staging"
										}
									},
									"inputs": [
										{
											"referenceName": "MSAZ01",
											"type": "DatasetReference",
											"parameters": {
												"schema": "dbo",
												"table": "rm05",
												"database": {
													"value": "@item().sql_db_name",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "LRS_Snowflake_Raw_V2",
											"type": "DatasetReference",
											"parameters": {
												"Snowflake_Sink_Table": "@concat(item().table_name,'_STAGING')",
												"Snowflake_Schema": {
													"value": "@item().snowflake_schema",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "MT02 Incremental Delta Load to Staging",
									"description": "Copying delta rows from sql server to the staging tables created for each instance in snowflake (these tables will be dropped after all activities are completed)",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "Snowflake Create Staging Tables",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SqlServerSource",
											"sqlReaderQuery": {
												"value": "select * from MT02\nwhere MT02_DATE > DATEADD(day, -7, GETDATE())",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"sink": {
											"type": "SnowflakeV2Sink",
											"importSettings": {
												"type": "SnowflakeImportCopyCommand"
											}
										},
										"enableStaging": true,
										"stagingSettings": {
											"linkedServiceName": {
												"referenceName": "msaz01_dm01_Azure_Blob",
												"type": "LinkedServiceReference"
											},
											"path": "staging"
										}
									},
									"inputs": [
										{
											"referenceName": "MSAZ01",
											"type": "DatasetReference",
											"parameters": {
												"schema": "dbo",
												"table": "mt02",
												"database": {
													"value": "@item().sql_db_name",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "LRS_Snowflake_Raw_V2",
											"type": "DatasetReference",
											"parameters": {
												"Snowflake_Sink_Table": "@concat(item().table_name,'_STAGING')",
												"Snowflake_Schema": {
													"value": "@item().snowflake_schema",
													"type": "Expression"
												}
											}
										}
									]
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"Maximum_DIU": {
						"type": "int",
						"defaultValue": 8
					},
					"Degree_Copy_Parallelism": {
						"type": "int",
						"defaultValue": 8
					},
					"LastProcessedId": {
						"type": "string"
					},
					"CurrentDate": {
						"type": "string"
					},
					"SchemaName": {
						"type": "string"
					},
					"TableName": {
						"type": "string"
					}
				},
				"variables": {
					"tempArray": {
						"type": "Array"
					},
					"TempResult": {
						"type": "Array"
					},
					"ResultsArray": {
						"type": "Array"
					},
					"OutputArray": {
						"type": "Array"
					},
					"append": {
						"type": "Array"
					}
				},
				"folder": {
					"name": "Test"
				},
				"annotations": [],
				"lastPublishTime": "2024-08-27T21:17:57Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/TRUX_LEGACY_INCREMENTAL_LOAD_FACT_VM')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Trux Legacy ID Watermark Lookup",
						"description": "look up schema, database and table names from sqlsever and snowflake",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SnowflakeV2Source",
								"exportSettings": {
									"type": "SnowflakeExportCopyCommand"
								}
							},
							"dataset": {
								"referenceName": "LRS_Snowflake_Raw_V2",
								"type": "DatasetReference",
								"parameters": {
									"Snowflake_Sink_Table": "VW_TRUX_LEGACY_WATERMARK_PVT",
									"Snowflake_Schema": "MASTER_DATA"
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "Incremental Loop Over ID Watermark Tables",
						"description": "Activity to loop over tables that have primary keys with incremental IDs. This loops looks at our Watermark table in Snowflake and appends any IDs found in SQL server that are greater than the latest watermark in Snowflake.",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Trux Legacy ID Watermark Lookup",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Trux Legacy ID Watermark Lookup').output.value",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "DM01p Incremental Delta Load",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SqlServerSource",
											"sqlReaderQuery": {
												"value": "select * from DM01P\nwhere DM01P_ID > @{item().DM01P}",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"sink": {
											"type": "SnowflakeV2Sink",
											"importSettings": {
												"type": "SnowflakeImportCopyCommand",
												"additionalCopyOptions": {
													"ON_ERROR": "SKIP_FILE"
												}
											}
										},
										"enableStaging": true,
										"stagingSettings": {
											"linkedServiceName": {
												"referenceName": "msaz01_dm01_Azure_Blob",
												"type": "LinkedServiceReference"
											},
											"path": "staging"
										},
										"parallelCopies": {
											"value": "@pipeline().parameters.Degree_Copy_Parallelism",
											"type": "Expression"
										},
										"enableSkipIncompatibleRow": true,
										"logSettings": {
											"enableCopyActivityLog": true,
											"copyActivityLogSettings": {
												"logLevel": "Warning",
												"enableReliableLogging": false
											},
											"logLocationSettings": {
												"linkedServiceName": {
													"referenceName": "msaz01_dm01_Azure_Blob",
													"type": "LinkedServiceReference"
												},
												"path": "trux"
											}
										},
										"dataIntegrationUnits": {
											"value": "@pipeline().parameters.Maximum_DIU",
											"type": "Expression"
										},
										"translator": {
											"type": "TabularTranslator",
											"mappings": [
												{
													"source": {
														"name": "DM01P_ID",
														"type": "Int32"
													},
													"sink": {
														"name": "DM01P_ID",
														"type": "Int64"
													}
												},
												{
													"source": {
														"name": "DM01P_LINK",
														"type": "Int32"
													},
													"sink": {
														"name": "DM01P_LINK",
														"type": "Int64"
													}
												},
												{
													"source": {
														"name": "DM01P_TYPE",
														"type": "String"
													},
													"sink": {
														"name": "DM01P_TYPE",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "DM01P_DATE",
														"type": "DateTime"
													},
													"sink": {
														"name": "DM01P_DATE",
														"type": "DateTime"
													}
												},
												{
													"source": {
														"name": "DM01P_REFN",
														"type": "String"
													},
													"sink": {
														"name": "DM01P_REFN",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "DM01P_AMNT",
														"type": "Decimal"
													},
													"sink": {
														"name": "DM01P_AMNT",
														"type": "Int64"
													}
												},
												{
													"source": {
														"name": "DM01P_ADJR",
														"type": "String"
													},
													"sink": {
														"name": "DM01P_ADJR",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "DM01P_PERIODCLOSEID",
														"type": "Int32"
													},
													"sink": {
														"name": "DM01P_PERIODCLOSEID",
														"type": "Int64"
													}
												},
												{
													"source": {
														"name": "DM01P_USER",
														"type": "String"
													},
													"sink": {
														"name": "DM01P_USER",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "DM01P_RDATE",
														"type": "DateTime"
													},
													"sink": {
														"name": "DM01P_RDATE",
														"type": "DateTime"
													}
												},
												{
													"source": {
														"name": "DM01P_BATCH",
														"type": "Int32"
													},
													"sink": {
														"name": "DM01P_BATCH",
														"type": "Int64"
													}
												},
												{
													"source": {
														"name": "DM01P_GLNU",
														"type": "String"
													},
													"sink": {
														"name": "DM01P_GLNU",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "DM01P_NOTEID",
														"type": "Int32"
													},
													"sink": {
														"name": "DM01P_NOTEID",
														"type": "Int64"
													}
												},
												{
													"source": {
														"name": "DM01P_LINKID",
														"type": "Int32"
													},
													"sink": {
														"name": "DM01P_LINKID",
														"type": "Int64"
													}
												},
												{
													"source": {
														"name": "DM01P_GROUP",
														"type": "Int32"
													},
													"sink": {
														"name": "DM01P_GROUP",
														"type": "Int64"
													}
												}
											]
										}
									},
									"inputs": [
										{
											"referenceName": "TRUX_LEGACY01",
											"type": "DatasetReference",
											"parameters": {
												"schema": "dbo",
												"table": "DM01P",
												"database": {
													"value": "@item().sql_db_name",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "LRS_Snowflake_Raw_V2",
											"type": "DatasetReference",
											"parameters": {
												"Snowflake_Sink_Table": "DM01P",
												"Snowflake_Schema": "@item().Snowflake_schema"
											}
										}
									]
								},
								{
									"name": "DM05A Incremental Delta Load",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "DM01p Incremental Delta Load",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SqlServerSource",
											"sqlReaderQuery": {
												"value": "select * from DM05A\nwhere DM05A_ID > @{item().DM05A}",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"sink": {
											"type": "SnowflakeV2Sink",
											"importSettings": {
												"type": "SnowflakeImportCopyCommand",
												"additionalCopyOptions": {
													"ON_ERROR": "SKIP_FILE"
												}
											}
										},
										"enableStaging": true,
										"stagingSettings": {
											"linkedServiceName": {
												"referenceName": "msaz01_dm01_Azure_Blob",
												"type": "LinkedServiceReference"
											},
											"path": "staging"
										},
										"parallelCopies": {
											"value": "@pipeline().parameters.Degree_Copy_Parallelism",
											"type": "Expression"
										},
										"enableSkipIncompatibleRow": true,
										"logSettings": {
											"enableCopyActivityLog": true,
											"copyActivityLogSettings": {
												"logLevel": "Warning",
												"enableReliableLogging": false
											},
											"logLocationSettings": {
												"linkedServiceName": {
													"referenceName": "msaz01_dm01_Azure_Blob",
													"type": "LinkedServiceReference"
												},
												"path": "trux"
											}
										},
										"dataIntegrationUnits": {
											"value": "@pipeline().parameters.Maximum_DIU",
											"type": "Expression"
										},
										"translator": {
											"type": "TabularTranslator",
											"mappings": [
												{
													"source": {
														"name": "DM05A_ID",
														"type": "Int32"
													},
													"sink": {
														"name": "DM05A_ID",
														"type": "Int64"
													}
												},
												{
													"source": {
														"name": "DM05A_LINK",
														"type": "Int32"
													},
													"sink": {
														"name": "DM05A_LINK",
														"type": "Int64"
													}
												},
												{
													"source": {
														"name": "DM05A_TDTE",
														"type": "DateTime"
													},
													"sink": {
														"name": "DM05A_TDTE",
														"type": "DateTime"
													}
												},
												{
													"source": {
														"name": "DM05A_AMNT",
														"type": "Decimal"
													},
													"sink": {
														"name": "DM05A_AMNT",
														"type": "Int64"
													}
												},
												{
													"source": {
														"name": "DM05A_QTY",
														"type": "Decimal"
													},
													"sink": {
														"name": "DM05A_QTY",
														"type": "Int64"
													}
												},
												{
													"source": {
														"name": "DM05A_ROUT",
														"type": "Int32"
													},
													"sink": {
														"name": "DM05A_ROUT",
														"type": "Int64"
													}
												},
												{
													"source": {
														"name": "DM05A_SEQU",
														"type": "Decimal"
													},
													"sink": {
														"name": "DM05A_SEQU",
														"type": "Int64"
													}
												},
												{
													"source": {
														"name": "DM05A_PERIODCLOSEID",
														"type": "Int32"
													},
													"sink": {
														"name": "DM05A_PERIODCLOSEID",
														"type": "Int64"
													}
												},
												{
													"source": {
														"name": "DM05A_USER",
														"type": "String"
													},
													"sink": {
														"name": "DM05A_USER",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "DM05A_RTYPE",
														"type": "String"
													},
													"sink": {
														"name": "DM05A_RTYPE",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "DM05A_RDATE",
														"type": "DateTime"
													},
													"sink": {
														"name": "DM05A_RDATE",
														"type": "DateTime"
													}
												},
												{
													"source": {
														"name": "DM05A_ADJR",
														"type": "String"
													},
													"sink": {
														"name": "DM05A_ADJR",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "DM05A_CODE",
														"type": "String"
													},
													"sink": {
														"name": "DM05A_CODE",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "DM05A_NOTEID",
														"type": "Int32"
													},
													"sink": {
														"name": "DM05A_NOTEID",
														"type": "Int64"
													}
												}
											]
										}
									},
									"inputs": [
										{
											"referenceName": "TRUX_LEGACY01",
											"type": "DatasetReference",
											"parameters": {
												"schema": "dbo",
												"table": "DM05A",
												"database": {
													"value": "@item().sql_db_name",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "LRS_Snowflake_Raw_V2",
											"type": "DatasetReference",
											"parameters": {
												"Snowflake_Sink_Table": "DM05A",
												"Snowflake_Schema": "@item().Snowflake_schema"
											}
										}
									]
								},
								{
									"name": "DM05B Incremental Delta Load",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "DM05A Incremental Delta Load",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SqlServerSource",
											"sqlReaderQuery": {
												"value": "select * from DM05B\nwhere DM05B_ID > @{item().DM05B}",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"sink": {
											"type": "SnowflakeV2Sink",
											"importSettings": {
												"type": "SnowflakeImportCopyCommand",
												"additionalCopyOptions": {
													"ON_ERROR": "SKIP_FILE"
												}
											}
										},
										"enableStaging": true,
										"stagingSettings": {
											"linkedServiceName": {
												"referenceName": "msaz01_dm01_Azure_Blob",
												"type": "LinkedServiceReference"
											},
											"path": "staging"
										},
										"parallelCopies": {
											"value": "@pipeline().parameters.Degree_Copy_Parallelism",
											"type": "Expression"
										},
										"enableSkipIncompatibleRow": true,
										"logSettings": {
											"enableCopyActivityLog": true,
											"copyActivityLogSettings": {
												"logLevel": "Warning",
												"enableReliableLogging": false
											},
											"logLocationSettings": {
												"linkedServiceName": {
													"referenceName": "msaz01_dm01_Azure_Blob",
													"type": "LinkedServiceReference"
												},
												"path": "trux"
											}
										},
										"dataIntegrationUnits": {
											"value": "@pipeline().parameters.Maximum_DIU",
											"type": "Expression"
										},
										"translator": {
											"type": "TabularTranslator",
											"mappings": [
												{
													"source": {
														"name": "DM05B_ID",
														"type": "Int32"
													},
													"sink": {
														"name": "DM05B_ID",
														"type": "Int64"
													}
												},
												{
													"source": {
														"name": "DM05B_LINK",
														"type": "Int32"
													},
													"sink": {
														"name": "DM05B_LINK",
														"type": "Int64"
													}
												},
												{
													"source": {
														"name": "DM05B_TDTE",
														"type": "DateTime"
													},
													"sink": {
														"name": "DM05B_TDTE",
														"type": "DateTime"
													}
												},
												{
													"source": {
														"name": "DM05B_AMNT",
														"type": "Decimal"
													},
													"sink": {
														"name": "DM05B_AMNT",
														"type": "Int64"
													}
												},
												{
													"source": {
														"name": "DM05B_QTY",
														"type": "Decimal"
													},
													"sink": {
														"name": "DM05B_QTY",
														"type": "Int64"
													}
												},
												{
													"source": {
														"name": "DM05B_BILLF",
														"type": "DateTime"
													},
													"sink": {
														"name": "DM05B_BILLF",
														"type": "DateTime"
													}
												},
												{
													"source": {
														"name": "DM05B_BILLT",
														"type": "DateTime"
													},
													"sink": {
														"name": "DM05B_BILLT",
														"type": "DateTime"
													}
												},
												{
													"source": {
														"name": "DM05B_ARATEID",
														"type": "Int32"
													},
													"sink": {
														"name": "DM05B_ARATEID",
														"type": "Int64"
													}
												},
												{
													"source": {
														"name": "DM05B_PERIODCLOSEID",
														"type": "Int32"
													},
													"sink": {
														"name": "DM05B_PERIODCLOSEID",
														"type": "Int64"
													}
												},
												{
													"source": {
														"name": "DM05B_USER",
														"type": "String"
													},
													"sink": {
														"name": "DM05B_USER",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "DM05B_RTYPE",
														"type": "String"
													},
													"sink": {
														"name": "DM05B_RTYPE",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "DM05B_RDATE",
														"type": "DateTime"
													},
													"sink": {
														"name": "DM05B_RDATE",
														"type": "DateTime"
													}
												},
												{
													"source": {
														"name": "DM05B_ADJR",
														"type": "String"
													},
													"sink": {
														"name": "DM05B_ADJR",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "DM05B_CODE",
														"type": "String"
													},
													"sink": {
														"name": "DM05B_CODE",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "DM05B_NOTEID",
														"type": "Int32"
													},
													"sink": {
														"name": "DM05B_NOTEID",
														"type": "Int64"
													}
												}
											]
										}
									},
									"inputs": [
										{
											"referenceName": "TRUX_LEGACY01",
											"type": "DatasetReference",
											"parameters": {
												"schema": "dbo",
												"table": "DM05B",
												"database": {
													"value": "@item().sql_db_name",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "LRS_Snowflake_Raw_V2",
											"type": "DatasetReference",
											"parameters": {
												"Snowflake_Sink_Table": "DM05B",
												"Snowflake_Schema": {
													"value": "@item().Snowflake_schema",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "DM05Z Incremental Delta Load",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "DM05B Incremental Delta Load",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SqlServerSource",
											"sqlReaderQuery": {
												"value": "select * from DM05Z\nwhere DM05Z_ID > @{item().DM05Z}",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"sink": {
											"type": "SnowflakeV2Sink",
											"importSettings": {
												"type": "SnowflakeImportCopyCommand",
												"additionalCopyOptions": {
													"ON_ERROR": "SKIP_FILE"
												}
											}
										},
										"enableStaging": true,
										"stagingSettings": {
											"linkedServiceName": {
												"referenceName": "msaz01_dm01_Azure_Blob",
												"type": "LinkedServiceReference"
											},
											"path": "staging"
										},
										"parallelCopies": {
											"value": "@pipeline().parameters.Degree_Copy_Parallelism",
											"type": "Expression"
										},
										"enableSkipIncompatibleRow": true,
										"logSettings": {
											"enableCopyActivityLog": true,
											"copyActivityLogSettings": {
												"logLevel": "Warning",
												"enableReliableLogging": false
											},
											"logLocationSettings": {
												"linkedServiceName": {
													"referenceName": "msaz01_dm01_Azure_Blob",
													"type": "LinkedServiceReference"
												},
												"path": "trux"
											}
										},
										"dataIntegrationUnits": {
											"value": "@pipeline().parameters.Maximum_DIU",
											"type": "Expression"
										},
										"translator": {
											"type": "TabularTranslator",
											"mappings": [
												{
													"source": {
														"name": "DM05Z_ID",
														"type": "Int32"
													},
													"sink": {
														"name": "DM05Z_ID",
														"type": "Int64"
													}
												},
												{
													"source": {
														"name": "DM05Z_LINK",
														"type": "Int32"
													},
													"sink": {
														"name": "DM05Z_LINK",
														"type": "Int64"
													}
												},
												{
													"source": {
														"name": "DM05Z_TDTE",
														"type": "DateTime"
													},
													"sink": {
														"name": "DM05Z_TDTE",
														"type": "DateTime"
													}
												},
												{
													"source": {
														"name": "DM05Z_AMNT",
														"type": "Decimal"
													},
													"sink": {
														"name": "DM05Z_AMNT",
														"type": "Int64"
													}
												},
												{
													"source": {
														"name": "DM05Z_QTY",
														"type": "Decimal"
													},
													"sink": {
														"name": "DM05Z_QTY",
														"type": "Int64"
													}
												},
												{
													"source": {
														"name": "DM05Z_REFN",
														"type": "String"
													},
													"sink": {
														"name": "DM05Z_REFN",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "DM05Z_PERIODCLOSEID",
														"type": "Int32"
													},
													"sink": {
														"name": "DM05Z_PERIODCLOSEID",
														"type": "Int64"
													}
												},
												{
													"source": {
														"name": "DM05Z_USER",
														"type": "String"
													},
													"sink": {
														"name": "DM05Z_USER",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "DM05Z_RTYPE",
														"type": "String"
													},
													"sink": {
														"name": "DM05Z_RTYPE",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "DM05Z_RDATE",
														"type": "DateTime"
													},
													"sink": {
														"name": "DM05Z_RDATE",
														"type": "DateTime"
													}
												},
												{
													"source": {
														"name": "DM05Z_ADJR",
														"type": "String"
													},
													"sink": {
														"name": "DM05Z_ADJR",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "DM05Z_CODE",
														"type": "String"
													},
													"sink": {
														"name": "DM05Z_CODE",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "DM05Z_NOTEID",
														"type": "Int32"
													},
													"sink": {
														"name": "DM05Z_NOTEID",
														"type": "Int64"
													}
												}
											]
										}
									},
									"inputs": [
										{
											"referenceName": "TRUX_LEGACY01",
											"type": "DatasetReference",
											"parameters": {
												"schema": "dbo",
												"table": "DM05Z",
												"database": {
													"value": "@item().sql_db_name",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "LRS_Snowflake_Raw_V2",
											"type": "DatasetReference",
											"parameters": {
												"Snowflake_Sink_Table": "DM05Z",
												"Snowflake_Schema": {
													"value": "@item().Snowflake_schema",
													"type": "Expression"
												}
											}
										}
									]
								}
							]
						}
					},
					{
						"name": "Incremental Loop Over Date Watermark Tables",
						"description": "Activity to loop over tables that have no primary keys with incremental IDs, but instead use dates. This loop pulls in the latest N days worth of fact data from these tables and merges them into the source Snowflake fact tables.",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Trux Legacy DT Watermark Lookup",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Trux Legacy DT Watermark Lookup').output.value",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Incremental Delta Load to Staging",
									"description": "Copying delta rows from sql server to the staging tables created for each instance in snowflake (these tables will be dropped after all activities are completed)",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "Snowflake Create Staging Tables",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SqlServerSource",
											"sqlReaderQuery": {
												"value": "@{concat(\n    'Select * from ',\n    item().sql_db_name,\n    '.dbo.', \n    item().table_name,\n    ' where ',\n    item().table_name,\n    '_date > DATEADD(day, -7, GETDATE())'\n)\n}",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"sink": {
											"type": "SnowflakeV2Sink",
											"importSettings": {
												"type": "SnowflakeImportCopyCommand"
											}
										},
										"enableStaging": true,
										"stagingSettings": {
											"linkedServiceName": {
												"referenceName": "msaz01_dm01_Azure_Blob",
												"type": "LinkedServiceReference"
											},
											"path": "staging"
										}
									},
									"inputs": [
										{
											"referenceName": "TRUX_LEGACY01",
											"type": "DatasetReference",
											"parameters": {
												"schema": "dbo",
												"table": {
													"value": "@item().table_name",
													"type": "Expression"
												},
												"database": {
													"value": "@item().sql_db_name",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "LRS_Snowflake_Raw_V2",
											"type": "DatasetReference",
											"parameters": {
												"Snowflake_Sink_Table": "@concat(item().table_name,'_STAGING')",
												"Snowflake_Schema": "@item().snowflake_schema"
											}
										}
									]
								},
								{
									"name": "Snowflake Create Staging Tables",
									"description": "create staging table used to store the delta incremental load. In this staging table, we perform a merge to the main raw table.",
									"type": "Script",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "LRS_Snowflake_V2",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"type": "Query",
												"text": {
													"value": "@{concat('Create or replace table ', item().Snowflake_schema,'.',item().table_name,'_staging\n    as \n    select * from ', item().Snowflake_schema,'.',item().table_name,\n    ' where 1=0')}\n",
													"type": "Expression"
												}
											}
										],
										"scriptBlockExecutionTimeout": "02:00:00"
									}
								},
								{
									"name": "RM05 Snowflake Merge Operation",
									"description": "merge statement to the raw tables. this helps avoids any duplication and upsert the rows needed.",
									"type": "Script",
									"dependsOn": [
										{
											"activity": "Incremental Delta Load to Staging",
											"dependencyConditions": [
												"Succeeded",
												"Skipped"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "LRS_Snowflake_V2",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"type": "Query",
												"text": {
													"value": "@{concat('merge into ', item().Snowflake_schema,'.','RM05 t \nusing ', \n    item().Snowflake_schema,'.','RM05_STAGING s \non concat(t.rm05_rout, t.rm05_seq1,t.rm05_seq2,t.rm05_date) = concat(s.rm05_rout, s.rm05_seq1,s.rm05_seq2,s.rm05_date) \nwhen matched then update set \n    t.rm05_date = s.rm05_date,\n\tt.rm05_rout = s.rm05_rout,\n\tt.rm05_seq1 = s.rm05_seq1, \n\tt.rm05_seq2 = s.rm05_seq2, \n\tt.rm05_truk = s.rm05_truk,\n\tt.rm05_driv = s.rm05_driv,\n\tt.rm05_help = s.rm05_help,\n\tt.rm05_fuel = s.rm05_fuel,\n\tt.rm05_fuom = s.rm05_fuom,\n\tt.rm05_tim1 = s.rm05_tim1,\n\tt.rm05_tim2 = s.rm05_tim2,\n\tt.rm05_odm1 = s.rm05_odm1,\n\tt.rm05_odm2 = s.rm05_odm2,\n\tt.rm05_ouom = s.rm05_ouom,\n\tt.rm05_note = s.rm05_note,\n\tt.rm05_starthour = s.rm05_starthour,\n\tt.rm05_endhour = s.rm05_endhour,\n\tt.rm05_oil = s.rm05_oil,\n\tt.rm05_oil_uom = s.rm05_oil_uom,\n\tt.rm05_deptime = s.rm05_deptime,\n\tt.rm05_rettime = s.rm05_rettime,\n\tt.rm05_starttime= s.rm05_starttime \nwhen not matched then insert \n\t(\n\tt.rm05_date,\n\tt.rm05_rout,\n\tt.rm05_seq1,\n\tt.rm05_seq2,\n\tt.rm05_truk,\n\tt.rm05_driv,\n\tt.rm05_help,\n\tt.rm05_fuel,\n\tt.rm05_fuom,\n\tt.rm05_tim1,\n\tt.rm05_tim2,\n\tt.rm05_odm1,\n\tt.rm05_odm2,\n\tt.rm05_ouom,\n\tt.rm05_note,\n\tt.rm05_starthour,\n\tt.rm05_endhour,\n\tt.rm05_oil,\n\tt.rm05_oil_uom,\n\tt.rm05_deptime,\n\tt.rm05_rettime,\n\tt.rm05_starttime \n\t)\nvalues \n\t(\n\ts.rm05_date,\n\ts.rm05_rout,\n\ts.rm05_seq1, \n\ts.rm05_seq2, \n\ts.rm05_truk,\n\ts.rm05_driv,\n\ts.rm05_help,\n\ts.rm05_fuel,\n\ts.rm05_fuom,\n\ts.rm05_tim1,\n\ts.rm05_tim2,\n\ts.rm05_odm1,\n\ts.rm05_odm2,\n\ts.rm05_ouom,\n\ts.rm05_note,\n\ts.rm05_starthour,\n\ts.rm05_endhour,\n\ts.rm05_oil,\n\ts.rm05_oil_uom,\n\ts.rm05_deptime,\n\ts.rm05_rettime,\n\ts.rm05_starttime)'\n\t)}\n",
													"type": "Expression"
												}
											}
										],
										"scriptBlockExecutionTimeout": "02:00:00"
									}
								},
								{
									"name": "Snowflake Drop Staging Tables",
									"description": "after all activities are completed, we perform the drop operation to clean up the snowflake environment",
									"type": "Script",
									"dependsOn": [
										{
											"activity": "RM05 Snowflake Merge Operation",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "LRS_Snowflake_V2",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"type": "Query",
												"text": {
													"value": "@{concat('drop table if exists ', item().Snowflake_schema,'.',item().table_name,'_STAGING')}\n",
													"type": "Expression"
												}
											}
										],
										"scriptBlockExecutionTimeout": "02:00:00"
									}
								}
							]
						}
					},
					{
						"name": "Trux Legacy DT Watermark Lookup",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SnowflakeV2Source",
								"query": "select\n*\nfrom\n  lrs_raw.master_data.vw_trux_legacy_watermark\nwhere\n  watermark_type = 'DT'\n  and\n  latest_watermark is not null",
								"exportSettings": {
									"type": "SnowflakeExportCopyCommand"
								}
							},
							"dataset": {
								"referenceName": "LRS_Snowflake_Raw_V2",
								"type": "DatasetReference",
								"parameters": {
									"Snowflake_Sink_Table": "Destination",
									"Snowflake_Schema": "Tower_Raw"
								}
							},
							"firstRowOnly": false
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"Maximum_DIU": {
						"type": "int",
						"defaultValue": 8
					},
					"Degree_Copy_Parallelism": {
						"type": "int",
						"defaultValue": 8
					},
					"LastProcessedId": {
						"type": "string"
					},
					"CurrentDate": {
						"type": "string"
					},
					"SchemaName": {
						"type": "string"
					},
					"TableName": {
						"type": "string"
					}
				},
				"variables": {
					"tempArray": {
						"type": "Array"
					},
					"TempResult": {
						"type": "Array"
					},
					"ResultsArray": {
						"type": "Array"
					},
					"OutputArray": {
						"type": "Array"
					},
					"append": {
						"type": "Array"
					}
				},
				"folder": {
					"name": "Test"
				},
				"annotations": [],
				"lastPublishTime": "2024-08-30T17:58:01Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/TRUX_LEGACY_INCREMENTAL_WKND_LOAD_copy1')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Loop over databases",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Database Lookup",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Database Lookup').output.value",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "RM05 Last ID",
									"type": "Lookup",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SnowflakeV2Source",
											"query": {
												"value": "SELECT MAX(RM05_ROUT) AS LASTPROCESSEDID FROM @{item().SchemaName}.RM05;",
												"type": "Expression"
											},
											"exportSettings": {
												"type": "SnowflakeExportCopyCommand"
											}
										},
										"dataset": {
											"referenceName": "LRS_Snowflake_Raw_V2",
											"type": "DatasetReference",
											"parameters": {
												"Snowflake_Sink_Table": "RM05",
												"Snowflake_Schema": "@item().SchemaName"
											}
										},
										"firstRowOnly": false
									}
								},
								{
									"name": "SM01 Last ID",
									"type": "Lookup",
									"dependsOn": [
										{
											"activity": "RM05 Last ID",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SnowflakeV2Source",
											"query": {
												"value": "SELECT MAX(SM01_LOGID) AS LASTPROCESSEDID FROM @{item().SchemaName}.SM01;",
												"type": "Expression"
											},
											"exportSettings": {
												"type": "SnowflakeExportCopyCommand"
											}
										},
										"dataset": {
											"referenceName": "LRS_Snowflake_Raw_V2",
											"type": "DatasetReference",
											"parameters": {
												"Snowflake_Sink_Table": "SM01",
												"Snowflake_Schema": "@item().SchemaName"
											}
										},
										"firstRowOnly": false
									}
								},
								{
									"name": "DM01 Last ID",
									"type": "Lookup",
									"dependsOn": [
										{
											"activity": "SM01 Last ID",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SnowflakeV2Source",
											"query": {
												"value": "SELECT MAX(DM01_ID) AS LASTPROCESSEDID FROM @{item().SchemaName}.DM01;",
												"type": "Expression"
											},
											"exportSettings": {
												"type": "SnowflakeExportCopyCommand"
											}
										},
										"dataset": {
											"referenceName": "LRS_Snowflake_Raw_V2",
											"type": "DatasetReference",
											"parameters": {
												"Snowflake_Sink_Table": "DM01",
												"Snowflake_Schema": "@item().SchemaName"
											}
										},
										"firstRowOnly": false
									}
								},
								{
									"name": "DM01P Last ID",
									"type": "Lookup",
									"dependsOn": [
										{
											"activity": "DM01 Last ID",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SnowflakeV2Source",
											"query": {
												"value": "SELECT MAX(DM01P_ID) AS LASTPROCESSEDID FROM @{item().SchemaName}.DM01P;",
												"type": "Expression"
											},
											"exportSettings": {
												"type": "SnowflakeExportCopyCommand"
											}
										},
										"dataset": {
											"referenceName": "LRS_Snowflake_Raw_V2",
											"type": "DatasetReference",
											"parameters": {
												"Snowflake_Sink_Table": "DM01P",
												"Snowflake_Schema": "@item().SchemaName"
											}
										},
										"firstRowOnly": false
									}
								},
								{
									"name": "DM05A_ID Last ID",
									"type": "Lookup",
									"dependsOn": [
										{
											"activity": "DM01P Last ID",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SnowflakeV2Source",
											"query": {
												"value": "SELECT MAX(DM05A_ID) AS LASTPROCESSEDID FROM @{item().SchemaName}.DM05A;",
												"type": "Expression"
											},
											"exportSettings": {
												"type": "SnowflakeExportCopyCommand"
											}
										},
										"dataset": {
											"referenceName": "LRS_Snowflake_Raw_V2",
											"type": "DatasetReference",
											"parameters": {
												"Snowflake_Sink_Table": "DM05A",
												"Snowflake_Schema": "@item().SchemaName"
											}
										},
										"firstRowOnly": false
									}
								},
								{
									"name": "DM05B Last ID",
									"type": "Lookup",
									"dependsOn": [
										{
											"activity": "DM05A_ID Last ID",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SnowflakeV2Source",
											"query": {
												"value": "SELECT MAX(DM05B_ID) AS LASTPROCESSEDID FROM @{item().SchemaName}.DM05B;",
												"type": "Expression"
											},
											"exportSettings": {
												"type": "SnowflakeExportCopyCommand"
											}
										},
										"dataset": {
											"referenceName": "LRS_Snowflake_Raw_V2",
											"type": "DatasetReference",
											"parameters": {
												"Snowflake_Sink_Table": "DM05B",
												"Snowflake_Schema": "@item().SchemaName"
											}
										},
										"firstRowOnly": false
									}
								},
								{
									"name": "DM05FT Last ID",
									"type": "Lookup",
									"dependsOn": [
										{
											"activity": "DM05B Last ID",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SnowflakeV2Source",
											"query": {
												"value": "SELECT MAX(DM05FT_ID) AS LASTPROCESSEDID FROM @{item().SchemaName}.DM05FT;",
												"type": "Expression"
											},
											"exportSettings": {
												"type": "SnowflakeExportCopyCommand"
											}
										},
										"dataset": {
											"referenceName": "LRS_Snowflake_Raw_V2",
											"type": "DatasetReference",
											"parameters": {
												"Snowflake_Sink_Table": "DM05FT",
												"Snowflake_Schema": "@item().SchemaName"
											}
										},
										"firstRowOnly": false
									}
								},
								{
									"name": "DM05Z Last ID",
									"type": "Lookup",
									"dependsOn": [
										{
											"activity": "DM05FT Last ID",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SnowflakeV2Source",
											"query": {
												"value": "SELECT MAX(DM05Z_ID) AS LASTPROCESSEDID FROM @{item().SchemaName}.DM05Z;",
												"type": "Expression"
											},
											"exportSettings": {
												"type": "SnowflakeExportCopyCommand"
											}
										},
										"dataset": {
											"referenceName": "LRS_Snowflake_Raw_V2",
											"type": "DatasetReference",
											"parameters": {
												"Snowflake_Sink_Table": "DM05Z",
												"Snowflake_Schema": "@item().SchemaName"
											}
										},
										"firstRowOnly": false
									}
								},
								{
									"name": "LM02 Last ID",
									"type": "Lookup",
									"dependsOn": [
										{
											"activity": "DM05Z Last ID",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SnowflakeV2Source",
											"query": {
												"value": "SELECT MAX(LM02_NUMB) AS LASTPROCESSEDID FROM @{item().SchemaName}.LM02;",
												"type": "Expression"
											},
											"exportSettings": {
												"type": "SnowflakeExportCopyCommand"
											}
										},
										"dataset": {
											"referenceName": "LRS_Snowflake_Raw_V2",
											"type": "DatasetReference",
											"parameters": {
												"Snowflake_Sink_Table": "LM02",
												"Snowflake_Schema": "@item().SchemaName"
											}
										},
										"firstRowOnly": false
									}
								},
								{
									"name": "MT02 Last ID",
									"type": "Lookup",
									"dependsOn": [
										{
											"activity": "LM02 Last ID",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SnowflakeV2Source",
											"query": {
												"value": "SELECT MAX(MT02_REFR) AS LASTPROCESSEDID FROM @{item().SchemaName}.MT02;",
												"type": "Expression"
											},
											"exportSettings": {
												"type": "SnowflakeExportCopyCommand"
											}
										},
										"dataset": {
											"referenceName": "LRS_Snowflake_Raw_V2",
											"type": "DatasetReference",
											"parameters": {
												"Snowflake_Sink_Table": "MT02",
												"Snowflake_Schema": {
													"value": "@item().SchemaName",
													"type": "Expression"
												}
											}
										},
										"firstRowOnly": false
									}
								},
								{
									"name": "RM03U Last ID",
									"type": "Lookup",
									"dependsOn": [
										{
											"activity": "MT02 Last ID",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SnowflakeV2Source",
											"query": {
												"value": "SELECT MAX(RM03U_ID) AS LASTPROCESSEDID FROM @{item().SchemaName}.RM03U;",
												"type": "Expression"
											},
											"exportSettings": {
												"type": "SnowflakeExportCopyCommand"
											}
										},
										"dataset": {
											"referenceName": "LRS_Snowflake_Raw_V2",
											"type": "DatasetReference",
											"parameters": {
												"Snowflake_Sink_Table": "RM03U",
												"Snowflake_Schema": "@item().SchemaName"
											}
										},
										"firstRowOnly": false
									}
								}
							]
						}
					},
					{
						"name": "Database Lookup",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SnowflakeV2Source",
								"query": "SELECT 'LRS_RAW' as DatabaseName, TABLE_NAME as TableName,TABLE_SCHEMA as SchemaName\r\nFROM INFORMATION_SCHEMA.TABLES INS\r\nWHERE TABLE_SCHEMA in ('TRUX_CD_COMP_RAW','TRUX_DC_COMP_RAW','TRUX_ES_COMP_RAW','TRUX_HR_COMP_RAW','TRUX_LR_COMP_RAW','TRUX_MC_COMP_RAW','TRUX_MH_COMP_RAW',\r\n    'TRUX_MO_COMP_RAW','TRUX_MP_COMP_RAW','TRUX_MW_COMP_RAW','TRUX_NI_COMP_RAW','TRUX_PS_COMP_RAW','TRUX_RS_COMP_RAW','TRUX_RT_COMP_RAW',\r\n    'TRUX_RZ_COMP_RAW','TRUX_SH_COMP_RAW','TRUX_SW_COMP_RAW','TRUX_TP_COMP_RAW','TRUX_WA_COMP_RAW')\r\n    AND TABLENAME IN ('RM05','SM01','DM01','DM01p','DM05A','DM05B','DM05FT','DM05Z','LM02','MT02','RM03U')\r\norder by table_name;",
								"exportSettings": {
									"type": "SnowflakeExportCopyCommand"
								}
							},
							"dataset": {
								"referenceName": "LRS_Snowflake_Raw_V2",
								"type": "DatasetReference",
								"parameters": {
									"Snowflake_Sink_Table": "DATABASE_LKPWATERMARK_TRUX_LEGACY",
									"Snowflake_Schema": "MASTER_DATA"
								}
							},
							"firstRowOnly": false
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"Maximum_DIU": {
						"type": "int",
						"defaultValue": 8
					},
					"Degree_Copy_Parallelism": {
						"type": "int",
						"defaultValue": 8
					},
					"LastProcessedId": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Test"
				},
				"annotations": [],
				"lastPublishTime": "2024-08-30T17:58:00Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/TRUX_LEGACY_Test4_9_3_2023')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Loop Over Tables",
						"description": "activity to loop over array of results which are the tables",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Trux Legacy table",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Trux Legacy table').output.value",
								"type": "Expression"
							},
							"isSequential": false,
							"activities": [
								{
									"name": "Trux Legacy Watermark Lookup",
									"description": "look up schema, database and table names from sqlsever and snowflake",
									"type": "Lookup",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SnowflakeV2Source",
											"query": {
												"value": "select latest_watermark \nfrom MASTER_DATA.VW_TRUX_LEGACY_WATERMARK\nwhere snowflake_schema =  '@{item().snowflake_schema}' \nand table_name =  '@{item().table_name}' ",
												"type": "Expression"
											},
											"exportSettings": {
												"type": "SnowflakeExportCopyCommand"
											}
										},
										"dataset": {
											"referenceName": "LRS_Snowflake_Raw_V2",
											"type": "DatasetReference",
											"parameters": {
												"Snowflake_Sink_Table": "VW_TRUX_LEGACY_WATERMARK",
												"Snowflake_Schema": "MASTER_DATA"
											}
										},
										"firstRowOnly": true
									}
								},
								{
									"name": "RM05 Incremental Delta Load to Staging",
									"description": "Copying delta rows from sql server to the staging tables created for each instance in snowflake (these tables will be dropped after all activities are completed)",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "Snowflake Create Staging Tables",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SqlServerSource",
											"sqlReaderQuery": {
												"value": "select * \nfrom RM05\nwhere RM05_DATE > cast('@{activity('Trux Legacy Watermark Lookup').output.firstRow.latest_watermark}' as datetime)",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"sink": {
											"type": "SnowflakeV2Sink",
											"importSettings": {
												"type": "SnowflakeImportCopyCommand"
											}
										},
										"enableStaging": true,
										"stagingSettings": {
											"linkedServiceName": {
												"referenceName": "msaz01_dm01_Azure_Blob",
												"type": "LinkedServiceReference"
											},
											"path": "staging"
										}
									},
									"inputs": [
										{
											"referenceName": "TRUX_LEGACY01",
											"type": "DatasetReference",
											"parameters": {
												"schema": "dbo",
												"table": "rm05",
												"database": {
													"value": "@item().sql_db_name",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "LRS_Snowflake_Raw_V2",
											"type": "DatasetReference",
											"parameters": {
												"Snowflake_Sink_Table": {
													"value": "@concat(item().table_name,'_STAGING')",
													"type": "Expression"
												},
												"Snowflake_Schema": {
													"value": "@item().snowflake_schema",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "Snowflake Create Staging Tables",
									"description": "create staging table used to store the delta incremental load. In this staging table, we perform a merge to the main raw table.",
									"type": "Script",
									"dependsOn": [
										{
											"activity": "Trux Legacy Watermark Lookup",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "LRS_Snowflake_V2",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"type": "Query",
												"text": {
													"value": "@{concat('Create or replace table ', item().Snowflake_schema,'.',item().table_name,'_staging\n    as \n    select * from ', item().Snowflake_schema,'.',item().table_name,\n    ' where 1=0')}\n",
													"type": "Expression"
												}
											}
										],
										"scriptBlockExecutionTimeout": "02:00:00"
									}
								},
								{
									"name": "RM05 Snowflake Merge Operation",
									"description": "merge statement to the raw tables. this helps avoids any duplication and upsert the rows needed.",
									"type": "Script",
									"dependsOn": [
										{
											"activity": "RM05 Incremental Delta Load to Staging",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "LRS_Snowflake_V2",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"type": "Query",
												"text": {
													"value": "@{concat('merge into ', item().Snowflake_schema,'.','RM05_1 t \nusing ', \n    item().Snowflake_schema,'.','RM05_STAGING s \non concat(t.rm05_rout, t.rm05_seq1,t.rm05_seq2,t.rm05_date) = concat(s.rm05_rout, s.rm05_seq1,s.rm05_seq2,s.rm05_date) \nwhen matched then update set \n    t.rm05_date = s.rm05_date,\n\tt.rm05_rout = s.rm05_rout,\n\tt.rm05_seq1 = s.rm05_seq1, \n\tt.rm05_seq2 = s.rm05_seq2, \n\tt.rm05_truk = s.rm05_truk,\n\tt.rm05_driv = s.rm05_driv,\n\tt.rm05_help = s.rm05_help,\n\tt.rm05_fuel = s.rm05_fuel,\n\tt.rm05_fuom = s.rm05_fuom,\n\tt.rm05_tim1 = s.rm05_tim1,\n\tt.rm05_tim2 = s.rm05_tim2,\n\tt.rm05_odm1 = s.rm05_odm1,\n\tt.rm05_odm2 = s.rm05_odm2,\n\tt.rm05_ouom = s.rm05_ouom,\n\tt.rm05_note = s.rm05_note,\n\tt.rm05_starthour = s.rm05_starthour,\n\tt.rm05_endhour = s.rm05_endhour,\n\tt.rm05_oil = s.rm05_oil,\n\tt.rm05_oil_uom = s.rm05_oil_uom,\n\tt.rm05_deptime = s.rm05_deptime,\n\tt.rm05_rettime = s.rm05_rettime,\n\tt.rm05_starttime= s.rm05_starttime \nwhen not matched then insert \n\t(\n\tt.rm05_date,\n\tt.rm05_rout,\n\tt.rm05_seq1,\n\tt.rm05_seq2,\n\tt.rm05_truk,\n\tt.rm05_driv,\n\tt.rm05_help,\n\tt.rm05_fuel,\n\tt.rm05_fuom,\n\tt.rm05_tim1,\n\tt.rm05_tim2,\n\tt.rm05_odm1,\n\tt.rm05_odm2,\n\tt.rm05_ouom,\n\tt.rm05_note,\n\tt.rm05_starthour,\n\tt.rm05_endhour,\n\tt.rm05_oil,\n\tt.rm05_oil_uom,\n\tt.rm05_deptime,\n\tt.rm05_rettime,\n\tt.rm05_starttime \n\t)\nvalues \n\t(\n\ts.rm05_date,\n\ts.rm05_rout,\n\ts.rm05_seq1, \n\ts.rm05_seq2, \n\ts.rm05_truk,\n\ts.rm05_driv,\n\ts.rm05_help,\n\ts.rm05_fuel,\n\ts.rm05_fuom,\n\ts.rm05_tim1,\n\ts.rm05_tim2,\n\ts.rm05_odm1,\n\ts.rm05_odm2,\n\ts.rm05_ouom,\n\ts.rm05_note,\n\ts.rm05_starthour,\n\ts.rm05_endhour,\n\ts.rm05_oil,\n\ts.rm05_oil_uom,\n\ts.rm05_deptime,\n\ts.rm05_rettime,\n\ts.rm05_starttime)'\n\t)}\n",
													"type": "Expression"
												}
											}
										],
										"scriptBlockExecutionTimeout": "02:00:00"
									}
								},
								{
									"name": "Snowflake Drop Staging Tables",
									"description": "after all activities are completed, we perform the drop operation to clean up the snowflake environment",
									"type": "Script",
									"dependsOn": [
										{
											"activity": "RM05 Snowflake Merge Operation",
											"dependencyConditions": [
												"Succeeded",
												"Skipped"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "LRS_Snowflake_V2",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"type": "Query",
												"text": {
													"value": "@{concat('drop table if exists ', item().Snowflake_schema,'.',item().table_name,'_STAGING')}\n",
													"type": "Expression"
												}
											}
										],
										"scriptBlockExecutionTimeout": "02:00:00"
									}
								}
							]
						}
					},
					{
						"name": "Trux Legacy table",
						"description": "look up schema, database and table names from sqlsever and snowflake",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SnowflakeV2Source",
								"query": "select distinct snowflake_schema, sql_db_name, table_name\r\nfrom MASTER_DATA.VW_TRUX_LEGACY_WATERMARK",
								"exportSettings": {
									"type": "SnowflakeExportCopyCommand"
								}
							},
							"dataset": {
								"referenceName": "LRS_Snowflake_Raw_V2",
								"type": "DatasetReference",
								"parameters": {
									"Snowflake_Sink_Table": "VW_TRUX_LEGACY_WATERMARK",
									"Snowflake_Schema": "MASTER_DATA"
								}
							},
							"firstRowOnly": false
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"Maximum_DIU": {
						"type": "int",
						"defaultValue": 8
					},
					"Degree_Copy_Parallelism": {
						"type": "int",
						"defaultValue": 8
					}
				},
				"folder": {
					"name": "Test"
				},
				"annotations": [],
				"lastPublishTime": "2024-08-27T20:50:05Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/TRUX_LEGACY_test1')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "SQL New Watermark Lkp",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": "declare @dbname nvarchar(MAX);\ndeclare @filtertable nvarchar(MAX);\ndeclare @sql nvarchar(max);\n\nset @dbname = 'TRUX_CD_COMP,TRUX_DC_COMP,TRUX_ES_COMP,TRUX_HR_COMP,TRUX_LR_COMP,TRUX_MC_COMP,TRUX_MH_COMP,TRUX_MO_COMP,TRUX_MP_COMP,TRUX_MW_COMP,TRUX_NI_COMP,TRUX_PS_COMP,TRUX_RS_COMP,TRUX_RT_COMP,TRUX_RZ_COMP,TRUX_SH_COMP,TRUX_SW_COMP,TRUX_TP_COMP,TRUX_WA_COMP'\nset @filtertable = 'RM05,SM01,DM01,DM01p,DM05A,DM05B,DM05FT,DM05Z,LM02,MT02,RM03U'\n\ncreate table #ConsolidatedTable\n( Dbname nvarchar(max),\nSchemaName nvarchar(max),\nTableName nvarchar(max),\nCreatedDate datetime,\nLastUpdatedDatetime datetime\n);\n\ndeclare @temptable table (DatabaseName nvarchar(128));\n\ninsert into @temptable\nselect value from string_split(@dbname, ',');\n\ndeclare @CurrentDatabase nvarchar(128);\n\ndeclare db_cursor cursor for\nselect DatabaseName\nfrom @temptable\n\n\nopen db_cursor\n\nfetch next from db_cursor into @CurrentDatabase;\n\n\nwhile @@FETCH_STATUS = 0\nbegin\n\tset @sql = N'USE ' + QUOTENAME(@CurrentDatabase) + ';\n\tinsert into #ConsolidatedTable\n\tselect\n\t\t''' + @CurrentDatabase + ''' as DBname,\n\t\tSCHEMA_NAME(schema_id) as SchemaName,\n\t\tname as TableName,\n\t\tCREATE_DATE as CreatedDate,\n\t\tMODIFY_DATE as LastUpdatedDatetime\n\tfrom sys.tables\n\twhere name in (''' + replace(@filtertable, ',',''',''') + ''')\n\torder by name;';\n\n\n\texec sp_executesql @sql;\n\n\tfetch next from db_cursor into @CurrentDatabase;\nEND\n\nclose db_cursor;\ndeallocate db_cursor;\n\nselect * from #ConsolidatedTable",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "TRUX_LEGACY01",
								"type": "DatasetReference",
								"parameters": {
									"schema": "dbo",
									"table": "dm01",
									"database": "TRUX_CD_COMP"
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "Blob Sink New Watermark",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "SQL New Watermark Lkp",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Snowflake Old Watermark Lkp",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": "declare @dbname nvarchar(MAX);\ndeclare @filtertable nvarchar(MAX);\ndeclare @sql nvarchar(max);\n\nset @dbname = 'TRUX_CD_COMP,TRUX_DC_COMP,TRUX_ES_COMP,TRUX_HR_COMP,TRUX_LR_COMP,TRUX_MC_COMP,TRUX_MH_COMP,TRUX_MO_COMP,TRUX_MP_COMP,TRUX_MW_COMP,TRUX_NI_COMP,TRUX_PS_COMP,TRUX_RS_COMP,TRUX_RT_COMP,TRUX_RZ_COMP,TRUX_SH_COMP,TRUX_SW_COMP,TRUX_TP_COMP,TRUX_WA_COMP'\nset @filtertable = 'RM05,SM01,DM01,DM01p,DM05A,DM05B,DM05FT,DM05Z,LM02,MT02,RM03U'\n\ncreate table #ConsolidatedTable\n( Dbname nvarchar(max),\nSchemaName nvarchar(max),\nTableName nvarchar(max),\nCreatedDate datetime,\nLastUpdatedDatetime datetime\n);\n\ndeclare @temptable table (DatabaseName nvarchar(128));\n\ninsert into @temptable\nselect value from string_split(@dbname, ',');\n\ndeclare @CurrentDatabase nvarchar(128);\n\ndeclare db_cursor cursor for\nselect DatabaseName\nfrom @temptable\n\n\nopen db_cursor\n\nfetch next from db_cursor into @CurrentDatabase;\n\n\nwhile @@FETCH_STATUS = 0\nbegin\n\tset @sql = N'USE ' + QUOTENAME(@CurrentDatabase) + ';\n\tinsert into #ConsolidatedTable\n\tselect\n\t\t''' + @CurrentDatabase + ''' as DBname,\n\t\tSCHEMA_NAME(schema_id) as SchemaName,\n\t\tname as TableName,\n\t\tCREATE_DATE as CreatedDate,\n\t\tMODIFY_DATE as LastUpdatedDatetime\n\tfrom sys.tables\n\twhere name in (''' + replace(@filtertable, ',',''',''') + ''')\n\torder by name;';\n\n\n\texec sp_executesql @sql;\n\n\tfetch next from db_cursor into @CurrentDatabase;\nEND\n\nclose db_cursor;\ndeallocate db_cursor;\n\nselect * from #ConsolidatedTable",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "SnowflakeV2Sink",
								"importSettings": {
									"type": "SnowflakeImportCopyCommand"
								}
							},
							"enableStaging": true,
							"stagingSettings": {
								"linkedServiceName": {
									"referenceName": "msaz01_dm01_Azure_Blob",
									"type": "LinkedServiceReference"
								},
								"path": "staging"
							}
						},
						"inputs": [
							{
								"referenceName": "TRUX_LEGACY01",
								"type": "DatasetReference",
								"parameters": {
									"schema": "dbo",
									"table": "dm01",
									"database": "TRUX_CD_COMP"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "LRS_Snowflake_Raw_V2",
								"type": "DatasetReference",
								"parameters": {
									"Snowflake_Sink_Table": "DESTINATION",
									"Snowflake_Schema": "TOWER_RAW"
								}
							}
						]
					},
					{
						"name": "Snowflake Old Watermark Lkp",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SnowflakeV2Source",
								"query": "SELECT 'LRS_RAW' as DatabaseName, TABLE_NAME as TableName,TABLE_SCHEMA as SchemaName, CREATED as CreatedDate, LAST_ALTERED as LastUpdatedDate\r\nFROM INFORMATION_SCHEMA.TABLES INS\r\nWHERE TABLE_SCHEMA in ('TRUX_CD_COMP_RAW','TRUX_DC_COMP_RAW','TRUX_ES_COMP_RAW','TRUX_HR_COMP_RAW','TRUX_LR_COMP_RAW','TRUX_MC_COMP_RAW','TRUX_MH_COMP_RAW',\r\n    'TRUX_MO_COMP_RAW','TRUX_MP_COMP_RAW','TRUX_MW_COMP_RAW','TRUX_NI_COMP_RAW','TRUX_PS_COMP_RAW','TRUX_RS_COMP_RAW','TRUX_RT_COMP_RAW',\r\n    'TRUX_RZ_COMP_RAW','TRUX_SH_COMP_RAW','TRUX_SW_COMP_RAW','TRUX_TP_COMP_RAW','TRUX_WA_COMP_RAW')\r\nAND TABLENAME IN ('RM05','SM01','DM01','DM01p','DM05A','DM05B','DM05FT','DM05Z','LM02','MT02','RM03U');",
								"exportSettings": {
									"type": "SnowflakeExportCopyCommand"
								}
							},
							"dataset": {
								"referenceName": "LRS_Snowflake_Raw_V2",
								"type": "DatasetReference",
								"parameters": {
									"Snowflake_Sink_Table": "DESTINATION",
									"Snowflake_Schema": "TOWER_RAW"
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "Replace Old Watermark",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Blob Sink New Watermark",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SnowflakeV2Source",
								"query": "SELECT 'LRS_RAW' as DatabaseName, TABLE_NAME as TableName,TABLE_SCHEMA as SchemaName, CREATED as CreatedDate, LAST_ALTERED as LastUpdatedDate\nFROM INFORMATION_SCHEMA.TABLES INS\nWHERE TABLE_SCHEMA in ('TRUX_CD_COMP_RAW','TRUX_DC_COMP_RAW','TRUX_ES_COMP_RAW','TRUX_HR_COMP_RAW','TRUX_LR_COMP_RAW','TRUX_MC_COMP_RAW','TRUX_MH_COMP_RAW',\n    'TRUX_MO_COMP_RAW','TRUX_MP_COMP_RAW','TRUX_MW_COMP_RAW','TRUX_NI_COMP_RAW','TRUX_PS_COMP_RAW','TRUX_RS_COMP_RAW','TRUX_RT_COMP_RAW',\n    'TRUX_RZ_COMP_RAW','TRUX_SH_COMP_RAW','TRUX_SW_COMP_RAW','TRUX_TP_COMP_RAW','TRUX_WA_COMP_RAW')\nAND TABLENAME IN ('RM05','SM01','DM01','DM01p','DM05A','DM05B','DM05FT','DM05Z','LM02','MT02','RM03U');",
								"exportSettings": {
									"type": "SnowflakeExportCopyCommand"
								}
							},
							"sink": {
								"type": "SnowflakeV2Sink",
								"importSettings": {
									"type": "SnowflakeImportCopyCommand"
								}
							},
							"enableStaging": true,
							"stagingSettings": {
								"linkedServiceName": {
									"referenceName": "msaz01_dm01_Azure_Blob",
									"type": "LinkedServiceReference"
								},
								"path": "staging"
							}
						},
						"inputs": [
							{
								"referenceName": "LRS_Snowflake_Raw_V2",
								"type": "DatasetReference",
								"parameters": {
									"Snowflake_Sink_Table": "DESTINATION",
									"Snowflake_Schema": "TOWER_RAW"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "LRS_Snowflake_Raw_V2",
								"type": "DatasetReference",
								"parameters": {
									"Snowflake_Sink_Table": "DATABASE_LKPWATERMARK_TRUX_LEGACY",
									"Snowflake_Schema": "MASTER_DATA"
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"Maximum_DIU": {
						"type": "int",
						"defaultValue": 8
					},
					"Degree_Copy_Parallelism": {
						"type": "int",
						"defaultValue": 8
					},
					"DBname": {
						"type": "string"
					},
					"SchemaName": {
						"type": "string"
					},
					"TableName": {
						"type": "string"
					},
					"CreatedDate": {
						"type": "string"
					},
					"LastUpdatedDate": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Test"
				},
				"annotations": [],
				"lastPublishTime": "2024-08-30T17:58:00Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/TRUX_LEGACY_test2')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Loop over databases",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Set Variable Array Path",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('RM05 LastProcessedID Lookup').output.value",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "RM05",
									"type": "Lookup",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SnowflakeV2Source",
											"query": {
												"value": "SELECT MAX(RM05_ROUT) AS LASTPROCESSEDID FROM @{item().SchemaName}.RM05;",
												"type": "Expression"
											},
											"exportSettings": {
												"type": "SnowflakeExportCopyCommand"
											}
										},
										"dataset": {
											"referenceName": "LRS_Snowflake_Raw_V2",
											"type": "DatasetReference",
											"parameters": {
												"Snowflake_Sink_Table": "RM05",
												"Snowflake_Schema": "@item().SchemaName"
											}
										},
										"firstRowOnly": false
									}
								},
								{
									"name": "SetOutputArray",
									"description": "",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "RM05",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "OutputArray",
										"value": {
											"value": "@union(array(concat('[{\"SchemaName\": \"', item().SchemaName, '\", \"TableName\":\"', item().TableName, '\", \"LastProcessedID\": \"', activity('RM05').output.value,'\"}]'))\n, array(concat('[{\"SchemaName\": \"', item().SchemaName, '\", \"TableName\":\"', item().TableName, '\", \"LastProcessedID\": \"', activity('RM05').output.value,'\"}]')))",
											"type": "Expression"
										}
									}
								},
								{
									"name": "AppendArray",
									"description": "",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "SetOutputArray",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "append",
										"value": {
											"value": "@union(variables('OutputArray'), array(concat('[{\"SchemaName\": \"', item().SchemaName, '\", \"TableName\":\"', item().TableName, '\", \"LastProcessedID\": \"', activity('RM05').output.value,'\"}]')))",
											"type": "Expression"
										}
									}
								}
							]
						}
					},
					{
						"name": "RM05 LastProcessedID Lookup",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SnowflakeV2Source",
								"query": "SELECT  'LRS_RAW' AS DATABASENAME, TABLE_NAME as TableName,TABLE_SCHEMA as SchemaName\r\nFROM INFORMATION_SCHEMA.TABLES INS\r\nWHERE TABLE_SCHEMA in ('TRUX_CD_COMP_RAW','TRUX_DC_COMP_RAW','TRUX_ES_COMP_RAW','TRUX_HR_COMP_RAW','TRUX_LR_COMP_RAW','TRUX_MC_COMP_RAW','TRUX_MH_COMP_RAW',\r\n    'TRUX_MO_COMP_RAW','TRUX_MP_COMP_RAW','TRUX_MW_COMP_RAW','TRUX_NI_COMP_RAW','TRUX_PS_COMP_RAW','TRUX_RS_COMP_RAW','TRUX_RT_COMP_RAW',\r\n    'TRUX_RZ_COMP_RAW','TRUX_SH_COMP_RAW','TRUX_SW_COMP_RAW','TRUX_TP_COMP_RAW','TRUX_WA_COMP_RAW')\r\n    AND TABLENAME IN ('RM05','SM01','DM01','DM01p','DM05A','DM05B','DM05FT','DM05Z','LM02','MT02','RM03U')\r\norder by table_name;",
								"exportSettings": {
									"type": "SnowflakeExportCopyCommand"
								}
							},
							"dataset": {
								"referenceName": "LRS_Snowflake_Raw_V2",
								"type": "DatasetReference",
								"parameters": {
									"Snowflake_Sink_Table": "DATABASE_LKPWATERMARK_TRUX_LEGACY",
									"Snowflake_Schema": "MASTER_DATA"
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "Set Variable Array Path",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "RM05 LastProcessedID Lookup",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "ResultsArray",
							"value": []
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"Maximum_DIU": {
						"type": "int",
						"defaultValue": 8
					},
					"Degree_Copy_Parallelism": {
						"type": "int",
						"defaultValue": 8
					},
					"LastProcessedId": {
						"type": "string"
					},
					"CurrentDate": {
						"type": "string"
					},
					"SchemaName": {
						"type": "string"
					},
					"TableName": {
						"type": "string"
					}
				},
				"variables": {
					"tempArray": {
						"type": "Array"
					},
					"TempResult": {
						"type": "Array"
					},
					"ResultsArray": {
						"type": "Array"
					},
					"OutputArray": {
						"type": "Array"
					},
					"append": {
						"type": "Array"
					}
				},
				"folder": {
					"name": "Test"
				},
				"annotations": [],
				"lastPublishTime": "2024-08-30T17:58:00Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/TRUX_LEGACY_test3')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Loop over databases",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Database Lookup",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Database Lookup').output.value",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "RM05 Last ID",
									"type": "Lookup",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SnowflakeV2Source",
											"query": {
												"value": "SELECT MAX(RM05_ROUT) AS LASTPROCESSEDID FROM @{item().SchemaName}.RM05;",
												"type": "Expression"
											},
											"exportSettings": {
												"type": "SnowflakeExportCopyCommand"
											}
										},
										"dataset": {
											"referenceName": "LRS_Snowflake_Raw_V2",
											"type": "DatasetReference",
											"parameters": {
												"Snowflake_Sink_Table": "RM05",
												"Snowflake_Schema": "@item().SchemaName"
											}
										},
										"firstRowOnly": false
									}
								},
								{
									"name": "SM01 Last ID",
									"type": "Lookup",
									"dependsOn": [
										{
											"activity": "RM05 Last ID",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SnowflakeV2Source",
											"query": {
												"value": "SELECT MAX(SM01_LOGID) AS LASTPROCESSEDID FROM @{item().SchemaName}.SM01;",
												"type": "Expression"
											},
											"exportSettings": {
												"type": "SnowflakeExportCopyCommand"
											}
										},
										"dataset": {
											"referenceName": "LRS_Snowflake_Raw_V2",
											"type": "DatasetReference",
											"parameters": {
												"Snowflake_Sink_Table": "SM01",
												"Snowflake_Schema": "@item().SchemaName"
											}
										},
										"firstRowOnly": false
									}
								},
								{
									"name": "DM01 Last ID",
									"type": "Lookup",
									"dependsOn": [
										{
											"activity": "SM01 Last ID",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SnowflakeV2Source",
											"query": {
												"value": "SELECT MAX(DM01_ID) AS LASTPROCESSEDID FROM @{item().SchemaName}.DM01;",
												"type": "Expression"
											},
											"exportSettings": {
												"type": "SnowflakeExportCopyCommand"
											}
										},
										"dataset": {
											"referenceName": "LRS_Snowflake_Raw_V2",
											"type": "DatasetReference",
											"parameters": {
												"Snowflake_Sink_Table": "DM01",
												"Snowflake_Schema": "@item().SchemaName"
											}
										},
										"firstRowOnly": false
									}
								},
								{
									"name": "DM01P Last ID",
									"type": "Lookup",
									"dependsOn": [
										{
											"activity": "DM01 Last ID",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SnowflakeV2Source",
											"query": {
												"value": "SELECT MAX(DM01P_ID) AS LASTPROCESSEDID FROM @{item().SchemaName}.DM01P;",
												"type": "Expression"
											},
											"exportSettings": {
												"type": "SnowflakeExportCopyCommand"
											}
										},
										"dataset": {
											"referenceName": "LRS_Snowflake_Raw_V2",
											"type": "DatasetReference",
											"parameters": {
												"Snowflake_Sink_Table": "DM01P",
												"Snowflake_Schema": "@item().SchemaName"
											}
										},
										"firstRowOnly": false
									}
								},
								{
									"name": "DM05A_ID Last ID",
									"type": "Lookup",
									"dependsOn": [
										{
											"activity": "DM01P Last ID",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SnowflakeV2Source",
											"query": {
												"value": "SELECT MAX(DM05A_ID) AS LASTPROCESSEDID FROM @{item().SchemaName}.DM05A;",
												"type": "Expression"
											},
											"exportSettings": {
												"type": "SnowflakeExportCopyCommand"
											}
										},
										"dataset": {
											"referenceName": "LRS_Snowflake_Raw_V2",
											"type": "DatasetReference",
											"parameters": {
												"Snowflake_Sink_Table": "DM05A",
												"Snowflake_Schema": "@item().SchemaName"
											}
										},
										"firstRowOnly": false
									}
								},
								{
									"name": "DM05B Last ID",
									"type": "Lookup",
									"dependsOn": [
										{
											"activity": "DM05A_ID Last ID",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SnowflakeV2Source",
											"query": {
												"value": "SELECT MAX(DM05B_ID) AS LASTPROCESSEDID FROM @{item().SchemaName}.DM05B;",
												"type": "Expression"
											},
											"exportSettings": {
												"type": "SnowflakeExportCopyCommand"
											}
										},
										"dataset": {
											"referenceName": "LRS_Snowflake_Raw_V2",
											"type": "DatasetReference",
											"parameters": {
												"Snowflake_Sink_Table": "DM05B",
												"Snowflake_Schema": "@item().SchemaName"
											}
										},
										"firstRowOnly": false
									}
								},
								{
									"name": "DM05FT Last ID",
									"type": "Lookup",
									"dependsOn": [
										{
											"activity": "DM05B Last ID",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SnowflakeV2Source",
											"query": {
												"value": "SELECT MAX(DM05FT_ID) AS LASTPROCESSEDID FROM @{item().SchemaName}.DM05FT;",
												"type": "Expression"
											},
											"exportSettings": {
												"type": "SnowflakeExportCopyCommand"
											}
										},
										"dataset": {
											"referenceName": "LRS_Snowflake_Raw_V2",
											"type": "DatasetReference",
											"parameters": {
												"Snowflake_Sink_Table": "DM05FT",
												"Snowflake_Schema": "@item().SchemaName"
											}
										},
										"firstRowOnly": false
									}
								},
								{
									"name": "DM05Z Last ID",
									"type": "Lookup",
									"dependsOn": [
										{
											"activity": "DM05FT Last ID",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SnowflakeV2Source",
											"query": {
												"value": "SELECT MAX(DM05Z_ID) AS LASTPROCESSEDID FROM @{item().SchemaName}.DM05Z;",
												"type": "Expression"
											},
											"exportSettings": {
												"type": "SnowflakeExportCopyCommand"
											}
										},
										"dataset": {
											"referenceName": "LRS_Snowflake_Raw_V2",
											"type": "DatasetReference",
											"parameters": {
												"Snowflake_Sink_Table": "DM05Z",
												"Snowflake_Schema": "@item().SchemaName"
											}
										},
										"firstRowOnly": false
									}
								},
								{
									"name": "LM02 Last ID",
									"type": "Lookup",
									"dependsOn": [
										{
											"activity": "DM05Z Last ID",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SnowflakeV2Source",
											"query": {
												"value": "SELECT MAX(LM02_NUMB) AS LASTPROCESSEDID FROM @{item().SchemaName}.LM02;",
												"type": "Expression"
											},
											"exportSettings": {
												"type": "SnowflakeExportCopyCommand"
											}
										},
										"dataset": {
											"referenceName": "LRS_Snowflake_Raw_V2",
											"type": "DatasetReference",
											"parameters": {
												"Snowflake_Sink_Table": "LM02",
												"Snowflake_Schema": "@item().SchemaName"
											}
										},
										"firstRowOnly": false
									}
								},
								{
									"name": "MT02 Last ID",
									"type": "Lookup",
									"dependsOn": [
										{
											"activity": "LM02 Last ID",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SnowflakeV2Source",
											"query": {
												"value": "SELECT MAX(MT02_REFR) AS LASTPROCESSEDID FROM @{item().SchemaName}.MT02;",
												"type": "Expression"
											},
											"exportSettings": {
												"type": "SnowflakeExportCopyCommand"
											}
										},
										"dataset": {
											"referenceName": "LRS_Snowflake_Raw_V2",
											"type": "DatasetReference",
											"parameters": {
												"Snowflake_Sink_Table": "MT02",
												"Snowflake_Schema": {
													"value": "@item().SchemaName",
													"type": "Expression"
												}
											}
										},
										"firstRowOnly": false
									}
								},
								{
									"name": "RM03U Last ID",
									"type": "Lookup",
									"dependsOn": [
										{
											"activity": "MT02 Last ID",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SnowflakeV2Source",
											"query": {
												"value": "SELECT MAX(RM03U_ID) AS LASTPROCESSEDID FROM @{item().SchemaName}.RM03U;",
												"type": "Expression"
											},
											"exportSettings": {
												"type": "SnowflakeExportCopyCommand"
											}
										},
										"dataset": {
											"referenceName": "LRS_Snowflake_Raw_V2",
											"type": "DatasetReference",
											"parameters": {
												"Snowflake_Sink_Table": "RM03U",
												"Snowflake_Schema": {
													"value": "@item().SchemaName",
													"type": "Expression"
												}
											}
										},
										"firstRowOnly": false
									}
								}
							]
						}
					},
					{
						"name": "Database Lookup",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SnowflakeV2Source",
								"query": "SELECT 'LRS_RAW' as DatabaseName, TABLE_NAME as TableName,TABLE_SCHEMA as SchemaName\r\nFROM INFORMATION_SCHEMA.TABLES INS\r\nWHERE TABLE_SCHEMA in ('TRUX_CD_COMP_RAW','TRUX_DC_COMP_RAW','TRUX_ES_COMP_RAW','TRUX_HR_COMP_RAW','TRUX_LR_COMP_RAW','TRUX_MC_COMP_RAW','TRUX_MH_COMP_RAW',\r\n    'TRUX_MO_COMP_RAW','TRUX_MP_COMP_RAW','TRUX_MW_COMP_RAW','TRUX_NI_COMP_RAW','TRUX_PS_COMP_RAW','TRUX_RS_COMP_RAW','TRUX_RT_COMP_RAW',\r\n    'TRUX_RZ_COMP_RAW','TRUX_SH_COMP_RAW','TRUX_SW_COMP_RAW','TRUX_TP_COMP_RAW','TRUX_WA_COMP_RAW')\r\n    AND TABLENAME IN ('RM05','SM01','DM01','DM01p','DM05A','DM05B','DM05FT','DM05Z','LM02','MT02','RM03U')\r\norder by table_name;",
								"exportSettings": {
									"type": "SnowflakeExportCopyCommand"
								}
							},
							"dataset": {
								"referenceName": "LRS_Snowflake_Raw_V2",
								"type": "DatasetReference",
								"parameters": {
									"Snowflake_Sink_Table": "DATABASE_LKPWATERMARK_TRUX_LEGACY",
									"Snowflake_Schema": "MASTER_DATA"
								}
							},
							"firstRowOnly": false
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"Maximum_DIU": {
						"type": "int",
						"defaultValue": 8
					},
					"Degree_Copy_Parallelism": {
						"type": "int",
						"defaultValue": 8
					},
					"LastProcessedId": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Test"
				},
				"annotations": [],
				"lastPublishTime": "2024-08-30T17:58:00Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/TRUX_LEGACY_test_DM01_IdWM')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "DM01 Watermark Lookup",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SnowflakeV2Source",
								"query": "select\r\n'TRUX_DC_COMP' as Sql_db_name,\r\n'TRUX_DC_COMP_RAW' as Snowflake_schema,\r\n'DM01' as table_name,\r\ncast(max(dm01_id)as varchar) as latest_watermark\r\nfrom\r\n  lrs_raw.TRUX_DC_COMP_RAW.dm01\r\n\r\nunion all\r\n\r\nselect\r\n'TRUX_WA_COMP' as Sql_db_name,\r\n'TRUX_WA_COMP_RAW' as Snowflake_schema,\r\n'DM01' as table_name,\r\ncast(max(dm01_id)as varchar) as latest_watermark\r\nfrom\r\n  lrs_raw.TRUX_WA_COMP_RAW.dm01;",
								"exportSettings": {
									"type": "SnowflakeExportCopyCommand"
								}
							},
							"dataset": {
								"referenceName": "LRS_Snowflake_Raw_V2",
								"type": "DatasetReference",
								"parameters": {
									"Snowflake_Sink_Table": "DATABASE_LKPWATERMARK_TRUX_LEGACY",
									"Snowflake_Schema": "MASTER_DATA"
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "Loop over databases",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "DM01 Watermark Lookup",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('DM01 Watermark Lookup').output.value",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Lookup1",
									"type": "Lookup",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SqlServerSource",
											"sqlReaderQuery": {
												"value": "select * from @{item().table_name}\nwhere dm01_id > '@{item().LATEST_WATERMARK}'",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "TRUX_LEGACY01",
											"type": "DatasetReference",
											"parameters": {
												"schema": "dbo",
												"table": {
													"value": "@item().table_name",
													"type": "Expression"
												},
												"database": {
													"value": "@item().Sql_db_name",
													"type": "Expression"
												}
											}
										},
										"firstRowOnly": false
									}
								},
								{
									"name": "Copy data1",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "Lookup1",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SqlServerSource",
											"sqlReaderQuery": {
												"value": "select * from @{item().table_name}\nwhere dm01_id > '@{item().LATEST_WATERMARK}'",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"sink": {
											"type": "SnowflakeV2Sink",
											"importSettings": {
												"type": "SnowflakeImportCopyCommand"
											}
										},
										"enableStaging": true,
										"stagingSettings": {
											"linkedServiceName": {
												"referenceName": "msaz01_dm01_Azure_Blob",
												"type": "LinkedServiceReference"
											},
											"path": "staging"
										}
									},
									"inputs": [
										{
											"referenceName": "TRUX_LEGACY01",
											"type": "DatasetReference",
											"parameters": {
												"schema": "dbo",
												"table": {
													"value": "@item().table_name",
													"type": "Expression"
												},
												"database": {
													"value": "@item().Sql_db_name",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "LRS_Snowflake_Raw_V2",
											"type": "DatasetReference",
											"parameters": {
												"Snowflake_Sink_Table": "@concat(item().table_name,'_1')",
												"Snowflake_Schema": "@item().snowflake_schema"
											}
										}
									]
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"Maximum_DIU": {
						"type": "int",
						"defaultValue": 8
					},
					"Degree_Copy_Parallelism": {
						"type": "int",
						"defaultValue": 8
					},
					"LastProcessedId": {
						"type": "string"
					},
					"CurrentDate": {
						"type": "string"
					},
					"SchemaName": {
						"type": "string"
					},
					"TableName": {
						"type": "string"
					}
				},
				"variables": {
					"tempArray": {
						"type": "Array"
					},
					"TempResult": {
						"type": "Array"
					},
					"ResultsArray": {
						"type": "Array"
					},
					"OutputArray": {
						"type": "Array"
					},
					"append": {
						"type": "Array"
					}
				},
				"folder": {
					"name": "Test"
				},
				"annotations": [],
				"lastPublishTime": "2024-08-30T17:58:00Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/TRUX_LEGACY_test_RM05_DateWM_FirstRun')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "RM05 Watermark Lookup",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SnowflakeV2Source",
								"query": "select\r\n'TRUX_DC_COMP' as SQL_DB_Name,\r\n'TRUX_DC_COMP_RAW' as Snowflake_Schema,\r\n'RM05' as table_name,\r\ncast(max(RM05_DATE)as varchar) as latest_watermark\r\nfrom\r\n  lrs_raw.TRUX_DC_COMP_RAW.rm05\r\n\r\nunion all\r\n\r\nselect\r\n'TRUX_WA_COMP' as SQL_DB_Name,\r\n'TRUX_WA_COMP_RAW' as Snowflake_Schema,\r\n'RM05' as table_name,\r\ncast(max(RM05_DATE)as varchar) as latest_watermark\r\nfrom\r\n  lrs_raw.TRUX_WA_COMP_RAW.rm05;",
								"exportSettings": {
									"type": "SnowflakeExportCopyCommand"
								}
							},
							"dataset": {
								"referenceName": "LRS_Snowflake_Raw_V2",
								"type": "DatasetReference",
								"parameters": {
									"Snowflake_Sink_Table": "DATABASE_LKPWATERMARK_TRUX_LEGACY",
									"Snowflake_Schema": "MASTER_DATA"
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "Loop over databases",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "RM05 Watermark Lookup",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('RM05 Watermark Lookup').output.value",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "RM05 Incremental Delta Load",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SqlServerSource",
											"sqlReaderQuery": {
												"value": "select * from @{item().table_name}\nwhere RM05_DATE > cast('@{item().LATEST_WATERMARK}' as datetime)",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"sink": {
											"type": "SnowflakeV2Sink",
											"importSettings": {
												"type": "SnowflakeImportCopyCommand"
											}
										},
										"enableStaging": true,
										"stagingSettings": {
											"linkedServiceName": {
												"referenceName": "msaz01_dm01_Azure_Blob",
												"type": "LinkedServiceReference"
											},
											"path": "staging"
										}
									},
									"inputs": [
										{
											"referenceName": "TRUX_LEGACY01",
											"type": "DatasetReference",
											"parameters": {
												"schema": "dbo",
												"table": {
													"value": "@item().table_name",
													"type": "Expression"
												},
												"database": {
													"value": "@item().Sql_db_name",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "LRS_Snowflake_Raw_V2",
											"type": "DatasetReference",
											"parameters": {
												"Snowflake_Sink_Table": "@concat(item().table_name,'_1')",
												"Snowflake_Schema": "@item().snowflake_schema"
											}
										}
									]
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"Maximum_DIU": {
						"type": "int",
						"defaultValue": 8
					},
					"Degree_Copy_Parallelism": {
						"type": "int",
						"defaultValue": 8
					},
					"LastProcessedId": {
						"type": "string"
					},
					"CurrentDate": {
						"type": "string"
					},
					"SchemaName": {
						"type": "string"
					},
					"TableName": {
						"type": "string"
					}
				},
				"variables": {
					"tempArray": {
						"type": "Array"
					},
					"TempResult": {
						"type": "Array"
					},
					"ResultsArray": {
						"type": "Array"
					},
					"OutputArray": {
						"type": "Array"
					},
					"append": {
						"type": "Array"
					}
				},
				"folder": {
					"name": "Test"
				},
				"annotations": [],
				"lastPublishTime": "2024-08-30T17:58:00Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/TRUX_LOGGING_FULL_LOAD')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Look up Logging Tables",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SnowflakeV2Source",
								"query": "SELECT * \r\n  FROM LRS_RAW.MASTER_DATA.LOGGING_LOOKUP_TRUX_COMBINED;",
								"exportSettings": {
									"type": "SnowflakeExportCopyCommand"
								}
							},
							"dataset": {
								"referenceName": "LRS_Snowflake_Raw_V2_New",
								"type": "DatasetReference",
								"parameters": {
									"Snowflake_Sink_Table": "TRUX_LOG_COMBINED",
									"Snowflake_Schema": "TRUX_LOGGING_RAW"
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "Loop over TRUX logging tables",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Look up Logging Tables",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Look up Logging Tables').output.value",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Copy Trux logs",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SqlServerSource",
											"additionalColumns": [
												{
													"name": "SQL_TABLE_NAME",
													"value": {
														"value": "@item().sql_table_name",
														"type": "Expression"
													}
												},
												{
													"name": "SOURCE",
													"value": {
														"value": "@item().snowflake_name",
														"type": "Expression"
													}
												},
												{
													"name": "ADF_TIMESTAMP",
													"value": {
														"value": "@utcnow()",
														"type": "Expression"
													}
												}
											],
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"sink": {
											"type": "SnowflakeV2Sink",
											"importSettings": {
												"type": "SnowflakeImportCopyCommand",
												"additionalCopyOptions": {
													"ON_ERROR": "CONTINUE"
												}
											}
										},
										"enableStaging": true,
										"stagingSettings": {
											"linkedServiceName": {
												"referenceName": "MSAZ01_SQL_P12_Blob",
												"type": "LinkedServiceReference"
											},
											"path": "staging",
											"enableCompression": true
										},
										"parallelCopies": {
											"value": "@pipeline().parameters.Degree_Copy_Parallelism",
											"type": "Expression"
										},
										"enableSkipIncompatibleRow": true,
										"logSettings": {
											"enableCopyActivityLog": true,
											"copyActivityLogSettings": {
												"logLevel": "Warning",
												"enableReliableLogging": false
											},
											"logLocationSettings": {
												"linkedServiceName": {
													"referenceName": "MSAZ01_SQL_P12_Blob",
													"type": "LinkedServiceReference"
												}
											}
										},
										"dataIntegrationUnits": {
											"value": "@pipeline().parameters.Maximum_DIU",
											"type": "Expression"
										},
										"translator": {
											"type": "TabularTranslator",
											"mappings": [
												{
													"source": {
														"name": "LOG_ID",
														"type": "Int32"
													},
													"sink": {
														"name": "LOG_ID",
														"type": "Int64"
													}
												},
												{
													"source": {
														"name": "LOG_TYPE",
														"type": "Int32"
													},
													"sink": {
														"name": "LOG_TYPE",
														"type": "Int64"
													}
												},
												{
													"source": {
														"name": "LOG_DATE",
														"type": "DateTime"
													},
													"sink": {
														"name": "LOG_DATE",
														"type": "DateTime"
													}
												},
												{
													"source": {
														"name": "LOG_USER",
														"type": "String"
													},
													"sink": {
														"name": "LOG_USER",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "LOG_TERMID",
														"type": "String"
													},
													"sink": {
														"name": "LOG_TERMID",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "LOG_NOTES",
														"type": "String"
													},
													"sink": {
														"name": "LOG_NOTES",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "LOG_CUST",
														"type": "Int32"
													},
													"sink": {
														"name": "LOG_CUST",
														"type": "Int64"
													}
												},
												{
													"source": {
														"name": "LOG_SITE",
														"type": "Int32"
													},
													"sink": {
														"name": "LOG_SITE",
														"type": "Int64"
													}
												},
												{
													"source": {
														"name": "LOG_SERV",
														"type": "Int32"
													},
													"sink": {
														"name": "LOG_SERV",
														"type": "Int64"
													}
												},
												{
													"source": {
														"name": "LOG_ROUT",
														"type": "Int32"
													},
													"sink": {
														"name": "LOG_ROUT",
														"type": "Int64"
													}
												},
												{
													"source": {
														"name": "LOG_SEQU",
														"type": "Decimal"
													},
													"sink": {
														"name": "LOG_SEQU",
														"type": "Int64"
													}
												},
												{
													"source": {
														"name": "LOG_FNUM",
														"type": "Int32"
													},
													"sink": {
														"name": "LOG_FNUM",
														"type": "Int64"
													}
												},
												{
													"source": {
														"name": "LOG_REAS",
														"type": "String"
													},
													"sink": {
														"name": "LOG_REAS",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "LOG_AUTH",
														"type": "String"
													},
													"sink": {
														"name": "LOG_AUTH",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "LOG_AMNT",
														"type": "Decimal"
													},
													"sink": {
														"name": "LOG_AMNT",
														"type": "Int64"
													}
												},
												{
													"source": {
														"name": "LOG_TDTE",
														"type": "DateTime"
													},
													"sink": {
														"name": "LOG_TDTE",
														"type": "DateTime"
													}
												},
												{
													"source": {
														"name": "LOG_CALLID",
														"type": "Int32"
													},
													"sink": {
														"name": "LOG_CALLID",
														"type": "Int64"
													}
												},
												{
													"source": {
														"name": "LOG_BVAL",
														"type": "String"
													},
													"sink": {
														"name": "LOG_BVAL",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "LOG_AVAL",
														"type": "String"
													},
													"sink": {
														"name": "LOG_AVAL",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "LOG_TASKID",
														"type": "Int32"
													},
													"sink": {
														"name": "LOG_TASKID",
														"type": "Int64"
													}
												},
												{
													"source": {
														"name": "SQL_TABLE_NAME",
														"type": "String"
													},
													"sink": {
														"name": "SQL_TABLE_NAME",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "SOURCE",
														"type": "String"
													},
													"sink": {
														"name": "SOURCE",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "ADF_TIMESTAMP",
														"type": "String"
													},
													"sink": {
														"name": "ADF_TIMESTAMP",
														"type": "DateTime"
													}
												}
											]
										}
									},
									"inputs": [
										{
											"referenceName": "TRUX_MSAZ01_SQL_P12",
											"type": "DatasetReference",
											"parameters": {
												"schema": "dbo",
												"table": {
													"value": "@item().sql_table_name",
													"type": "Expression"
												},
												"database": "TRUX_LOGGING",
												"server": "MSAZ01-SQL-P12"
											}
										}
									],
									"outputs": [
										{
											"referenceName": "LRS_Snowflake_Raw_V2_New",
											"type": "DatasetReference",
											"parameters": {
												"Snowflake_Sink_Table": "TRUX_LOG_COMBINED",
												"Snowflake_Schema": "TRUX_LOGGING_RAW"
											}
										}
									]
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"Maximum_DIU": {
						"type": "int",
						"defaultValue": 2
					},
					"Degree_Copy_Parallelism": {
						"type": "int",
						"defaultValue": 8
					}
				},
				"folder": {
					"name": "Production/TRUX"
				},
				"annotations": [],
				"lastPublishTime": "2024-08-30T17:58:00Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/TRUX_LOGGING_INCREMENTAL_LOAD')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Watermark Lookup for Trux Logging",
						"description": "Look up schema, database and table names from SQL Server and Snowflake",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SnowflakeV2Source",
								"exportSettings": {
									"type": "SnowflakeExportCopyCommand"
								}
							},
							"dataset": {
								"referenceName": "LRS_Snowflake_Raw_V2_New",
								"type": "DatasetReference",
								"parameters": {
									"Snowflake_Sink_Table": "VW_TRUX_LOGGING_WATERMARK",
									"Snowflake_Schema": "MASTER_DATA"
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "Incremental Loop Over Watermark Table",
						"description": "Activity to loop over tables that have primary keys with incremental IDs. This loop looks at our Trux Logging Watermark table in Snowflake and appends any IDs found in SQL Server that are greater than the latest watermark in Snowflake.",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Watermark Lookup for Trux Logging",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Watermark Lookup for Trux Logging').output.value",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Trux Logging Incremental Delta Load",
									"description": "",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SqlServerSource",
											"additionalColumns": [
												{
													"name": "SQL_TABLE_NAME",
													"value": {
														"value": "@item().sql_table_name",
														"type": "Expression"
													}
												},
												{
													"name": "SOURCE",
													"value": {
														"value": "@item().source",
														"type": "Expression"
													}
												},
												{
													"name": "ADF_TIMESTAMP",
													"value": {
														"value": "@utcnow()",
														"type": "Expression"
													}
												}
											],
											"sqlReaderQuery": {
												"value": "SELECT * \n  FROM @{item().sql_table_name}\n WHERE LOG_ID > @{item().latest_watermark}",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"sink": {
											"type": "SnowflakeV2Sink",
											"importSettings": {
												"type": "SnowflakeImportCopyCommand",
												"additionalCopyOptions": {
													"ON_ERROR": "SKIP_FILE"
												}
											}
										},
										"enableStaging": true,
										"stagingSettings": {
											"linkedServiceName": {
												"referenceName": "MSAZ01_SQL_P12_Blob",
												"type": "LinkedServiceReference"
											},
											"path": "staging",
											"enableCompression": true
										},
										"parallelCopies": {
											"value": "@pipeline().parameters.Degree_Copy_Parallelism",
											"type": "Expression"
										},
										"enableSkipIncompatibleRow": true,
										"dataIntegrationUnits": {
											"value": "@pipeline().parameters.Maximum_DIU",
											"type": "Expression"
										},
										"translator": {
											"type": "TabularTranslator",
											"mappings": [
												{
													"source": {
														"name": "LOG_ID",
														"type": "Int32"
													},
													"sink": {
														"name": "LOG_ID",
														"type": "Int64"
													}
												},
												{
													"source": {
														"name": "LOG_TYPE",
														"type": "Int32"
													},
													"sink": {
														"name": "LOG_TYPE",
														"type": "Int64"
													}
												},
												{
													"source": {
														"name": "LOG_DATE",
														"type": "DateTime"
													},
													"sink": {
														"name": "LOG_DATE",
														"type": "DateTime"
													}
												},
												{
													"source": {
														"name": "LOG_USER",
														"type": "String"
													},
													"sink": {
														"name": "LOG_USER",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "LOG_TERMID",
														"type": "String"
													},
													"sink": {
														"name": "LOG_TERMID",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "LOG_NOTES",
														"type": "String"
													},
													"sink": {
														"name": "LOG_NOTES",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "LOG_CUST",
														"type": "Int32"
													},
													"sink": {
														"name": "LOG_CUST",
														"type": "Int64"
													}
												},
												{
													"source": {
														"name": "LOG_SITE",
														"type": "Int32"
													},
													"sink": {
														"name": "LOG_SITE",
														"type": "Int64"
													}
												},
												{
													"source": {
														"name": "LOG_SERV",
														"type": "Int32"
													},
													"sink": {
														"name": "LOG_SERV",
														"type": "Int64"
													}
												},
												{
													"source": {
														"name": "LOG_ROUT",
														"type": "Int32"
													},
													"sink": {
														"name": "LOG_ROUT",
														"type": "Int64"
													}
												},
												{
													"source": {
														"name": "LOG_SEQU",
														"type": "Decimal"
													},
													"sink": {
														"name": "LOG_SEQU",
														"type": "Int64"
													}
												},
												{
													"source": {
														"name": "LOG_FNUM",
														"type": "Int32"
													},
													"sink": {
														"name": "LOG_FNUM",
														"type": "Int64"
													}
												},
												{
													"source": {
														"name": "LOG_REAS",
														"type": "String"
													},
													"sink": {
														"name": "LOG_REAS",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "LOG_AUTH",
														"type": "String"
													},
													"sink": {
														"name": "LOG_AUTH",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "LOG_AMNT",
														"type": "Decimal"
													},
													"sink": {
														"name": "LOG_AMNT",
														"type": "Int64"
													}
												},
												{
													"source": {
														"name": "LOG_TDTE",
														"type": "DateTime"
													},
													"sink": {
														"name": "LOG_TDTE",
														"type": "DateTime"
													}
												},
												{
													"source": {
														"name": "LOG_CALLID",
														"type": "Int32"
													},
													"sink": {
														"name": "LOG_CALLID",
														"type": "Int64"
													}
												},
												{
													"source": {
														"name": "LOG_BVAL",
														"type": "String"
													},
													"sink": {
														"name": "LOG_BVAL",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "LOG_AVAL",
														"type": "String"
													},
													"sink": {
														"name": "LOG_AVAL",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "LOG_TASKID",
														"type": "Int32"
													},
													"sink": {
														"name": "LOG_TASKID",
														"type": "Int64"
													}
												},
												{
													"source": {
														"name": "SQL_TABLE_NAME",
														"type": "String"
													},
													"sink": {
														"name": "SQL_TABLE_NAME",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "SOURCE",
														"type": "String"
													},
													"sink": {
														"name": "SOURCE",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "ADF_TIMESTAMP",
														"type": "String"
													},
													"sink": {
														"name": "ADF_TIMESTAMP",
														"type": "DateTime"
													}
												}
											]
										}
									},
									"inputs": [
										{
											"referenceName": "TRUX_MSAZ01_SQL_P12",
											"type": "DatasetReference",
											"parameters": {
												"schema": "dbo",
												"table": {
													"value": "@item().sql_table_name",
													"type": "Expression"
												},
												"database": "TRUX_LOGGING",
												"server": "MSAZ01-SQL-P12"
											}
										}
									],
									"outputs": [
										{
											"referenceName": "LRS_Snowflake_Raw_V2_New",
											"type": "DatasetReference",
											"parameters": {
												"Snowflake_Sink_Table": "TRUX_LOG_COMBINED",
												"Snowflake_Schema": "TRUX_LOGGING_RAW"
											}
										}
									]
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"Maximum_DIU": {
						"type": "int",
						"defaultValue": 2
					},
					"Degree_Copy_Parallelism": {
						"type": "int",
						"defaultValue": 8
					},
					"Incremental_Range": {
						"type": "int",
						"defaultValue": 14
					}
				},
				"folder": {
					"name": "Production/TRUX"
				},
				"annotations": [],
				"lastPublishTime": "2024-08-30T17:58:00Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/TRUX_MASTER_DATA_FULL_LOAD')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "COPY SY03 TABLE",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "SnowflakeV2Sink",
								"preCopyScript": "TRUNCATE TABLE LRS_RAW.MASTER_DATA.TRUX_DATA_SY03;",
								"importSettings": {
									"type": "SnowflakeImportCopyCommand"
								}
							},
							"enableStaging": true,
							"stagingSettings": {
								"linkedServiceName": {
									"referenceName": "MSAZ01_SQL_P12_Blob",
									"type": "LinkedServiceReference"
								},
								"path": "staging",
								"enableCompression": true
							},
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "SY03_CODE",
											"type": "String"
										},
										"sink": {
											"name": "SY03_CODE",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "SY03_NAME",
											"type": "String"
										},
										"sink": {
											"name": "SY03_NAME",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "SY03_ADD1",
											"type": "String"
										},
										"sink": {
											"name": "SY03_ADD1",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "SY03_ADD2",
											"type": "String"
										},
										"sink": {
											"name": "SY03_ADD2",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "SY03_CITY",
											"type": "String"
										},
										"sink": {
											"name": "SY03_CITY",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "SY03_STAT",
											"type": "String"
										},
										"sink": {
											"name": "SY03_STAT",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "SY03_PZIP",
											"type": "String"
										},
										"sink": {
											"name": "SY03_PZIP",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "SY03_COUN",
											"type": "Int32"
										},
										"sink": {
											"name": "SY03_COUN",
											"type": "Int64"
										}
									},
									{
										"source": {
											"name": "SY03_PHON",
											"type": "String"
										},
										"sink": {
											"name": "SY03_PHON",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "SY03_FAX",
											"type": "String"
										},
										"sink": {
											"name": "SY03_FAX",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "SY03_EMAIL",
											"type": "String"
										},
										"sink": {
											"name": "SY03_EMAIL",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "SY03_WEBSITE",
											"type": "String"
										},
										"sink": {
											"name": "SY03_WEBSITE",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "SY03_DB",
											"type": "String"
										},
										"sink": {
											"name": "SY03_DB",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "SY03_DEFC",
											"type": "Boolean"
										},
										"sink": {
											"name": "SY03_DEFC",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "SY03_DEFS",
											"type": "Boolean"
										},
										"sink": {
											"name": "SY03_DEFS",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "SY03_DEF1",
											"type": "String"
										},
										"sink": {
											"name": "SY03_DEF1",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "SY03_DEF2",
											"type": "String"
										},
										"sink": {
											"name": "SY03_DEF2",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "SY03_DEF3",
											"type": "String"
										},
										"sink": {
											"name": "SY03_DEF3",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "SY03_DEF4",
											"type": "String"
										},
										"sink": {
											"name": "SY03_DEF4",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "SY03_PRTNAME",
											"type": "Boolean"
										},
										"sink": {
											"name": "SY03_PRTNAME",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "SY03_PRTSTATCAP",
											"type": "Boolean"
										},
										"sink": {
											"name": "SY03_PRTSTATCAP",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "SY03_CHGINTEREST",
											"type": "Boolean"
										},
										"sink": {
											"name": "SY03_CHGINTEREST",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "SY03_CURR",
											"type": "String"
										},
										"sink": {
											"name": "SY03_CURR",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "SY03_CREDITLIMIT",
											"type": "Boolean"
										},
										"sink": {
											"name": "SY03_CREDITLIMIT",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "SY03_PARSED",
											"type": "Boolean"
										},
										"sink": {
											"name": "SY03_PARSED",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "SY03_AUTOSITE",
											"type": "Boolean"
										},
										"sink": {
											"name": "SY03_AUTOSITE",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "SY03_INVSEQ1",
											"type": "Int32"
										},
										"sink": {
											"name": "SY03_INVSEQ1",
											"type": "Int64"
										}
									},
									{
										"source": {
											"name": "SY03_INVSEQ2",
											"type": "Int32"
										},
										"sink": {
											"name": "SY03_INVSEQ2",
											"type": "Int64"
										}
									},
									{
										"source": {
											"name": "SY03_BALO",
											"type": "Boolean"
										},
										"sink": {
											"name": "SY03_BALO",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "SY03_BILLTO",
											"type": "Int32"
										},
										"sink": {
											"name": "SY03_BILLTO",
											"type": "Int64"
										}
									},
									{
										"source": {
											"name": "SY03_GTWCFGID",
											"type": "Int32"
										},
										"sink": {
											"name": "SY03_GTWCFGID",
											"type": "Int64"
										}
									},
									{
										"source": {
											"name": "SY03_MERCHID",
											"type": "Int32"
										},
										"sink": {
											"name": "SY03_MERCHID",
											"type": "Int64"
										}
									},
									{
										"source": {
											"name": "SY03_DBVERSION",
											"type": "String"
										},
										"sink": {
											"name": "SY03_DBVERSION",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "SY03_ACCTAPP",
											"type": "String"
										},
										"sink": {
											"name": "SY03_ACCTAPP",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "SY03_ACCTFILE",
											"type": "String"
										},
										"sink": {
											"name": "SY03_ACCTFILE",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "SY03_HWR",
											"type": "String"
										},
										"sink": {
											"name": "SY03_HWR",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "SY03_AUTOLOADFILE",
											"type": "Boolean"
										},
										"sink": {
											"name": "SY03_AUTOLOADFILE",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "SY03_REFN",
											"type": "String"
										},
										"sink": {
											"name": "SY03_REFN",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "SY03_VUOM",
											"type": "String"
										},
										"sink": {
											"name": "SY03_VUOM",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "SY03_SITETYPE",
											"type": "Byte"
										},
										"sink": {
											"name": "SY03_SITETYPE",
											"type": "Int64"
										}
									},
									{
										"source": {
											"name": "SY03_WOCOPIES",
											"type": "Int32"
										},
										"sink": {
											"name": "SY03_WOCOPIES",
											"type": "Int64"
										}
									},
									{
										"source": {
											"name": "SY03_ENCVER",
											"type": "Int32"
										},
										"sink": {
											"name": "SY03_ENCVER",
											"type": "Int64"
										}
									},
									{
										"source": {
											"name": "SY03_NAT",
											"type": "Boolean"
										},
										"sink": {
											"name": "SY03_NAT",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "SY03_MOBID",
											"type": "String"
										},
										"sink": {
											"name": "SY03_MOBID",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "SY03_REINSCHECKDTE",
											"type": "DateTime"
										},
										"sink": {
											"name": "SY03_REINSCHECKDTE",
											"type": "DateTime"
										}
									},
									{
										"source": {
											"name": "SY03_AUTOHMPAGE",
											"type": "Boolean"
										},
										"sink": {
											"name": "SY03_AUTOHMPAGE",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "SY03_SNDFLDR",
											"type": "String"
										},
										"sink": {
											"name": "SY03_SNDFLDR",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "SY03_RECFLDR",
											"type": "String"
										},
										"sink": {
											"name": "SY03_RECFLDR",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "SY03_FMMASTER",
											"type": "String"
										},
										"sink": {
											"name": "SY03_FMMASTER",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "SY03_GPSFOLDER",
											"type": "String"
										},
										"sink": {
											"name": "SY03_GPSFOLDER",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "SY03_DEFPA",
											"type": "Boolean"
										},
										"sink": {
											"name": "SY03_DEFPA",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "SY03_DEF5",
											"type": "String"
										},
										"sink": {
											"name": "SY03_DEF5",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "SY03_LOCK",
											"type": "Int32"
										},
										"sink": {
											"name": "SY03_LOCK",
											"type": "Int64"
										}
									},
									{
										"source": {
											"name": "SY03_WOSHOWMSG",
											"type": "Boolean"
										},
										"sink": {
											"name": "SY03_WOSHOWMSG",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "SY03_CASH",
											"type": "Decimal"
										},
										"sink": {
											"name": "SY03_CASH",
											"type": "Int64"
										}
									},
									{
										"source": {
											"name": "SY03_CASHT",
											"type": "String"
										},
										"sink": {
											"name": "SY03_CASHT",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "SY03_OverdueLetter",
											"type": "Boolean"
										},
										"sink": {
											"name": "SY03_OVERDUELETTER",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "SY03_AttachOverdueLetter",
											"type": "Boolean"
										},
										"sink": {
											"name": "SY03_ATTACHOVERDUELETTER",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "SY03_AttachFolderOverdueLetter",
											"type": "String"
										},
										"sink": {
											"name": "SY03_ATTACHFOLDEROVERDUELETTER",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "SY03_INVOICEORDER",
											"type": "Int32"
										},
										"sink": {
											"name": "SY03_INVOICEORDER",
											"type": "Int64"
										}
									},
									{
										"source": {
											"name": "SY03_LEED",
											"type": "Boolean"
										},
										"sink": {
											"name": "SY03_LEED",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "SY03_TUOM",
											"type": "String"
										},
										"sink": {
											"name": "SY03_TUOM",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "SY03_WARRONTRUK",
											"type": "Boolean"
										},
										"sink": {
											"name": "SY03_WARRONTRUK",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "SY03_LABELPRINTER",
											"type": "String"
										},
										"sink": {
											"name": "SY03_LABELPRINTER",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "SY03_LABELHEIGHT",
											"type": "Decimal"
										},
										"sink": {
											"name": "SY03_LABELHEIGHT",
											"type": "Int64"
										}
									},
									{
										"source": {
											"name": "SY03_LABELWIDTH",
											"type": "Decimal"
										},
										"sink": {
											"name": "SY03_LABELWIDTH",
											"type": "Int64"
										}
									},
									{
										"source": {
											"name": "SY03_ATTACHINDB",
											"type": "Boolean"
										},
										"sink": {
											"name": "SY03_ATTACHINDB",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "SY03_FILESIZE",
											"type": "Int32"
										},
										"sink": {
											"name": "SY03_FILESIZE",
											"type": "Int64"
										}
									},
									{
										"source": {
											"name": "SY03_NOTE",
											"type": "String"
										},
										"sink": {
											"name": "SY03_NOTE",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "SY03_CHGCODE",
											"type": "String"
										},
										"sink": {
											"name": "SY03_CHGCODE",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "SY03_CHGRATE",
											"type": "Decimal"
										},
										"sink": {
											"name": "SY03_CHGRATE",
											"type": "Int64"
										}
									},
									{
										"source": {
											"name": "SY03_GLNU",
											"type": "Boolean"
										},
										"sink": {
											"name": "SY03_GLNU",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "SY03_LANDFILL",
											"type": "Boolean"
										},
										"sink": {
											"name": "SY03_LANDFILL",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "SY03_TRANSFER",
											"type": "Boolean"
										},
										"sink": {
											"name": "SY03_TRANSFER",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "SY03_MRF",
											"type": "Boolean"
										},
										"sink": {
											"name": "SY03_MRF",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "SY03_COMPOST",
											"type": "Boolean"
										},
										"sink": {
											"name": "SY03_COMPOST",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "SY03_VEGAS",
											"type": "Boolean"
										},
										"sink": {
											"name": "SY03_VEGAS",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "SY03_RSI",
											"type": "String"
										},
										"sink": {
											"name": "SY03_RSI",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "SY03_REASON",
											"type": "String"
										},
										"sink": {
											"name": "SY03_REASON",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "SY03_CLASS",
											"type": "String"
										},
										"sink": {
											"name": "SY03_CLASS",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "SY03_SITE",
											"type": "String"
										},
										"sink": {
											"name": "SY03_SITE",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "SY03_REINSTATEREASON",
											"type": "String"
										},
										"sink": {
											"name": "SY03_REINSTATEREASON",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "SY03_REPRINTREASON",
											"type": "Boolean"
										},
										"sink": {
											"name": "SY03_REPRINTREASON",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "SY03_RRNMAP",
											"type": "Boolean"
										},
										"sink": {
											"name": "SY03_RRNMAP",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "SY03_VALC",
											"type": "Boolean"
										},
										"sink": {
											"name": "SY03_VALC",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "SY03_LANGUAGE",
											"type": "String"
										},
										"sink": {
											"name": "SY03_LANGUAGE",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "SY03_DEF6",
											"type": "String"
										},
										"sink": {
											"name": "SY03_DEF6",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "sy03_lmargin",
											"type": "Decimal"
										},
										"sink": {
											"name": "SY03_LMARGIN",
											"type": "Int64"
										}
									},
									{
										"source": {
											"name": "SY03_DefaultAttachFolder",
											"type": "String"
										},
										"sink": {
											"name": "SY03_DEFAULTATTACHFOLDER",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "SY03_PRINTBILLPARAM",
											"type": "Boolean"
										},
										"sink": {
											"name": "SY03_PRINTBILLPARAM",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "SY03_CONTYPE",
											"type": "Int32"
										},
										"sink": {
											"name": "SY03_CONTYPE",
											"type": "Int64"
										}
									},
									{
										"source": {
											"name": "SY03_CONAMT",
											"type": "Decimal"
										},
										"sink": {
											"name": "SY03_CONAMT",
											"type": "Int64"
										}
									},
									{
										"source": {
											"name": "SY03_CONUSE",
											"type": "Boolean"
										},
										"sink": {
											"name": "SY03_CONUSE",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "SY03_DOWNTIMESTARTEND",
											"type": "Boolean"
										},
										"sink": {
											"name": "SY03_DOWNTIMESTARTEND",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "SY03_ROLABORTIMESPAN",
											"type": "Boolean"
										},
										"sink": {
											"name": "SY03_ROLABORTIMESPAN",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "SY03_USEGMAP",
											"type": "Boolean"
										},
										"sink": {
											"name": "SY03_USEGMAP",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "SY03_SHOWPARTSUBSYSTEM",
											"type": "Boolean"
										},
										"sink": {
											"name": "SY03_SHOWPARTSUBSYSTEM",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "SY03_QTDWARN",
											"type": "Decimal"
										},
										"sink": {
											"name": "SY03_QTDWARN",
											"type": "Int64"
										}
									},
									{
										"source": {
											"name": "SY03_QTDSTOP",
											"type": "Decimal"
										},
										"sink": {
											"name": "SY03_QTDSTOP",
											"type": "Int64"
										}
									},
									{
										"source": {
											"name": "SY03_CREDITMEMO",
											"type": "Boolean"
										},
										"sink": {
											"name": "SY03_CREDITMEMO",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "SY03_ADJAPPV",
											"type": "Boolean"
										},
										"sink": {
											"name": "SY03_ADJAPPV",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "SY03_NOTIFYUSER",
											"type": "Boolean"
										},
										"sink": {
											"name": "SY03_NOTIFYUSER",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "SY03_SHOWRATE",
											"type": "Boolean"
										},
										"sink": {
											"name": "SY03_SHOWRATE",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "SY03_ASSETTRANSFER",
											"type": "Boolean"
										},
										"sink": {
											"name": "SY03_ASSETTRANSFER",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "SY03_TEST",
											"type": "Boolean"
										},
										"sink": {
											"name": "SY03_TEST",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "SY03_SchedCallsToRouteFromSC",
											"type": "Boolean"
										},
										"sink": {
											"name": "SY03_SCHEDCALLSTOROUTEFROMSC",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "SY03_EmailRSToDriver",
											"type": "Boolean"
										},
										"sink": {
											"name": "SY03_EMAILRSTODRIVER",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "SY03_DEFCUSTYPE",
											"type": "String"
										},
										"sink": {
											"name": "SY03_DEFCUSTYPE",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "SY03_NO0MINIWARNINGFORINTERC",
											"type": "Boolean"
										},
										"sink": {
											"name": "SY03_NO0MINIWARNINGFORINTERC",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "SY03_PRINTPRICES",
											"type": "Boolean"
										},
										"sink": {
											"name": "SY03_PRINTPRICES",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "SY03_MAXODOMETER",
											"type": "Int32"
										},
										"sink": {
											"name": "SY03_MAXODOMETER",
											"type": "Int64"
										}
									},
									{
										"source": {
											"name": "SY03_MAXENGINEHOURS",
											"type": "Decimal"
										},
										"sink": {
											"name": "SY03_MAXENGINEHOURS",
											"type": "Int64"
										}
									},
									{
										"source": {
											"name": "SY03_ADDCALLTOEND",
											"type": "Boolean"
										},
										"sink": {
											"name": "SY03_ADDCALLTOEND",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "SY03_ALLOWCHGHELDTKT",
											"type": "Boolean"
										},
										"sink": {
											"name": "SY03_ALLOWCHGHELDTKT",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "SY03_REMADD1",
											"type": "String"
										},
										"sink": {
											"name": "SY03_REMADD1",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "SY03_REMADD2",
											"type": "String"
										},
										"sink": {
											"name": "SY03_REMADD2",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "SY03_REMCITY",
											"type": "String"
										},
										"sink": {
											"name": "SY03_REMCITY",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "SY03_REMSTAT",
											"type": "String"
										},
										"sink": {
											"name": "SY03_REMSTAT",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "SY03_REMPZIP",
											"type": "String"
										},
										"sink": {
											"name": "SY03_REMPZIP",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "SY03_REMCOUN",
											"type": "Int32"
										},
										"sink": {
											"name": "SY03_REMCOUN",
											"type": "Int64"
										}
									},
									{
										"source": {
											"name": "SY03_REMPHON",
											"type": "String"
										},
										"sink": {
											"name": "SY03_REMPHON",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "SY03_REMFAX",
											"type": "String"
										},
										"sink": {
											"name": "SY03_REMFAX",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "SY03_REMEMAIL",
											"type": "String"
										},
										"sink": {
											"name": "SY03_REMEMAIL",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "SY03_ADJTYPE",
											"type": "String"
										},
										"sink": {
											"name": "SY03_ADJTYPE",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "SY03_ADVDAYS",
											"type": "Int32"
										},
										"sink": {
											"name": "SY03_ADVDAYS",
											"type": "Int64"
										}
									},
									{
										"source": {
											"name": "SY03_RMINTERFACE",
											"type": "String"
										},
										"sink": {
											"name": "SY03_RMINTERFACE",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "SY03_EXPORTPATH",
											"type": "String"
										},
										"sink": {
											"name": "SY03_EXPORTPATH",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "SY03_IMPORTPATH",
											"type": "String"
										},
										"sink": {
											"name": "SY03_IMPORTPATH",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "SY03_RMURL",
											"type": "String"
										},
										"sink": {
											"name": "SY03_RMURL",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "SY03_USERNAME",
											"type": "String"
										},
										"sink": {
											"name": "SY03_USERNAME",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "SY03_PASSWORD",
											"type": "String"
										},
										"sink": {
											"name": "SY03_PASSWORD",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "SY03_RMAPIKEY",
											"type": "String"
										},
										"sink": {
											"name": "SY03_RMAPIKEY",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "SY03_MANINVSURCHG",
											"type": "Boolean"
										},
										"sink": {
											"name": "SY03_MANINVSURCHG",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "SY03_QUICKSEARCHAUTOFILL",
											"type": "Boolean"
										},
										"sink": {
											"name": "SY03_QUICKSEARCHAUTOFILL",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "SY03_USDOT",
											"type": "String"
										},
										"sink": {
											"name": "SY03_USDOT",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "SY03_TENDERAMNTREQUIRED",
											"type": "Boolean"
										},
										"sink": {
											"name": "SY03_TENDERAMNTREQUIRED",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "SY03_STORECVV2",
											"type": "Boolean"
										},
										"sink": {
											"name": "SY03_STORECVV2",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "SY03_DEFAULTPAYTERMS",
											"type": "Int32"
										},
										"sink": {
											"name": "SY03_DEFAULTPAYTERMS",
											"type": "Int64"
										}
									},
									{
										"source": {
											"name": "SY03_NOJOBAFTER",
											"type": "Int32"
										},
										"sink": {
											"name": "SY03_NOJOBAFTER",
											"type": "Int64"
										}
									},
									{
										"source": {
											"name": "SY03_CONTDREADONLY",
											"type": "Boolean"
										},
										"sink": {
											"name": "SY03_CONTDREADONLY",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "SY03_CONTRATETYPE",
											"type": "Int32"
										},
										"sink": {
											"name": "SY03_CONTRATETYPE",
											"type": "Int64"
										}
									},
									{
										"source": {
											"name": "SY03_FORCEFACILITYSELECTION",
											"type": "Boolean"
										},
										"sink": {
											"name": "SY03_FORCEFACILITYSELECTION",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "SY03_AttachImageToInvoiceDefault",
											"type": "Boolean"
										},
										"sink": {
											"name": "SY03_ATTACHIMAGETOINVOICEDEFAULT",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "SY03_CCPROCFEEDEFAULTNEWCUST",
											"type": "Boolean"
										},
										"sink": {
											"name": "SY03_CCPROCFEEDEFAULTNEWCUST",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "SY03_CCPROCFEEADJREASON",
											"type": "String"
										},
										"sink": {
											"name": "SY03_CCPROCFEEADJREASON",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "SY03_CCPROCFEEGLACCOUNT",
											"type": "String"
										},
										"sink": {
											"name": "SY03_CCPROCFEEGLACCOUNT",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "SY03_CCPROCFEERATE",
											"type": "Decimal"
										},
										"sink": {
											"name": "SY03_CCPROCFEERATE",
											"type": "Int64"
										}
									},
									{
										"source": {
											"name": "SY03_CCPROCFEEDESC",
											"type": "String"
										},
										"sink": {
											"name": "SY03_CCPROCFEEDESC",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "SY03_DEFTAX",
											"type": "Boolean"
										},
										"sink": {
											"name": "SY03_DEFTAX",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "SY03_SYNCINTERVAL",
											"type": "Int32"
										},
										"sink": {
											"name": "SY03_SYNCINTERVAL",
											"type": "Int64"
										}
									},
									{
										"source": {
											"name": "SY03_GLINVFAC",
											"type": "Boolean"
										},
										"sink": {
											"name": "SY03_GLINVFAC",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "SY03_APPLCUSTORIG",
											"type": "Boolean"
										},
										"sink": {
											"name": "SY03_APPLCUSTORIG",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "SY03_DEMNONWORK",
											"type": "Boolean"
										},
										"sink": {
											"name": "SY03_DEMNONWORK",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "sy03_tokenmerchant",
											"type": "Int32"
										},
										"sink": {
											"name": "SY03_TOKENMERCHANT",
											"type": "Int64"
										}
									}
								]
							}
						},
						"inputs": [
							{
								"referenceName": "TRUX_MSAZ01_SQL_P12",
								"type": "DatasetReference",
								"parameters": {
									"schema": "dbo",
									"table": "SY03",
									"database": "TRUX_DATA",
									"server": "MSAZ01-SQL-P12"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "LRS_Snowflake_Raw_V2_New",
								"type": "DatasetReference",
								"parameters": {
									"Snowflake_Sink_Table": "TRUX_DATA_SY03",
									"Snowflake_Schema": "MASTER_DATA"
								}
							}
						]
					},
					{
						"name": "COPY USER TABLE",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "SnowflakeV2Sink",
								"preCopyScript": "TRUNCATE TABLE LRS_RAW.MASTER_DATA.TRUX_DATA_USER;",
								"importSettings": {
									"type": "SnowflakeImportCopyCommand"
								}
							},
							"enableStaging": true,
							"stagingSettings": {
								"linkedServiceName": {
									"referenceName": "MSAZ01_SQL_P12_Blob",
									"type": "LinkedServiceReference"
								},
								"path": "staging",
								"enableCompression": true
							},
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "USER_CODE",
											"type": "String"
										},
										"sink": {
											"name": "USER_CODE",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "USER_FNAME",
											"type": "String"
										},
										"sink": {
											"name": "USER_FNAME",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "USER_LNAME",
											"type": "String"
										},
										"sink": {
											"name": "USER_LNAME",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "USER_EMAIL",
											"type": "String"
										},
										"sink": {
											"name": "USER_EMAIL",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "USER_DISABLED",
											"type": "Boolean"
										},
										"sink": {
											"name": "USER_DISABLED",
											"type": "Boolean"
										}
									},
									{
										"source": {
											"name": "USER_EMPLOYEEID",
											"type": "String"
										},
										"sink": {
											"name": "USER_EMPLOYEEID",
											"type": "String"
										}
									}
								]
							}
						},
						"inputs": [
							{
								"referenceName": "TRUX_MSAZ01_SQL_P12",
								"type": "DatasetReference",
								"parameters": {
									"schema": "dbo",
									"table": "USER",
									"database": "TRUX_DATA",
									"server": "MSAZ01-SQL-P12"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "LRS_Snowflake_Raw_V2_New",
								"type": "DatasetReference",
								"parameters": {
									"Snowflake_Sink_Table": "TRUX_DATA_USER",
									"Snowflake_Schema": "MASTER_DATA"
								}
							}
						]
					},
					{
						"name": "COPY ONLINE ACCT TABLE",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": "SELECT [OPACCOUNT_ID]\n, [OPACCOUNT_EMAIL]\n, [OPACCOUNT_REGISDTE]\n, os.[OPACCESS_ID]\n, [OPACCESS_COMP]\n, [OPACCESS_CUST]\n, [OPACCESS_SITE]\n, [OPACCESS_ACTIVEDTE]\n, [OPACCESS_DEACTIVEDTE]\nFROM [OPACCOUNT] ot\nINNER JOIN [OPACCESS] os\nON [OPACCOUNT_ID] = [OPACCESS_LINK]\nINNER JOIN (SELECT MAX([OPACCESS_ID]) AS [OPACCESS_ID]\n\t\t      FROM [OPACCESS]\n\t\t\t GROUP BY OPACCESS_LINK) AS latest\nON os.[OPACCESS_ID] = latest.[OPACCESS_ID];",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "SnowflakeV2Sink",
								"preCopyScript": "TRUNCATE TABLE LRS_RAW.MASTER_DATA.TRUX_DATA_ONLINE_ACCT;",
								"importSettings": {
									"type": "SnowflakeImportCopyCommand"
								}
							},
							"enableStaging": true,
							"stagingSettings": {
								"linkedServiceName": {
									"referenceName": "MSAZ01_SQL_P12_Blob",
									"type": "LinkedServiceReference"
								},
								"path": "staging",
								"enableCompression": true
							},
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "OPACCOUNT_ID",
											"type": "Int32"
										},
										"sink": {
											"name": "OPACCOUNT_ID",
											"type": "Int64"
										}
									},
									{
										"source": {
											"name": "OPACCOUNT_EMAIL",
											"type": "String"
										},
										"sink": {
											"name": "OPACCOUNT_EMAIL",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "OPACCOUNT_REGISDTE",
											"type": "DateTime"
										},
										"sink": {
											"name": "OPACCOUNT_REGISDTE",
											"type": "DateTime"
										}
									},
									{
										"source": {
											"name": "OPACCESS_ID",
											"type": "Int32"
										},
										"sink": {
											"name": "OPACCESS_ID",
											"type": "Int64"
										}
									},
									{
										"source": {
											"name": "OPACCESS_COMP",
											"type": "String"
										},
										"sink": {
											"name": "OPACCESS_COMP",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "OPACCESS_CUST",
											"type": "Int32"
										},
										"sink": {
											"name": "OPACCESS_CUST",
											"type": "Int64"
										}
									},
									{
										"source": {
											"name": "OPACCESS_SITE",
											"type": "Int32"
										},
										"sink": {
											"name": "OPACCESS_SITE",
											"type": "Int64"
										}
									},
									{
										"source": {
											"name": "OPACCESS_ACTIVEDTE",
											"type": "DateTime"
										},
										"sink": {
											"name": "OPACCESS_ACTIVEDTE",
											"type": "DateTime"
										}
									},
									{
										"source": {
											"name": "OPACCESS_DEACTIVEDTE",
											"type": "DateTime"
										},
										"sink": {
											"name": "OPACCESS_DEACTIVEDTE",
											"type": "DateTime"
										}
									}
								]
							}
						},
						"inputs": [
							{
								"referenceName": "TRUX_MSAZ01_SQL_P12",
								"type": "DatasetReference",
								"parameters": {
									"schema": "dbo",
									"table": "OPACCOUNT",
									"database": "TRUX_DATA",
									"server": "MSAZ01-SQL-P12"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "LRS_Snowflake_Raw_V2_New",
								"type": "DatasetReference",
								"parameters": {
									"Snowflake_Sink_Table": "TRUX_DATA_ONLINE_ACCT",
									"Snowflake_Schema": "MASTER_DATA"
								}
							}
						]
					},
					{
						"name": "COPY AN_ROUTE TABLE",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "SnowflakeV2Sink",
								"preCopyScript": "TRUNCATE TABLE LRS_RAW.MASTER_DATA.TRUX_DATA_AN_ROUTE;",
								"importSettings": {
									"type": "SnowflakeImportCopyCommand"
								}
							},
							"enableStaging": true,
							"stagingSettings": {
								"linkedServiceName": {
									"referenceName": "MSAZ01_SQL_P12_Blob",
									"type": "LinkedServiceReference"
								},
								"path": "staging",
								"enableCompression": true
							},
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "AN_ROUTE_ROUTE",
											"type": "String"
										},
										"sink": {
											"name": "AN_ROUTE_ROUTE",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "AN_ROUTE_COMPANY",
											"type": "String"
										},
										"sink": {
											"name": "AN_ROUTE_COMPANY",
											"type": "String"
										}
									}
								]
							}
						},
						"inputs": [
							{
								"referenceName": "TRUX_MSAZ01_SQL_P12",
								"type": "DatasetReference",
								"parameters": {
									"schema": "dbo",
									"table": "AN_ROUTE",
									"database": "TRUX_DATA",
									"server": "MSAZ01-SQL-P12"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "LRS_Snowflake_Raw_V2_New",
								"type": "DatasetReference",
								"parameters": {
									"Snowflake_Sink_Table": "TRUX_DATA_AN_ROUTE",
									"Snowflake_Schema": "MASTER_DATA"
								}
							}
						]
					},
					{
						"name": "COPY PROFILE TABLE",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "SnowflakeV2Sink",
								"preCopyScript": "TRUNCATE TABLE LRS_RAW.MASTER_DATA.TRUX_DATA_PROFILE;",
								"importSettings": {
									"type": "SnowflakeImportCopyCommand"
								}
							},
							"enableStaging": true,
							"stagingSettings": {
								"linkedServiceName": {
									"referenceName": "MSAZ01_SQL_P12_Blob",
									"type": "LinkedServiceReference"
								},
								"path": "staging",
								"enableCompression": true
							},
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "PROFILE_ID",
											"type": "Int32"
										},
										"sink": {
											"name": "PROFILE_ID",
											"type": "Int64"
										}
									},
									{
										"source": {
											"name": "PROFILE_NAME",
											"type": "String"
										},
										"sink": {
											"name": "PROFILE_NAME",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "PROFILE_SYS",
											"type": "Int32"
										},
										"sink": {
											"name": "PROFILE_SYS",
											"type": "Int64"
										}
									},
									{
										"source": {
											"name": "PROFILE_CHGTICKDTE",
											"type": "Boolean"
										},
										"sink": {
											"name": "PROFILE_CHGTICKDTE",
											"type": "Boolean"
										}
									},
									{
										"source": {
											"name": "PROFILE_VOIDCASHTICK",
											"type": "Boolean"
										},
										"sink": {
											"name": "PROFILE_VOIDCASHTICK",
											"type": "Boolean"
										}
									},
									{
										"source": {
											"name": "PROFILE_VOIDINVOTICK",
											"type": "Boolean"
										},
										"sink": {
											"name": "PROFILE_VOIDINVOTICK",
											"type": "Boolean"
										}
									},
									{
										"source": {
											"name": "PROFILE_OVERRIDEMINPRICE",
											"type": "Boolean"
										},
										"sink": {
											"name": "PROFILE_OVERRIDEMINPRICE",
											"type": "Boolean"
										}
									},
									{
										"source": {
											"name": "PROFILE_EXPORT",
											"type": "Boolean"
										},
										"sink": {
											"name": "PROFILE_EXPORT",
											"type": "Boolean"
										}
									},
									{
										"source": {
											"name": "PROFILE_LOCKCREDITFIELDS",
											"type": "Boolean"
										},
										"sink": {
											"name": "PROFILE_LOCKCREDITFIELDS",
											"type": "Boolean"
										}
									},
									{
										"source": {
											"name": "PROFILE_HOBO",
											"type": "Boolean"
										},
										"sink": {
											"name": "PROFILE_HOBO",
											"type": "Boolean"
										}
									}
								]
							}
						},
						"inputs": [
							{
								"referenceName": "TRUX_MSAZ01_SQL_P12",
								"type": "DatasetReference",
								"parameters": {
									"schema": "dbo",
									"table": "PROFILE",
									"database": "TRUX_DATA",
									"server": "MSAZ01-SQL-P12"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "LRS_Snowflake_Raw_V2_New",
								"type": "DatasetReference",
								"parameters": {
									"Snowflake_Sink_Table": "TRUX_DATA_PROFILE",
									"Snowflake_Schema": "MASTER_DATA"
								}
							}
						]
					},
					{
						"name": "COPY USERCOMP TABLE",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "SnowflakeV2Sink",
								"preCopyScript": "TRUNCATE TABLE LRS_RAW.MASTER_DATA.TRUX_DATA_USERCOMP;",
								"importSettings": {
									"type": "SnowflakeImportCopyCommand"
								}
							},
							"enableStaging": true,
							"stagingSettings": {
								"linkedServiceName": {
									"referenceName": "MSAZ01_SQL_P12_Blob",
									"type": "LinkedServiceReference"
								},
								"path": "staging",
								"enableCompression": true
							},
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "USERCOMP_USER",
											"type": "String"
										},
										"sink": {
											"name": "USERCOMP_USER",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "USERCOMP_COMPANY",
											"type": "String"
										},
										"sink": {
											"name": "USERCOMP_COMPANY",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "USERCOMP_PROFILE",
											"type": "Int32"
										},
										"sink": {
											"name": "USERCOMP_PROFILE",
											"type": "Int64"
										}
									},
									{
										"source": {
											"name": "USERCOMP_PROFILEW",
											"type": "Int32"
										},
										"sink": {
											"name": "USERCOMP_PROFILEW",
											"type": "Int64"
										}
									},
									{
										"source": {
											"name": "USERCOMP_PROFILEM",
											"type": "Int32"
										},
										"sink": {
											"name": "USERCOMP_PROFILEM",
											"type": "Int64"
										}
									}
								]
							}
						},
						"inputs": [
							{
								"referenceName": "TRUX_MSAZ01_SQL_P12",
								"type": "DatasetReference",
								"parameters": {
									"schema": "dbo",
									"table": "USERCOMP",
									"database": "TRUX_DATA",
									"server": "MSAZ01-SQL-P12"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "LRS_Snowflake_Raw_V2_New",
								"type": "DatasetReference",
								"parameters": {
									"Snowflake_Sink_Table": "TRUX_DATA_USERCOMP",
									"Snowflake_Schema": "MASTER_DATA"
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "Production/TRUX"
				},
				"annotations": [],
				"lastPublishTime": "2024-08-30T17:58:00Z"
			},
			"dependsOn": []
		}
	]
}